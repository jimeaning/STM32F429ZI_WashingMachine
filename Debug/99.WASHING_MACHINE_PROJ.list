
99.WASHING_MACHINE_PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009978  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08009b28  08009b28  00019b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009da4  08009da4  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08009da4  08009da4  00019da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dac  08009dac  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dac  08009dac  00019dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009db0  08009db0  00019db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08009db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          00000a94  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b44  20000b44  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d96e  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d7b  00000000  00000000  0003da4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a0  00000000  00000000  000417d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001728  00000000  00000000  00043070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ff8  00000000  00000000  00044798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e982  00000000  00000000  00049790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed652  00000000  00000000  00068112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155764  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007204  00000000  00000000  001557b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009b10 	.word	0x08009b10

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	08009b10 	.word	0x08009b10

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2iz>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d215      	bcs.n	8000892 <__aeabi_d2iz+0x36>
 8000866:	d511      	bpl.n	800088c <__aeabi_d2iz+0x30>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d912      	bls.n	8000898 <__aeabi_d2iz+0x3c>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000882:	fa23 f002 	lsr.w	r0, r3, r2
 8000886:	bf18      	it	ne
 8000888:	4240      	negne	r0, r0
 800088a:	4770      	bx	lr
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	4770      	bx	lr
 8000892:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000896:	d105      	bne.n	80008a4 <__aeabi_d2iz+0x48>
 8000898:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800089c:	bf08      	it	eq
 800089e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b974 	b.w	8000bac <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468e      	mov	lr, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d14d      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008ea:	428a      	cmp	r2, r1
 80008ec:	4694      	mov	ip, r2
 80008ee:	d969      	bls.n	80009c4 <__udivmoddi4+0xe8>
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	b152      	cbz	r2, 800090c <__udivmoddi4+0x30>
 80008f6:	fa01 f302 	lsl.w	r3, r1, r2
 80008fa:	f1c2 0120 	rsb	r1, r2, #32
 80008fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000902:	fa0c fc02 	lsl.w	ip, ip, r2
 8000906:	ea41 0e03 	orr.w	lr, r1, r3
 800090a:	4094      	lsls	r4, r2
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	0c21      	lsrs	r1, r4, #16
 8000912:	fbbe f6f8 	udiv	r6, lr, r8
 8000916:	fa1f f78c 	uxth.w	r7, ip
 800091a:	fb08 e316 	mls	r3, r8, r6, lr
 800091e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000922:	fb06 f107 	mul.w	r1, r6, r7
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000932:	f080 811f 	bcs.w	8000b74 <__udivmoddi4+0x298>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 811c 	bls.w	8000b74 <__udivmoddi4+0x298>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3310 	mls	r3, r8, r0, r3
 800094c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000950:	fb00 f707 	mul.w	r7, r0, r7
 8000954:	42a7      	cmp	r7, r4
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x92>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000960:	f080 810a 	bcs.w	8000b78 <__udivmoddi4+0x29c>
 8000964:	42a7      	cmp	r7, r4
 8000966:	f240 8107 	bls.w	8000b78 <__udivmoddi4+0x29c>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	1be4      	subs	r4, r4, r7
 8000974:	2600      	movs	r6, #0
 8000976:	b11d      	cbz	r5, 8000980 <__udivmoddi4+0xa4>
 8000978:	40d4      	lsrs	r4, r2
 800097a:	2300      	movs	r3, #0
 800097c:	e9c5 4300 	strd	r4, r3, [r5]
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d909      	bls.n	800099e <__udivmoddi4+0xc2>
 800098a:	2d00      	cmp	r5, #0
 800098c:	f000 80ef 	beq.w	8000b6e <__udivmoddi4+0x292>
 8000990:	2600      	movs	r6, #0
 8000992:	e9c5 0100 	strd	r0, r1, [r5]
 8000996:	4630      	mov	r0, r6
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f683 	clz	r6, r3
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d14a      	bne.n	8000a3c <__udivmoddi4+0x160>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0xd4>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80f9 	bhi.w	8000ba2 <__udivmoddi4+0x2c6>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb61 0303 	sbc.w	r3, r1, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d0e0      	beq.n	8000980 <__udivmoddi4+0xa4>
 80009be:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c2:	e7dd      	b.n	8000980 <__udivmoddi4+0xa4>
 80009c4:	b902      	cbnz	r2, 80009c8 <__udivmoddi4+0xec>
 80009c6:	deff      	udf	#255	; 0xff
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f040 8092 	bne.w	8000af6 <__udivmoddi4+0x21a>
 80009d2:	eba1 010c 	sub.w	r1, r1, ip
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fa1f fe8c 	uxth.w	lr, ip
 80009de:	2601      	movs	r6, #1
 80009e0:	0c20      	lsrs	r0, r4, #16
 80009e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009e6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ee:	fb0e f003 	mul.w	r0, lr, r3
 80009f2:	4288      	cmp	r0, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x12c>
 80009f6:	eb1c 0101 	adds.w	r1, ip, r1
 80009fa:	f103 38ff 	add.w	r8, r3, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x12a>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f200 80cb 	bhi.w	8000b9c <__udivmoddi4+0x2c0>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1a09      	subs	r1, r1, r0
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a10:	fb07 1110 	mls	r1, r7, r0, r1
 8000a14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a18:	fb0e fe00 	mul.w	lr, lr, r0
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x156>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a28:	d202      	bcs.n	8000a30 <__udivmoddi4+0x154>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	f200 80bb 	bhi.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a30:	4608      	mov	r0, r1
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3a:	e79c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000a3c:	f1c6 0720 	rsb	r7, r6, #32
 8000a40:	40b3      	lsls	r3, r6
 8000a42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a52:	431c      	orrs	r4, r3
 8000a54:	40f9      	lsrs	r1, r7
 8000a56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a62:	0c20      	lsrs	r0, r4, #16
 8000a64:	fa1f fe8c 	uxth.w	lr, ip
 8000a68:	fb09 1118 	mls	r1, r9, r8, r1
 8000a6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a70:	fb08 f00e 	mul.w	r0, r8, lr
 8000a74:	4288      	cmp	r0, r1
 8000a76:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7a:	d90b      	bls.n	8000a94 <__udivmoddi4+0x1b8>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a84:	f080 8088 	bcs.w	8000b98 <__udivmoddi4+0x2bc>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f240 8085 	bls.w	8000b98 <__udivmoddi4+0x2bc>
 8000a8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a92:	4461      	add	r1, ip
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	458e      	cmp	lr, r1
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x1e2>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab4:	d26c      	bcs.n	8000b90 <__udivmoddi4+0x2b4>
 8000ab6:	458e      	cmp	lr, r1
 8000ab8:	d96a      	bls.n	8000b90 <__udivmoddi4+0x2b4>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4461      	add	r1, ip
 8000abe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ac6:	eba1 010e 	sub.w	r1, r1, lr
 8000aca:	42a1      	cmp	r1, r4
 8000acc:	46c8      	mov	r8, r9
 8000ace:	46a6      	mov	lr, r4
 8000ad0:	d356      	bcc.n	8000b80 <__udivmoddi4+0x2a4>
 8000ad2:	d053      	beq.n	8000b7c <__udivmoddi4+0x2a0>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x212>
 8000ad6:	ebb3 0208 	subs.w	r2, r3, r8
 8000ada:	eb61 010e 	sbc.w	r1, r1, lr
 8000ade:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ae6:	40f1      	lsrs	r1, r6
 8000ae8:	431f      	orrs	r7, r3
 8000aea:	e9c5 7100 	strd	r7, r1, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	4091      	lsls	r1, r2
 8000b06:	4301      	orrs	r1, r0
 8000b08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b14:	fb07 3610 	mls	r6, r7, r0, r3
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b22:	429e      	cmp	r6, r3
 8000b24:	fa04 f402 	lsl.w	r4, r4, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x260>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b32:	d22f      	bcs.n	8000b94 <__udivmoddi4+0x2b8>
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d92d      	bls.n	8000b94 <__udivmoddi4+0x2b8>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b44:	fb07 3316 	mls	r3, r7, r6, r3
 8000b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x28a>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b5c:	d216      	bcs.n	8000b8c <__udivmoddi4+0x2b0>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d914      	bls.n	8000b8c <__udivmoddi4+0x2b0>
 8000b62:	3e02      	subs	r6, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b6c:	e738      	b.n	80009e0 <__udivmoddi4+0x104>
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e705      	b.n	8000980 <__udivmoddi4+0xa4>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e3      	b.n	8000940 <__udivmoddi4+0x64>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6f8      	b.n	800096e <__udivmoddi4+0x92>
 8000b7c:	454b      	cmp	r3, r9
 8000b7e:	d2a9      	bcs.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b80:	ebb9 0802 	subs.w	r8, r9, r2
 8000b84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7a3      	b.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	e7ea      	b.n	8000b66 <__udivmoddi4+0x28a>
 8000b90:	4620      	mov	r0, r4
 8000b92:	e794      	b.n	8000abe <__udivmoddi4+0x1e2>
 8000b94:	4640      	mov	r0, r8
 8000b96:	e7d1      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b98:	46d0      	mov	r8, sl
 8000b9a:	e77b      	b.n	8000a94 <__udivmoddi4+0x1b8>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	e732      	b.n	8000a08 <__udivmoddi4+0x12c>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e709      	b.n	80009ba <__udivmoddi4+0xde>
 8000ba6:	4464      	add	r4, ip
 8000ba8:	3802      	subs	r0, #2
 8000baa:	e742      	b.n	8000a32 <__udivmoddi4+0x156>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <get_button>:
void lcd_display_mode_select(void);

// get_button(gpio, pin, button num)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1)을 리턴
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state = HAL_GPIO_ReadPin(GPIO, GPIO_PIN);	// 0, 1
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f002 fe45 	bl	8003854 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]

	//버튼이 눌러졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE)
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d10d      	bne.n	8000bf0 <get_button+0x40>
 8000bd4:	787b      	ldrb	r3, [r7, #1]
 8000bd6:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <get_button+0x6c>)
 8000bd8:	5cd3      	ldrb	r3, [r2, r3]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d108      	bne.n	8000bf0 <get_button+0x40>
	{
		HAL_Delay(100);	// noise가 지나가기를 기다림
 8000bde:	2064      	movs	r0, #100	; 0x64
 8000be0:	f001 ff9c 	bl	8002b1c <HAL_Delay>
		button_status[button_number] = curr_state;	// 현재의 버튼 상태를 저장
 8000be4:	787b      	ldrb	r3, [r7, #1]
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <get_button+0x6c>)
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	54ca      	strb	r2, [r1, r3]
		return BUTTON_RELEASE;	// 버튼이 눌려진 상태이나 아직은 noise 상태로 인정
 8000bec:	2301      	movs	r3, #1
 8000bee:	e011      	b.n	8000c14 <get_button+0x64>
	}
	// 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태이면
	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS)
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d10d      	bne.n	8000c12 <get_button+0x62>
 8000bf6:	787b      	ldrb	r3, [r7, #1]
 8000bf8:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <get_button+0x6c>)
 8000bfa:	5cd3      	ldrb	r3, [r2, r3]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d108      	bne.n	8000c12 <get_button+0x62>
	{
		button_status[button_number] = BUTTON_RELEASE;	// button_status table 초기화
 8000c00:	787b      	ldrb	r3, [r7, #1]
 8000c02:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <get_button+0x6c>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(30);
 8000c08:	201e      	movs	r0, #30
 8000c0a:	f001 ff87 	bl	8002b1c <HAL_Delay>
		return BUTTON_PRESS;	// 버튼을 한 번 눌렀다 뗀 것으로 인정한다
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e000      	b.n	8000c14 <get_button+0x64>
	}
	return BUTTON_RELEASE;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000000 	.word	0x20000000

08000c20 <lcd_display_mode_select>:

void lcd_display_mode_select(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
	char lcd_buff[40];

	if (get_button(GPIOC, GPIO_PIN_13, 4) == BUTTON_PRESS)
 8000c26:	2204      	movs	r2, #4
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	4820      	ldr	r0, [pc, #128]	; (8000cb0 <lcd_display_mode_select+0x90>)
 8000c2e:	f7ff ffbf 	bl	8000bb0 <get_button>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d137      	bne.n	8000ca8 <lcd_display_mode_select+0x88>
	{
		i2c_lcd_init();
 8000c38:	f000 fa92 	bl	8001160 <i2c_lcd_init>
		if (lcd_display_mode_flag == 0)
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <lcd_display_mode_select+0x94>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d106      	bne.n	8000c52 <lcd_display_mode_select+0x32>
		{
			move_cursor(0,0);
 8000c44:	2100      	movs	r1, #0
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 fab8 	bl	80011bc <move_cursor>
			lcd_string("*");
 8000c4c:	481a      	ldr	r0, [pc, #104]	; (8000cb8 <lcd_display_mode_select+0x98>)
 8000c4e:	f000 faa0 	bl	8001192 <lcd_string>
		}
		if (lcd_display_mode_flag == 1)
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <lcd_display_mode_select+0x94>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d106      	bne.n	8000c68 <lcd_display_mode_select+0x48>
		{
			move_cursor(0,8);
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 faad 	bl	80011bc <move_cursor>
			lcd_string("*");
 8000c62:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <lcd_display_mode_select+0x98>)
 8000c64:	f000 fa95 	bl	8001192 <lcd_string>
		}
		if (lcd_display_mode_flag == 2)
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <lcd_display_mode_select+0x94>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d106      	bne.n	8000c7e <lcd_display_mode_select+0x5e>
		{
			move_cursor(1,0);
 8000c70:	2100      	movs	r1, #0
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 faa2 	bl	80011bc <move_cursor>
			lcd_string("*");
 8000c78:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <lcd_display_mode_select+0x98>)
 8000c7a:	f000 fa8a 	bl	8001192 <lcd_string>
		}
		washing_init();
 8000c7e:	f000 fab5 	bl	80011ec <washing_init>
		lcd_display_mode_flag++;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <lcd_display_mode_select+0x94>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <lcd_display_mode_select+0x94>)
 8000c8c:	701a      	strb	r2, [r3, #0]
		lcd_display_mode_flag %= 3;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <lcd_display_mode_select+0x94>)
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <lcd_display_mode_select+0x9c>)
 8000c94:	fba3 1302 	umull	r1, r3, r3, r2
 8000c98:	0859      	lsrs	r1, r3, #1
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	440b      	add	r3, r1
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <lcd_display_mode_select+0x94>)
 8000ca6:	701a      	strb	r2, [r3, #0]
	}
}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	200000cc 	.word	0x200000cc
 8000cb8:	08009b28 	.word	0x08009b28
 8000cbc:	aaaaaaab 	.word	0xaaaaaaab

08000cc0 <dcmotor_normal>:
//   led_on_off();
//
//}

void dcmotor_normal(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
	 char lcd_buff[40];

	 if(!pwm_start_flag)
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <dcmotor_normal+0xbc>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d11c      	bne.n	8000d08 <dcmotor_normal+0x48>
	 {
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1); // int1
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd4:	482a      	ldr	r0, [pc, #168]	; (8000d80 <dcmotor_normal+0xc0>)
 8000cd6:	f002 fdd5 	bl	8003884 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0); // int2
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce0:	4827      	ldr	r0, [pc, #156]	; (8000d80 <dcmotor_normal+0xc0>)
 8000ce2:	f002 fdcf 	bl	8003884 <HAL_GPIO_WritePin>

		pwm_start_flag = 1;
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <dcmotor_normal+0xbc>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,80); // 껐다 켰을 때 다시 처음 속도로
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <dcmotor_normal+0xc4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2250      	movs	r2, #80	; 0x50
 8000cf2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4823      	ldr	r0, [pc, #140]	; (8000d84 <dcmotor_normal+0xc4>)
 8000cf8:	f004 fd5e 	bl	80057b8 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOD, 0x0f, 1);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	210f      	movs	r1, #15
 8000d00:	4821      	ldr	r0, [pc, #132]	; (8000d88 <dcmotor_normal+0xc8>)
 8000d02:	f002 fdbf 	bl	8003884 <HAL_GPIO_WritePin>
 8000d06:	e035      	b.n	8000d74 <dcmotor_normal+0xb4>
	 }
	 else
	 {
			fnd4digit_motor_clock();
 8000d08:	f000 f910 	bl	8000f2c <fnd4digit_motor_clock>
			if (dcmotor_t1ms_counter >= 1000)
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <dcmotor_normal+0xcc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d14:	db2e      	blt.n	8000d74 <dcmotor_normal+0xb4>
			{
				dcmotor_t1ms_counter = 0;
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <dcmotor_normal+0xcc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
				remain_time--;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <dcmotor_normal+0xd0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <dcmotor_normal+0xd0>)
 8000d24:	6013      	str	r3, [r2, #0]

				ultrasonic_processing();
 8000d26:	f001 fd5f 	bl	80027e8 <ultrasonic_processing>
				move_cursor(1, 0);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f000 fa45 	bl	80011bc <move_cursor>
				sprintf(lcd_buff, "Remain time: %2d", remain_time);
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <dcmotor_normal+0xd0>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	463b      	mov	r3, r7
 8000d38:	4916      	ldr	r1, [pc, #88]	; (8000d94 <dcmotor_normal+0xd4>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f007 fd96 	bl	800886c <siprintf>
				lcd_string(lcd_buff);
 8000d40:	463b      	mov	r3, r7
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fa25 	bl	8001192 <lcd_string>

				if (remain_time <= 0)
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <dcmotor_normal+0xd0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	dc11      	bgt.n	8000d74 <dcmotor_normal+0xb4>
				{
					remain_time = 0;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <dcmotor_normal+0xd0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000d56:	2100      	movs	r1, #0
 8000d58:	480a      	ldr	r0, [pc, #40]	; (8000d84 <dcmotor_normal+0xc4>)
 8000d5a:	f004 fdf5 	bl	8005948 <HAL_TIM_PWM_Stop>

					i2c_lcd_init();
 8000d5e:	f000 f9ff 	bl	8001160 <i2c_lcd_init>
					move_cursor(0, 0);
 8000d62:	2100      	movs	r1, #0
 8000d64:	2000      	movs	r0, #0
 8000d66:	f000 fa29 	bl	80011bc <move_cursor>
					lcd_string("Completed!!!");
 8000d6a:	480b      	ldr	r0, [pc, #44]	; (8000d98 <dcmotor_normal+0xd8>)
 8000d6c:	f000 fa11 	bl	8001192 <lcd_string>
					led_all_off();
 8000d70:	f000 fa74 	bl	800125c <led_all_off>
					return;
				}
			}
	 }
}
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000cd 	.word	0x200000cd
 8000d80:	40021000 	.word	0x40021000
 8000d84:	2000041c 	.word	0x2000041c
 8000d88:	40020c00 	.word	0x40020c00
 8000d8c:	20000ae0 	.word	0x20000ae0
 8000d90:	20000008 	.word	0x20000008
 8000d94:	08009b38 	.word	0x08009b38
 8000d98:	08009b4c 	.word	0x08009b4c

08000d9c <dcmotor_speedy>:

void dcmotor_speedy(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
	char lcd_buff[40];

	// DC motor가 돌아가면
	 if(!pwm_start_flag)
 8000da2:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <dcmotor_speedy+0xc0>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d11c      	bne.n	8000de4 <dcmotor_speedy+0x48>
	 {
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1); // int1
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db0:	482b      	ldr	r0, [pc, #172]	; (8000e60 <dcmotor_speedy+0xc4>)
 8000db2:	f002 fd67 	bl	8003884 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0); // int2
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbc:	4828      	ldr	r0, [pc, #160]	; (8000e60 <dcmotor_speedy+0xc4>)
 8000dbe:	f002 fd61 	bl	8003884 <HAL_GPIO_WritePin>

		pwm_start_flag = 1;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <dcmotor_speedy+0xc0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,160); // 껐다 켰을 때 다시 처음 속도로
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <dcmotor_speedy+0xc8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	22a0      	movs	r2, #160	; 0xa0
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4824      	ldr	r0, [pc, #144]	; (8000e64 <dcmotor_speedy+0xc8>)
 8000dd4:	f004 fcf0 	bl	80057b8 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOD, 0x0f, 1);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	210f      	movs	r1, #15
 8000ddc:	4822      	ldr	r0, [pc, #136]	; (8000e68 <dcmotor_speedy+0xcc>)
 8000dde:	f002 fd51 	bl	8003884 <HAL_GPIO_WritePin>
 8000de2:	e037      	b.n	8000e54 <dcmotor_speedy+0xb8>
	 }
	 else
	 {
		 	fnd4digit_motor_clock();
 8000de4:	f000 f8a2 	bl	8000f2c <fnd4digit_motor_clock>
			if (dcmotor_t1ms_counter >= 1000)
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <dcmotor_speedy+0xd0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000df0:	db30      	blt.n	8000e54 <dcmotor_speedy+0xb8>
			{
				dcmotor_t1ms_counter = 0;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <dcmotor_speedy+0xd0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
				remain_2x_time--;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <dcmotor_speedy+0xd4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <dcmotor_speedy+0xd4>)
 8000e00:	6013      	str	r3, [r2, #0]

				ultrasonic_processing();
 8000e02:	f001 fcf1 	bl	80027e8 <ultrasonic_processing>
				move_cursor(1, 0);
 8000e06:	2100      	movs	r1, #0
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f000 f9d7 	bl	80011bc <move_cursor>
				sprintf(lcd_buff, "Remain time: %2d", remain_2x_time);
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <dcmotor_speedy+0xd4>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	463b      	mov	r3, r7
 8000e14:	4917      	ldr	r1, [pc, #92]	; (8000e74 <dcmotor_speedy+0xd8>)
 8000e16:	4618      	mov	r0, r3
 8000e18:	f007 fd28 	bl	800886c <siprintf>
				lcd_string(lcd_buff);
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f9b7 	bl	8001192 <lcd_string>
				fnd4digit_sec_clock();
 8000e24:	f000 f82a 	bl	8000e7c <fnd4digit_sec_clock>

				if (remain_2x_time <= 0)
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <dcmotor_speedy+0xd4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	dc11      	bgt.n	8000e54 <dcmotor_speedy+0xb8>
				{
					remain_2x_time = 0;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <dcmotor_speedy+0xd4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000e36:	2100      	movs	r1, #0
 8000e38:	480a      	ldr	r0, [pc, #40]	; (8000e64 <dcmotor_speedy+0xc8>)
 8000e3a:	f004 fd85 	bl	8005948 <HAL_TIM_PWM_Stop>

					i2c_lcd_init();
 8000e3e:	f000 f98f 	bl	8001160 <i2c_lcd_init>
					move_cursor(0, 0);
 8000e42:	2100      	movs	r1, #0
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 f9b9 	bl	80011bc <move_cursor>
					lcd_string("Completed!!!");
 8000e4a:	480b      	ldr	r0, [pc, #44]	; (8000e78 <dcmotor_speedy+0xdc>)
 8000e4c:	f000 f9a1 	bl	8001192 <lcd_string>
					led_all_off();
 8000e50:	f000 fa04 	bl	800125c <led_all_off>
					return;
				}
			}
	 }
}
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000cd 	.word	0x200000cd
 8000e60:	40021000 	.word	0x40021000
 8000e64:	2000041c 	.word	0x2000041c
 8000e68:	40020c00 	.word	0x40020c00
 8000e6c:	20000ae0 	.word	0x20000ae0
 8000e70:	2000000c 	.word	0x2000000c
 8000e74:	08009b38 	.word	0x08009b38
 8000e78:	08009b4c 	.word	0x08009b4c

08000e7c <fnd4digit_sec_clock>:
#endif
	}
}

void fnd4digit_sec_clock(void)                  // original code copy 해서 수정 (for fnd 함수로 연동)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
   static unsigned int value=0;   // 1초가 되었을때 up count
   static unsigned int msec=0;    // ms counter
   static int i=0;     // FND position indicator    어떤 FND 킬지

//   FND4digit_off();         // clear
   if (fnd1ms_counter >= 2)   // 2ms reached
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <fnd4digit_sec_clock+0x90>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	dd3f      	ble.n	8000f08 <fnd4digit_sec_clock+0x8c>
   {
      fnd1ms_counter=0;
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <fnd4digit_sec_clock+0x90>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
      msec += 2;   // 2ms
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <fnd4digit_sec_clock+0x94>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3302      	adds	r3, #2
 8000e94:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <fnd4digit_sec_clock+0x94>)
 8000e96:	6013      	str	r3, [r2, #0]
      if (msec > 1000)   // 1000ms reached
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <fnd4digit_sec_clock+0x94>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ea0:	d90c      	bls.n	8000ebc <fnd4digit_sec_clock+0x40>
      {
         msec = 0;      // clear
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <fnd4digit_sec_clock+0x94>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
         value++;       // sec count를 증가
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <fnd4digit_sec_clock+0x98>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <fnd4digit_sec_clock+0x98>)
 8000eb0:	6013      	str	r3, [r2, #0]
         FND_update(value);      // 2ms 마다 FND 업데이트 하는 함수 호출
 8000eb2:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <fnd4digit_sec_clock+0x98>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f89a 	bl	8000ff0 <FND_update>
      }
      FND4digit_off();    //  FND all off
 8000ebc:	f000 f8cc 	bl	8001058 <FND4digit_off>
      // common 캐소우드 CL5642AH30
      HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_RESET);
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <fnd4digit_sec_clock+0x9c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <fnd4digit_sec_clock+0xa0>)
 8000ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <fnd4digit_sec_clock+0xa4>)
 8000ed0:	f002 fcd8 	bl	8003884 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_SET);
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <fnd4digit_sec_clock+0x9c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <fnd4digit_sec_clock+0xa8>)
 8000eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4811      	ldr	r0, [pc, #68]	; (8000f28 <fnd4digit_sec_clock+0xac>)
 8000ee4:	f002 fcce 	bl	8003884 <HAL_GPIO_WritePin>

      i++;   // 다음 display할 FND를 가리킨다.
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <fnd4digit_sec_clock+0x9c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <fnd4digit_sec_clock+0x9c>)
 8000ef0:	6013      	str	r3, [r2, #0]
      i %= 4;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <fnd4digit_sec_clock+0x9c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	425a      	negs	r2, r3
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	f002 0203 	and.w	r2, r2, #3
 8000f00:	bf58      	it	pl
 8000f02:	4253      	negpl	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <fnd4digit_sec_clock+0x9c>)
 8000f06:	6013      	str	r3, [r2, #0]
   }
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000ae4 	.word	0x20000ae4
 8000f10:	200000d8 	.word	0x200000d8
 8000f14:	200000dc 	.word	0x200000dc
 8000f18:	200000e0 	.word	0x200000e0
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	40020800 	.word	0x40020800
 8000f24:	200000d0 	.word	0x200000d0
 8000f28:	40020400 	.word	0x40020400

08000f2c <fnd4digit_motor_clock>:

void fnd4digit_motor_clock(void)                  // original code copy 해서 수정 (for fnd 함수로 연동)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
   static unsigned int msec=0;    // ms counter
   static int i=0;     // FND position indicator    어떤 FND 킬지

   if (fnd1ms_counter >= 1)   // 2ms reached
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <fnd4digit_motor_clock+0xa0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dd46      	ble.n	8000fc6 <fnd4digit_motor_clock+0x9a>
   {
      fnd1ms_counter=0;
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <fnd4digit_motor_clock+0xa0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
      msec += 2;   // 2ms
 8000f3e:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <fnd4digit_motor_clock+0xa4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3302      	adds	r3, #2
 8000f44:	4a22      	ldr	r2, [pc, #136]	; (8000fd0 <fnd4digit_motor_clock+0xa4>)
 8000f46:	6013      	str	r3, [r2, #0]
      if (msec > 1000)   // 1000ms reached
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <fnd4digit_motor_clock+0xa4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f50:	d915      	bls.n	8000f7e <fnd4digit_motor_clock+0x52>
      {
         msec = 0;      // clear
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <fnd4digit_motor_clock+0xa4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
         if (remain_time >= 0 && remain_2x_time == 5)
 8000f58:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <fnd4digit_motor_clock+0xa8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db09      	blt.n	8000f74 <fnd4digit_motor_clock+0x48>
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <fnd4digit_motor_clock+0xac>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d105      	bne.n	8000f74 <fnd4digit_motor_clock+0x48>
         {
        	 FND_update(remain_time);      // 2ms 마다 FND 업데이트 하는 함수 호출
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <fnd4digit_motor_clock+0xa8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f83f 	bl	8000ff0 <FND_update>
         {
 8000f72:	e004      	b.n	8000f7e <fnd4digit_motor_clock+0x52>
         }
         else
         {
        	 FND_update(remain_2x_time);
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <fnd4digit_motor_clock+0xac>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f839 	bl	8000ff0 <FND_update>
         }
      }
      FND4digit_off();    //  FND all off
 8000f7e:	f000 f86b 	bl	8001058 <FND4digit_off>
      // common 캐소우드 CL5642AH30
      HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_RESET);
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <fnd4digit_motor_clock+0xb0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <fnd4digit_motor_clock+0xb4>)
 8000f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4814      	ldr	r0, [pc, #80]	; (8000fe4 <fnd4digit_motor_clock+0xb8>)
 8000f92:	f002 fc77 	bl	8003884 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_SET);
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <fnd4digit_motor_clock+0xb0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <fnd4digit_motor_clock+0xbc>)
 8000f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4811      	ldr	r0, [pc, #68]	; (8000fec <fnd4digit_motor_clock+0xc0>)
 8000fa6:	f002 fc6d 	bl	8003884 <HAL_GPIO_WritePin>

      i++;   // 다음 display할 FND를 가리킨다.
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <fnd4digit_motor_clock+0xb0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <fnd4digit_motor_clock+0xb0>)
 8000fb2:	6013      	str	r3, [r2, #0]
      i %= 2;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <fnd4digit_motor_clock+0xb0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	bfb8      	it	lt
 8000fc0:	425b      	neglt	r3, r3
 8000fc2:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <fnd4digit_motor_clock+0xb0>)
 8000fc4:	6013      	str	r3, [r2, #0]
   }
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000ae4 	.word	0x20000ae4
 8000fd0:	200000e4 	.word	0x200000e4
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	2000000c 	.word	0x2000000c
 8000fdc:	200000e8 	.word	0x200000e8
 8000fe0:	20000010 	.word	0x20000010
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	200000d0 	.word	0x200000d0
 8000fec:	40020400 	.word	0x40020400

08000ff0 <FND_update>:

void FND_update(unsigned int value)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	FND[0] = FND_font[value % 10];
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <FND_update+0x5c>)
 8000ffc:	fba3 2301 	umull	r2, r3, r3, r1
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	1aca      	subs	r2, r1, r3
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <FND_update+0x60>)
 800100e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <FND_update+0x64>)
 8001016:	801a      	strh	r2, [r3, #0]
	FND[1] = FND_font[value / 10 % 10];
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a0c      	ldr	r2, [pc, #48]	; (800104c <FND_update+0x5c>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	08d9      	lsrs	r1, r3, #3
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <FND_update+0x5c>)
 8001024:	fba3 2301 	umull	r2, r3, r3, r1
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	1aca      	subs	r2, r1, r3
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <FND_update+0x60>)
 8001036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <FND_update+0x64>)
 800103e:	805a      	strh	r2, [r3, #2]
//	FND[2] = FND_font[value / 100 % 10];
//	FND[3] = FND_font[value / 1000 % 10];

	return;
 8001040:	bf00      	nop
}
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	cccccccd 	.word	0xcccccccd
 8001050:	20000018 	.word	0x20000018
 8001054:	200000d0 	.word	0x200000d0

08001058 <FND4digit_off>:
void FND4digit_off(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
#if 0 // common 에노우드 WCN4-
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_SET);
#else // common 캐소우드 CL5642AH30
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001062:	4808      	ldr	r0, [pc, #32]	; (8001084 <FND4digit_off+0x2c>)
 8001064:	f002 fc0e 	bl	8003884 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_RESET);
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <FND4digit_off+0x30>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	b29b      	uxth	r3, r3
 800106e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001072:	b29b      	uxth	r3, r3
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <FND4digit_off+0x34>)
 800107a:	f002 fc03 	bl	8003884 <HAL_GPIO_WritePin>
#endif
	return;
 800107e:	bf00      	nop
}
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40020800 	.word	0x40020800
 8001088:	20000018 	.word	0x20000018
 800108c:	40020400 	.word	0x40020400

08001090 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f023 030f 	bic.w	r3, r3, #15
 80010a0:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	f043 030c 	orr.w	r3, r3, #12
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	f043 030c 	orr.w	r3, r3, #12
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80010d0:	bf00      	nop
 80010d2:	f107 0208 	add.w	r2, r7, #8
 80010d6:	2364      	movs	r3, #100	; 0x64
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2304      	movs	r3, #4
 80010dc:	214e      	movs	r1, #78	; 0x4e
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <lcd_command+0x64>)
 80010e0:	f002 fd2e 	bl	8003b40 <HAL_I2C_Master_Transmit>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f3      	bne.n	80010d2 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 80010ea:	bf00      	nop
}
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000318 	.word	0x20000318

080010f8 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f023 030f 	bic.w	r3, r3, #15
 8001108:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	f043 030d 	orr.w	r3, r3, #13
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f043 0309 	orr.w	r3, r3, #9
 8001120:	b2db      	uxtb	r3, r3
 8001122:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	f043 030d 	orr.w	r3, r3, #13
 800112a:	b2db      	uxtb	r3, r3
 800112c:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	f043 0309 	orr.w	r3, r3, #9
 8001134:	b2db      	uxtb	r3, r3
 8001136:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001138:	bf00      	nop
 800113a:	f107 0208 	add.w	r2, r7, #8
 800113e:	2364      	movs	r3, #100	; 0x64
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2304      	movs	r3, #4
 8001144:	214e      	movs	r1, #78	; 0x4e
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <lcd_data+0x64>)
 8001148:	f002 fcfa 	bl	8003b40 <HAL_I2C_Master_Transmit>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f3      	bne.n	800113a <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8001152:	bf00      	nop
}
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000318 	.word	0x20000318

08001160 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8001164:	2033      	movs	r0, #51	; 0x33
 8001166:	f7ff ff93 	bl	8001090 <lcd_command>
	lcd_command(0x32);
 800116a:	2032      	movs	r0, #50	; 0x32
 800116c:	f7ff ff90 	bl	8001090 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8001170:	2028      	movs	r0, #40	; 0x28
 8001172:	f7ff ff8d 	bl	8001090 <lcd_command>
	lcd_command(DISPLAY_ON);
 8001176:	200c      	movs	r0, #12
 8001178:	f7ff ff8a 	bl	8001090 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 800117c:	2006      	movs	r0, #6
 800117e:	f7ff ff87 	bl	8001090 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff ff84 	bl	8001090 <lcd_command>
	HAL_Delay(2);
 8001188:	2002      	movs	r0, #2
 800118a:	f001 fcc7 	bl	8002b1c <HAL_Delay>
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}

08001192 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	while(*str)
 800119a:	e006      	b.n	80011aa <lcd_string+0x18>
	{
		lcd_data(*str++);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ffa7 	bl	80010f8 <lcd_data>
	while(*str)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f4      	bne.n	800119c <lcd_string+0xa>
	}
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	460a      	mov	r2, r1
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	019b      	lsls	r3, r3, #6
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff56 	bl	8001090 <lcd_command>
	return;
 80011e4:	bf00      	nop
}
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <washing_init>:

void washing_init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	move_cursor(0,1);
 80011f0:	2101      	movs	r1, #1
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff ffe2 	bl	80011bc <move_cursor>
	lcd_string("Washing");
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <washing_init+0x34>)
 80011fa:	f7ff ffca 	bl	8001192 <lcd_string>
	move_cursor(0,9);
 80011fe:	2109      	movs	r1, #9
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ffdb 	bl	80011bc <move_cursor>
	lcd_string("Rinsing");
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <washing_init+0x38>)
 8001208:	f7ff ffc3 	bl	8001192 <lcd_string>
	move_cursor(1,1);
 800120c:	2101      	movs	r1, #1
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff ffd4 	bl	80011bc <move_cursor>
	lcd_string("Dehydrating");
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <washing_init+0x3c>)
 8001216:	f7ff ffbc 	bl	8001192 <lcd_string>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	08009b90 	.word	0x08009b90
 8001224:	08009b98 	.word	0x08009b98
 8001228:	08009ba0 	.word	0x08009ba0

0800122c <washing_option>:

void washing_option(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8001230:	f7ff ff96 	bl	8001160 <i2c_lcd_init>
	move_cursor(0,1);
 8001234:	2101      	movs	r1, #1
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff ffc0 	bl	80011bc <move_cursor>
	lcd_string("Normal");
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <washing_option+0x28>)
 800123e:	f7ff ffa8 	bl	8001192 <lcd_string>
	move_cursor(1,1);
 8001242:	2101      	movs	r1, #1
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff ffb9 	bl	80011bc <move_cursor>
	lcd_string("Speedy");
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <washing_option+0x2c>)
 800124c:	f7ff ffa1 	bl	8001192 <lcd_string>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	08009bac 	.word	0x08009bac
 8001258:	08009bb4 	.word	0x08009bb4

0800125c <led_all_off>:
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
#endif
}

void led_all_off(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	static int i = 0;
#if 1
	if (t1ms_counter >= 200)
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <led_all_off+0x28>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2bc7      	cmp	r3, #199	; 0xc7
 8001266:	dd0a      	ble.n	800127e <led_all_off+0x22>
	{
		t1ms_counter = 0;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <led_all_off+0x28>)
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	21ff      	movs	r1, #255	; 0xff
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <led_all_off+0x2c>)
 8001274:	f002 fb06 	bl	8003884 <HAL_GPIO_WritePin>
		func_index = FLOWER_ON;
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <led_all_off+0x30>)
 800127a:	2202      	movs	r2, #2
 800127c:	601a      	str	r2, [r3, #0]
#else
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
//				| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
#endif
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000adc 	.word	0x20000adc
 8001288:	40020c00 	.word	0x40020c00
 800128c:	200000ec 	.word	0x200000ec

08001290 <HAL_SYSTICK_Handler>:
// enter here every 1ms
volatile int t1ms_counter = 0;	// volatile : disable optimize 최적?�� 방�?
volatile int dcmotor_t1ms_counter = 0;
volatile int fnd1ms_counter = 0;  // fnd1ms
void HAL_SYSTICK_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	t1ms_counter++;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_SYSTICK_Handler+0x2c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_SYSTICK_Handler+0x2c>)
 800129c:	6013      	str	r3, [r2, #0]
	dcmotor_t1ms_counter++;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_SYSTICK_Handler+0x30>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_SYSTICK_Handler+0x30>)
 80012a6:	6013      	str	r3, [r2, #0]
	fnd1ms_counter++;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_SYSTICK_Handler+0x34>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <HAL_SYSTICK_Handler+0x34>)
 80012b0:	6013      	str	r3, [r2, #0]
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	20000adc 	.word	0x20000adc
 80012c0:	20000ae0 	.word	0x20000ae0
 80012c4:	20000ae4 	.word	0x20000ae4

080012c8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80012d0:	1d39      	adds	r1, r7, #4
 80012d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d6:	2201      	movs	r2, #1
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <__io_putchar+0x20>)
 80012da:	f005 feda 	bl	8007092 <HAL_UART_Transmit>

  return ch;
 80012de:	687b      	ldr	r3, [r7, #4]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000053c 	.word	0x2000053c

080012ec <HAL_TIM_PeriodElapsedCallback>:
// move from Dirver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs
//volatile int TIM10_10ms_counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d109      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001306:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;	// 초음?�� ?��?��(ultrasonic trigger) timer
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	4a06      	ldr	r2, [pc, #24]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001310:	6013      	str	r3, [r2, #0]
	}
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40014400 	.word	0x40014400
 8001324:	20000ad4 	.word	0x20000ad4
 8001328:	20000ad8 	.word	0x20000ad8

0800132c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001330:	f001 fb82 	bl	8002a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001334:	f000 f854 	bl	80013e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001338:	f000 fbe0 	bl	8001afc <MX_GPIO_Init>
  MX_ETH_Init();
 800133c:	f000 f8bc 	bl	80014b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001340:	f000 fb84 	bl	8001a4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001344:	f000 fbac 	bl	8001aa0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM10_Init();
 8001348:	f000 fb38 	bl	80019bc <MX_TIM10_Init>
  MX_TIM11_Init();
 800134c:	f000 fb5a 	bl	8001a04 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001350:	f000 f9f4 	bl	800173c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001354:	f000 f8fe 	bl	8001554 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001358:	f000 fa44 	bl	80017e4 <MX_TIM4_Init>
  MX_TIM2_Init();
 800135c:	f000 f994 	bl	8001688 <MX_TIM2_Init>
  MX_RTC_Init();
 8001360:	f000 f938 	bl	80015d4 <MX_RTC_Init>
  MX_TIM5_Init();
 8001364:	f000 fab4 	bl	80018d0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1); // assing to RX INT
 8001368:	2201      	movs	r2, #1
 800136a:	4913      	ldr	r1, [pc, #76]	; (80013b8 <main+0x8c>)
 800136c:	4813      	ldr	r0, [pc, #76]	; (80013bc <main+0x90>)
 800136e:	f005 ff22 	bl	80071b6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1); //for BT assign to RX INT
 8001372:	2201      	movs	r2, #1
 8001374:	4912      	ldr	r1, [pc, #72]	; (80013c0 <main+0x94>)
 8001376:	4813      	ldr	r0, [pc, #76]	; (80013c4 <main+0x98>)
 8001378:	f005 ff1d 	bl	80071b6 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);	// IT = Interrupt	ADD_JIMIN_1011
 800137c:	4812      	ldr	r0, [pc, #72]	; (80013c8 <main+0x9c>)
 800137e:	f004 f95b 	bl	8005638 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);	// IT = Interrupt	ADD_JIMIN_1011
 8001382:	4812      	ldr	r0, [pc, #72]	; (80013cc <main+0xa0>)
 8001384:	f004 f958 	bl	8005638 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	// for pulse count (rising edge & falling edge)
 8001388:	2100      	movs	r1, #0
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <main+0xa4>)
 800138c:	f004 fcb2 	bl	8005cf4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);	// for DC motor PWM count
 8001390:	2100      	movs	r1, #0
 8001392:	4810      	ldr	r0, [pc, #64]	; (80013d4 <main+0xa8>)
 8001394:	f004 fb48 	bl	8005a28 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_4);	// PIEZO Buzzer
 8001398:	210c      	movs	r1, #12
 800139a:	480f      	ldr	r0, [pc, #60]	; (80013d8 <main+0xac>)
 800139c:	f004 fb44 	bl	8005a28 <HAL_TIM_PWM_Start_IT>

  TIM10_10ms_counter = 0;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <main+0xb0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]

  i2c_lcd_init();
 80013a6:	f7ff fedb 	bl	8001160 <i2c_lcd_init>
  washing_init();
 80013aa:	f7ff ff1f 	bl	80011ec <washing_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  washing_select();
 80013ae:	f001 fa9f 	bl	80028f0 <washing_select>
//	  dcmotor_pwm_control();
//	  get_rtc();
	  lcd_display_mode_select();
 80013b2:	f7ff fc35 	bl	8000c20 <lcd_display_mode_select>
	  washing_select();
 80013b6:	e7fa      	b.n	80013ae <main+0x82>
 80013b8:	20000ad0 	.word	0x20000ad0
 80013bc:	2000053c 	.word	0x2000053c
 80013c0:	20000ad1 	.word	0x20000ad1
 80013c4:	20000a8c 	.word	0x20000a8c
 80013c8:	200004ac 	.word	0x200004ac
 80013cc:	200004f4 	.word	0x200004f4
 80013d0:	200003d4 	.word	0x200003d4
 80013d4:	2000041c 	.word	0x2000041c
 80013d8:	20000464 	.word	0x20000464
 80013dc:	20000ad4 	.word	0x20000ad4

080013e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b094      	sub	sp, #80	; 0x50
 80013e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	2230      	movs	r2, #48	; 0x30
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 f9a6 	bl	8008740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <SystemClock_Config+0xd0>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	4a28      	ldr	r2, [pc, #160]	; (80014b0 <SystemClock_Config+0xd0>)
 800140e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001412:	6413      	str	r3, [r2, #64]	; 0x40
 8001414:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <SystemClock_Config+0xd0>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <SystemClock_Config+0xd4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <SystemClock_Config+0xd4>)
 800142a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <SystemClock_Config+0xd4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800143c:	2309      	movs	r3, #9
 800143e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001440:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001446:	2301      	movs	r3, #1
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144a:	2302      	movs	r3, #2
 800144c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800144e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001454:	2304      	movs	r3, #4
 8001456:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001458:	23a8      	movs	r3, #168	; 0xa8
 800145a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800145c:	2302      	movs	r3, #2
 800145e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001460:	2307      	movs	r3, #7
 8001462:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0320 	add.w	r3, r7, #32
 8001468:	4618      	mov	r0, r3
 800146a:	f003 f809 	bl	8004480 <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001474:	f000 fc86 	bl	8001d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	2302      	movs	r3, #2
 800147e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001484:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001488:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800148a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2105      	movs	r1, #5
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fa6a 	bl	8004970 <HAL_RCC_ClockConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014a2:	f000 fc6f 	bl	8001d84 <Error_Handler>
  }
}
 80014a6:	bf00      	nop
 80014a8:	3750      	adds	r7, #80	; 0x50
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000

080014b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <MX_ETH_Init+0x84>)
 80014be:	4a20      	ldr	r2, [pc, #128]	; (8001540 <MX_ETH_Init+0x88>)
 80014c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <MX_ETH_Init+0x8c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_ETH_Init+0x8c>)
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_ETH_Init+0x8c>)
 80014d0:	22e1      	movs	r2, #225	; 0xe1
 80014d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_ETH_Init+0x8c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_ETH_Init+0x8c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_ETH_Init+0x8c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_ETH_Init+0x84>)
 80014e8:	4a16      	ldr	r2, [pc, #88]	; (8001544 <MX_ETH_Init+0x8c>)
 80014ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_ETH_Init+0x84>)
 80014ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_ETH_Init+0x84>)
 80014f6:	4a14      	ldr	r2, [pc, #80]	; (8001548 <MX_ETH_Init+0x90>)
 80014f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_ETH_Init+0x84>)
 80014fc:	4a13      	ldr	r2, [pc, #76]	; (800154c <MX_ETH_Init+0x94>)
 80014fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_ETH_Init+0x84>)
 8001502:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001506:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <MX_ETH_Init+0x84>)
 800150a:	f001 fccf 	bl	8002eac <HAL_ETH_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001514:	f000 fc36 	bl	8001d84 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001518:	2238      	movs	r2, #56	; 0x38
 800151a:	2100      	movs	r1, #0
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_ETH_Init+0x98>)
 800151e:	f007 f90f 	bl	8008740 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <MX_ETH_Init+0x98>)
 8001524:	2221      	movs	r2, #33	; 0x21
 8001526:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_ETH_Init+0x98>)
 800152a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800152e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <MX_ETH_Init+0x98>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000268 	.word	0x20000268
 8001540:	40028000 	.word	0x40028000
 8001544:	20000ae8 	.word	0x20000ae8
 8001548:	200001c8 	.word	0x200001c8
 800154c:	20000128 	.word	0x20000128
 8001550:	200000f0 	.word	0x200000f0

08001554 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_I2C1_Init+0x74>)
 800155a:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <MX_I2C1_Init+0x78>)
 800155c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <MX_I2C1_Init+0x7c>)
 8001562:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_I2C1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001572:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001576:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_I2C1_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_I2C1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001592:	f002 f991 	bl	80038b8 <HAL_I2C_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800159c:	f000 fbf2 	bl	8001d84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a0:	2100      	movs	r1, #0
 80015a2:	4809      	ldr	r0, [pc, #36]	; (80015c8 <MX_I2C1_Init+0x74>)
 80015a4:	f002 fdd3 	bl	800414e <HAL_I2CEx_ConfigAnalogFilter>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80015ae:	f000 fbe9 	bl	8001d84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015b2:	2100      	movs	r1, #0
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_I2C1_Init+0x74>)
 80015b6:	f002 fe06 	bl	80041c6 <HAL_I2CEx_ConfigDigitalFilter>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80015c0:	f000 fbe0 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000318 	.word	0x20000318
 80015cc:	40005400 	.word	0x40005400
 80015d0:	000186a0 	.word	0x000186a0

080015d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015e8:	2300      	movs	r3, #0
 80015ea:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <MX_RTC_Init+0xac>)
 80015ee:	4a25      	ldr	r2, [pc, #148]	; (8001684 <MX_RTC_Init+0xb0>)
 80015f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015f2:	4b23      	ldr	r3, [pc, #140]	; (8001680 <MX_RTC_Init+0xac>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_RTC_Init+0xac>)
 80015fa:	227f      	movs	r2, #127	; 0x7f
 80015fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <MX_RTC_Init+0xac>)
 8001600:	22ff      	movs	r2, #255	; 0xff
 8001602:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <MX_RTC_Init+0xac>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_RTC_Init+0xac>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_RTC_Init+0xac>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001616:	481a      	ldr	r0, [pc, #104]	; (8001680 <MX_RTC_Init+0xac>)
 8001618:	f003 fd8a 	bl	8005130 <HAL_RTC_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001622:	f000 fbaf 	bl	8001d84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8001626:	2309      	movs	r3, #9
 8001628:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x39;
 800162a:	2339      	movs	r3, #57	; 0x39
 800162c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800162e:	2300      	movs	r3, #0
 8001630:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2201      	movs	r2, #1
 800163e:	4619      	mov	r1, r3
 8001640:	480f      	ldr	r0, [pc, #60]	; (8001680 <MX_RTC_Init+0xac>)
 8001642:	f003 fdeb 	bl	800521c <HAL_RTC_SetTime>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800164c:	f000 fb9a 	bl	8001d84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001650:	2301      	movs	r3, #1
 8001652:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8001654:	2310      	movs	r3, #16
 8001656:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8001658:	2316      	movs	r3, #22
 800165a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 800165c:	2323      	movs	r3, #35	; 0x23
 800165e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001660:	463b      	mov	r3, r7
 8001662:	2201      	movs	r2, #1
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	; (8001680 <MX_RTC_Init+0xac>)
 8001668:	f003 fe72 	bl	8005350 <HAL_RTC_SetDate>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001672:	f000 fb87 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000036c 	.word	0x2000036c
 8001684:	40002800 	.word	0x40002800

08001688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	615a      	str	r2, [r3, #20]
 80016a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <MX_TIM2_Init+0xb0>)
 80016ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <MX_TIM2_Init+0xb0>)
 80016b4:	f240 628f 	movw	r2, #1679	; 0x68f
 80016b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <MX_TIM2_Init+0xb0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <MX_TIM2_Init+0xb0>)
 80016c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <MX_TIM2_Init+0xb0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_TIM2_Init+0xb0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016d4:	4818      	ldr	r0, [pc, #96]	; (8001738 <MX_TIM2_Init+0xb0>)
 80016d6:	f004 f81f 	bl	8005718 <HAL_TIM_PWM_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80016e0:	f000 fb50 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ec:	f107 0320 	add.w	r3, r7, #32
 80016f0:	4619      	mov	r1, r3
 80016f2:	4811      	ldr	r0, [pc, #68]	; (8001738 <MX_TIM2_Init+0xb0>)
 80016f4:	f005 fbf0 	bl	8006ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80016fe:	f000 fb41 	bl	8001d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001702:	2360      	movs	r3, #96	; 0x60
 8001704:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001706:	f240 13f3 	movw	r3, #499	; 0x1f3
 800170a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	4807      	ldr	r0, [pc, #28]	; (8001738 <MX_TIM2_Init+0xb0>)
 800171c:	f004 fdb6 	bl	800628c <HAL_TIM_PWM_ConfigChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001726:	f000 fb2d 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <MX_TIM2_Init+0xb0>)
 800172c:	f000 fd88 	bl	8002240 <HAL_TIM_MspPostInit>

}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000038c 	.word	0x2000038c

0800173c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800174c:	463b      	mov	r3, r7
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001758:	4b20      	ldr	r3, [pc, #128]	; (80017dc <MX_TIM3_Init+0xa0>)
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <MX_TIM3_Init+0xa4>)
 800175c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <MX_TIM3_Init+0xa0>)
 8001760:	2253      	movs	r2, #83	; 0x53
 8001762:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001764:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MX_TIM3_Init+0xa0>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <MX_TIM3_Init+0xa0>)
 800176c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001770:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_TIM3_Init+0xa0>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_TIM3_Init+0xa0>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800177e:	4817      	ldr	r0, [pc, #92]	; (80017dc <MX_TIM3_Init+0xa0>)
 8001780:	f004 fa68 	bl	8005c54 <HAL_TIM_IC_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800178a:	f000 fafb 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	4619      	mov	r1, r3
 800179c:	480f      	ldr	r0, [pc, #60]	; (80017dc <MX_TIM3_Init+0xa0>)
 800179e:	f005 fb9b 	bl	8006ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017a8:	f000 faec 	bl	8001d84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80017ac:	230a      	movs	r3, #10
 80017ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017b0:	2301      	movs	r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <MX_TIM3_Init+0xa0>)
 80017c4:	f004 fcc6 	bl	8006154 <HAL_TIM_IC_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80017ce:	f000 fad9 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200003d4 	.word	0x200003d4
 80017e0:	40000400 	.word	0x40000400

080017e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08e      	sub	sp, #56	; 0x38
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	f107 0320 	add.w	r3, r7, #32
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	615a      	str	r2, [r3, #20]
 8001812:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <MX_TIM4_Init+0xe4>)
 8001816:	4a2d      	ldr	r2, [pc, #180]	; (80018cc <MX_TIM4_Init+0xe8>)
 8001818:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 800181a:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <MX_TIM4_Init+0xe4>)
 800181c:	f240 3247 	movw	r2, #839	; 0x347
 8001820:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <MX_TIM4_Init+0xe4>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <MX_TIM4_Init+0xe4>)
 800182a:	2263      	movs	r2, #99	; 0x63
 800182c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <MX_TIM4_Init+0xe4>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <MX_TIM4_Init+0xe4>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800183a:	4823      	ldr	r0, [pc, #140]	; (80018c8 <MX_TIM4_Init+0xe4>)
 800183c:	f003 fead 	bl	800559a <HAL_TIM_Base_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001846:	f000 fa9d 	bl	8001d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001850:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001854:	4619      	mov	r1, r3
 8001856:	481c      	ldr	r0, [pc, #112]	; (80018c8 <MX_TIM4_Init+0xe4>)
 8001858:	f004 fdda 	bl	8006410 <HAL_TIM_ConfigClockSource>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001862:	f000 fa8f 	bl	8001d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001866:	4818      	ldr	r0, [pc, #96]	; (80018c8 <MX_TIM4_Init+0xe4>)
 8001868:	f003 ff56 	bl	8005718 <HAL_TIM_PWM_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001872:	f000 fa87 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	4619      	mov	r1, r3
 8001884:	4810      	ldr	r0, [pc, #64]	; (80018c8 <MX_TIM4_Init+0xe4>)
 8001886:	f005 fb27 	bl	8006ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001890:	f000 fa78 	bl	8001d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001894:	2360      	movs	r3, #96	; 0x60
 8001896:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 8001898:	2345      	movs	r3, #69	; 0x45
 800189a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80018a0:	2304      	movs	r3, #4
 80018a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <MX_TIM4_Init+0xe4>)
 80018ac:	f004 fcee 	bl	800628c <HAL_TIM_PWM_ConfigChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80018b6:	f000 fa65 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018ba:	4803      	ldr	r0, [pc, #12]	; (80018c8 <MX_TIM4_Init+0xe4>)
 80018bc:	f000 fcc0 	bl	8002240 <HAL_TIM_MspPostInit>

}
 80018c0:	bf00      	nop
 80018c2:	3738      	adds	r7, #56	; 0x38
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000041c 	.word	0x2000041c
 80018cc:	40000800 	.word	0x40000800

080018d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <MX_TIM5_Init+0xe4>)
 8001902:	4a2d      	ldr	r2, [pc, #180]	; (80019b8 <MX_TIM5_Init+0xe8>)
 8001904:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <MX_TIM5_Init+0xe4>)
 8001908:	2233      	movs	r2, #51	; 0x33
 800190a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <MX_TIM5_Init+0xe4>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <MX_TIM5_Init+0xe4>)
 8001914:	f240 128f 	movw	r2, #399	; 0x18f
 8001918:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <MX_TIM5_Init+0xe4>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <MX_TIM5_Init+0xe4>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001926:	4823      	ldr	r0, [pc, #140]	; (80019b4 <MX_TIM5_Init+0xe4>)
 8001928:	f003 fe37 	bl	800559a <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001932:	f000 fa27 	bl	8001d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800193c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001940:	4619      	mov	r1, r3
 8001942:	481c      	ldr	r0, [pc, #112]	; (80019b4 <MX_TIM5_Init+0xe4>)
 8001944:	f004 fd64 	bl	8006410 <HAL_TIM_ConfigClockSource>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800194e:	f000 fa19 	bl	8001d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001952:	4818      	ldr	r0, [pc, #96]	; (80019b4 <MX_TIM5_Init+0xe4>)
 8001954:	f003 fee0 	bl	8005718 <HAL_TIM_PWM_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800195e:	f000 fa11 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	4619      	mov	r1, r3
 8001970:	4810      	ldr	r0, [pc, #64]	; (80019b4 <MX_TIM5_Init+0xe4>)
 8001972:	f005 fab1 	bl	8006ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800197c:	f000 fa02 	bl	8001d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001980:	2360      	movs	r3, #96	; 0x60
 8001982:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001984:	23c7      	movs	r3, #199	; 0xc7
 8001986:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	220c      	movs	r2, #12
 8001994:	4619      	mov	r1, r3
 8001996:	4807      	ldr	r0, [pc, #28]	; (80019b4 <MX_TIM5_Init+0xe4>)
 8001998:	f004 fc78 	bl	800628c <HAL_TIM_PWM_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80019a2:	f000 f9ef 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80019a6:	4803      	ldr	r0, [pc, #12]	; (80019b4 <MX_TIM5_Init+0xe4>)
 80019a8:	f000 fc4a 	bl	8002240 <HAL_TIM_MspPostInit>

}
 80019ac:	bf00      	nop
 80019ae:	3738      	adds	r7, #56	; 0x38
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000464 	.word	0x20000464
 80019b8:	40000c00 	.word	0x40000c00

080019bc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MX_TIM10_Init+0x40>)
 80019c2:	4a0f      	ldr	r2, [pc, #60]	; (8001a00 <MX_TIM10_Init+0x44>)
 80019c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <MX_TIM10_Init+0x40>)
 80019c8:	22a7      	movs	r2, #167	; 0xa7
 80019ca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <MX_TIM10_Init+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <MX_TIM10_Init+0x40>)
 80019d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80019d8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MX_TIM10_Init+0x40>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_TIM10_Init+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_TIM10_Init+0x40>)
 80019e8:	f003 fdd7 	bl	800559a <HAL_TIM_Base_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80019f2:	f000 f9c7 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200004ac 	.word	0x200004ac
 8001a00:	40014400 	.word	0x40014400

08001a04 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_TIM11_Init+0x40>)
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <MX_TIM11_Init+0x44>)
 8001a0c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <MX_TIM11_Init+0x40>)
 8001a10:	22a7      	movs	r2, #167	; 0xa7
 8001a12:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_TIM11_Init+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <MX_TIM11_Init+0x40>)
 8001a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a20:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_TIM11_Init+0x40>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_TIM11_Init+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_TIM11_Init+0x40>)
 8001a30:	f003 fdb3 	bl	800559a <HAL_TIM_Base_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001a3a:	f000 f9a3 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200004f4 	.word	0x200004f4
 8001a48:	40014800 	.word	0x40014800

08001a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_USART3_UART_Init+0x4c>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <MX_USART3_UART_Init+0x50>)
 8001a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <MX_USART3_UART_Init+0x4c>)
 8001a58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_USART3_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_USART3_UART_Init+0x4c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <MX_USART3_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_USART3_UART_Init+0x4c>)
 8001a72:	220c      	movs	r2, #12
 8001a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <MX_USART3_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_USART3_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_USART3_UART_Init+0x4c>)
 8001a84:	f005 fab8 	bl	8006ff8 <HAL_UART_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a8e:	f000 f979 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000053c 	.word	0x2000053c
 8001a9c:	40004800 	.word	0x40004800

08001aa0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001aaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aae:	2204      	movs	r2, #4
 8001ab0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ae4:	f002 fbae 	bl	8004244 <HAL_PCD_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001aee:	f000 f949 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000580 	.word	0x20000580

08001afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08e      	sub	sp, #56	; 0x38
 8001b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
 8001b16:	4b93      	ldr	r3, [pc, #588]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a92      	ldr	r2, [pc, #584]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b90      	ldr	r3, [pc, #576]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	623b      	str	r3, [r7, #32]
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	4b8c      	ldr	r3, [pc, #560]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a8b      	ldr	r2, [pc, #556]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b89      	ldr	r3, [pc, #548]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	4b85      	ldr	r3, [pc, #532]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a84      	ldr	r2, [pc, #528]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b82      	ldr	r3, [pc, #520]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	4b7e      	ldr	r3, [pc, #504]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a7d      	ldr	r2, [pc, #500]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b7b      	ldr	r3, [pc, #492]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b77      	ldr	r3, [pc, #476]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a76      	ldr	r2, [pc, #472]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b8c:	f043 0320 	orr.w	r3, r3, #32
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b74      	ldr	r3, [pc, #464]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b70      	ldr	r3, [pc, #448]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a6f      	ldr	r2, [pc, #444]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001ba8:	f043 0310 	orr.w	r3, r3, #16
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a68      	ldr	r2, [pc, #416]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001bc4:	f043 0308 	orr.w	r3, r3, #8
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b62      	ldr	r3, [pc, #392]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a61      	ldr	r2, [pc, #388]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b5f      	ldr	r3, [pc, #380]	; (8001d64 <MX_GPIO_Init+0x268>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	485c      	ldr	r0, [pc, #368]	; (8001d68 <MX_GPIO_Init+0x26c>)
 8001bf8:	f001 fe44 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f644 41ff 	movw	r1, #19711	; 0x4cff
 8001c02:	485a      	ldr	r0, [pc, #360]	; (8001d6c <MX_GPIO_Init+0x270>)
 8001c04:	f001 fe3e 	bl	8003884 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0e:	4858      	ldr	r0, [pc, #352]	; (8001d70 <MX_GPIO_Init+0x274>)
 8001c10:	f001 fe38 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001c1a:	4856      	ldr	r0, [pc, #344]	; (8001d74 <MX_GPIO_Init+0x278>)
 8001c1c:	f001 fe32 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2140      	movs	r1, #64	; 0x40
 8001c24:	4854      	ldr	r0, [pc, #336]	; (8001d78 <MX_GPIO_Init+0x27c>)
 8001c26:	f001 fe2d 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001c30:	4852      	ldr	r0, [pc, #328]	; (8001d7c <MX_GPIO_Init+0x280>)
 8001c32:	f001 fe27 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c36:	2200      	movs	r2, #0
 8001c38:	21ff      	movs	r1, #255	; 0xff
 8001c3a:	4851      	ldr	r0, [pc, #324]	; (8001d80 <MX_GPIO_Init+0x284>)
 8001c3c:	f001 fe22 	bl	8003884 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c54:	4619      	mov	r1, r3
 8001c56:	4849      	ldr	r0, [pc, #292]	; (8001d7c <MX_GPIO_Init+0x280>)
 8001c58:	f001 fc50 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c70:	4619      	mov	r1, r3
 8001c72:	483d      	ldr	r0, [pc, #244]	; (8001d68 <MX_GPIO_Init+0x26c>)
 8001c74:	f001 fc42 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB1 PB2 PB10
                           PB11 LD3_Pin PB3 PB4
                           PB5 PB6 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001c78:	f644 43ff 	movw	r3, #19711	; 0x4cff
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4836      	ldr	r0, [pc, #216]	; (8001d6c <MX_GPIO_Init+0x270>)
 8001c92:	f001 fc33 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 8001c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	4619      	mov	r1, r3
 8001cae:	4830      	ldr	r0, [pc, #192]	; (8001d70 <MX_GPIO_Init+0x274>)
 8001cb0:	f001 fc24 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DCMOTOR_Pin IN2_DCMOTOR_Pin */
  GPIO_InitStruct.Pin = IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin;
 8001cb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4829      	ldr	r0, [pc, #164]	; (8001d74 <MX_GPIO_Init+0x278>)
 8001cce:	f001 fc15 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001cd2:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4823      	ldr	r0, [pc, #140]	; (8001d74 <MX_GPIO_Init+0x278>)
 8001ce8:	f001 fc08 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001cec:	2340      	movs	r3, #64	; 0x40
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d00:	4619      	mov	r1, r3
 8001d02:	481d      	ldr	r0, [pc, #116]	; (8001d78 <MX_GPIO_Init+0x27c>)
 8001d04:	f001 fbfa 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4817      	ldr	r0, [pc, #92]	; (8001d78 <MX_GPIO_Init+0x27c>)
 8001d1c:	f001 fbee 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001d20:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d36:	4619      	mov	r1, r3
 8001d38:	4810      	ldr	r0, [pc, #64]	; (8001d7c <MX_GPIO_Init+0x280>)
 8001d3a:	f001 fbdf 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d3e:	23ff      	movs	r3, #255	; 0xff
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d52:	4619      	mov	r1, r3
 8001d54:	480a      	ldr	r0, [pc, #40]	; (8001d80 <MX_GPIO_Init+0x284>)
 8001d56:	f001 fbd1 	bl	80034fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d5a:	bf00      	nop
 8001d5c:	3738      	adds	r7, #56	; 0x38
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40021400 	.word	0x40021400
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40021800 	.word	0x40021800
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020c00 	.word	0x40020c00

08001d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <Error_Handler+0x8>
	...

08001d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_MspInit+0x4c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <HAL_MspInit+0x4c>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_MspInit+0x4c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_MspInit+0x4c>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <HAL_MspInit+0x4c>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_MspInit+0x4c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08e      	sub	sp, #56	; 0x38
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a55      	ldr	r2, [pc, #340]	; (8001f54 <HAL_ETH_MspInit+0x174>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	f040 80a4 	bne.w	8001f4c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e12:	6313      	str	r3, [r2, #48]	; 0x30
 8001e14:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	623b      	str	r3, [r7, #32]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
 8001e24:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	4a4b      	ldr	r2, [pc, #300]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e30:	4b49      	ldr	r3, [pc, #292]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
 8001e40:	4b45      	ldr	r3, [pc, #276]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	4a44      	ldr	r2, [pc, #272]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4c:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	4b3e      	ldr	r3, [pc, #248]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	4a3d      	ldr	r2, [pc, #244]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	6313      	str	r3, [r2, #48]	; 0x30
 8001e68:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	4a36      	ldr	r2, [pc, #216]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6313      	str	r3, [r2, #48]	; 0x30
 8001e84:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	4a2f      	ldr	r2, [pc, #188]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eba:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_ETH_MspInit+0x178>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ec8:	2332      	movs	r3, #50	; 0x32
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ed8:	230b      	movs	r3, #11
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	481e      	ldr	r0, [pc, #120]	; (8001f5c <HAL_ETH_MspInit+0x17c>)
 8001ee4:	f001 fb0a 	bl	80034fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ee8:	2386      	movs	r3, #134	; 0x86
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ef8:	230b      	movs	r3, #11
 8001efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f00:	4619      	mov	r1, r3
 8001f02:	4817      	ldr	r0, [pc, #92]	; (8001f60 <HAL_ETH_MspInit+0x180>)
 8001f04:	f001 fafa 	bl	80034fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f1a:	230b      	movs	r3, #11
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f22:	4619      	mov	r1, r3
 8001f24:	480f      	ldr	r0, [pc, #60]	; (8001f64 <HAL_ETH_MspInit+0x184>)
 8001f26:	f001 fae9 	bl	80034fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f3c:	230b      	movs	r3, #11
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f44:	4619      	mov	r1, r3
 8001f46:	4808      	ldr	r0, [pc, #32]	; (8001f68 <HAL_ETH_MspInit+0x188>)
 8001f48:	f001 fad8 	bl	80034fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	3738      	adds	r7, #56	; 0x38
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40028000 	.word	0x40028000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40021800 	.word	0x40021800

08001f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <HAL_I2C_MspInit+0x84>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d12c      	bne.n	8001fe8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <HAL_I2C_MspInit+0x88>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <HAL_I2C_MspInit+0x88>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <HAL_I2C_MspInit+0x88>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001faa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb0:	2312      	movs	r3, #18
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <HAL_I2C_MspInit+0x8c>)
 8001fc8:	f001 fa98 	bl	80034fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_I2C_MspInit+0x88>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <HAL_I2C_MspInit+0x88>)
 8001fd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fda:	6413      	str	r3, [r2, #64]	; 0x40
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_I2C_MspInit+0x88>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fe8:	bf00      	nop
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40005400 	.word	0x40005400
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020400 	.word	0x40020400

08001ffc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	; 0x38
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002004:	f107 0308 	add.w	r3, r7, #8
 8002008:	2230      	movs	r2, #48	; 0x30
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f006 fb97 	bl	8008740 <memset>
  if(hrtc->Instance==RTC)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_RTC_MspInit+0x4c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d111      	bne.n	8002040 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800201c:	2320      	movs	r3, #32
 800201e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fec0 	bl	8004db0 <HAL_RCCEx_PeriphCLKConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002036:	f7ff fea5 	bl	8001d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_RTC_MspInit+0x50>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002040:	bf00      	nop
 8002042:	3738      	adds	r7, #56	; 0x38
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40002800 	.word	0x40002800
 800204c:	42470e3c 	.word	0x42470e3c

08002050 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002060:	d115      	bne.n	800208e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <HAL_TIM_PWM_MspInit+0x48>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <HAL_TIM_PWM_MspInit+0x48>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_TIM_PWM_MspInit+0x48>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	201c      	movs	r0, #28
 8002084:	f000 fe49 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002088:	201c      	movs	r0, #28
 800208a:	f000 fe62 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800

0800209c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <HAL_TIM_IC_MspInit+0x94>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d133      	bne.n	8002126 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_TIM_IC_MspInit+0x98>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <HAL_TIM_IC_MspInit+0x98>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_TIM_IC_MspInit+0x98>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_TIM_IC_MspInit+0x98>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a14      	ldr	r2, [pc, #80]	; (8002134 <HAL_TIM_IC_MspInit+0x98>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_TIM_IC_MspInit+0x98>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM_CH1_Pin;
 80020f6:	2340      	movs	r3, #64	; 0x40
 80020f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002106:	2302      	movs	r3, #2
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM_CH1_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	4809      	ldr	r0, [pc, #36]	; (8002138 <HAL_TIM_IC_MspInit+0x9c>)
 8002112:	f001 f9f3 	bl	80034fc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	201d      	movs	r0, #29
 800211c:	f000 fdfd 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002120:	201d      	movs	r0, #29
 8002122:	f000 fe16 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40000400 	.word	0x40000400
 8002134:	40023800 	.word	0x40023800
 8002138:	40020000 	.word	0x40020000

0800213c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a38      	ldr	r2, [pc, #224]	; (800222c <HAL_TIM_Base_MspInit+0xf0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d116      	bne.n	800217c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	4b37      	ldr	r3, [pc, #220]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a36      	ldr	r2, [pc, #216]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b34      	ldr	r3, [pc, #208]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	201e      	movs	r0, #30
 8002170:	f000 fdd3 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002174:	201e      	movs	r0, #30
 8002176:	f000 fdec 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800217a:	e052      	b.n	8002222 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2c      	ldr	r2, [pc, #176]	; (8002234 <HAL_TIM_Base_MspInit+0xf8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d116      	bne.n	80021b4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b29      	ldr	r3, [pc, #164]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a28      	ldr	r2, [pc, #160]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	2032      	movs	r0, #50	; 0x32
 80021a8:	f000 fdb7 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80021ac:	2032      	movs	r0, #50	; 0x32
 80021ae:	f000 fdd0 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 80021b2:	e036      	b.n	8002222 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a1f      	ldr	r2, [pc, #124]	; (8002238 <HAL_TIM_Base_MspInit+0xfc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d116      	bne.n	80021ec <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	2019      	movs	r0, #25
 80021e0:	f000 fd9b 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021e4:	2019      	movs	r0, #25
 80021e6:	f000 fdb4 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 80021ea:	e01a      	b.n	8002222 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_TIM_Base_MspInit+0x100>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d115      	bne.n	8002222 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	201a      	movs	r0, #26
 8002218:	f000 fd7f 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800221c:	201a      	movs	r0, #26
 800221e:	f000 fd98 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40000800 	.word	0x40000800
 8002230:	40023800 	.word	0x40023800
 8002234:	40000c00 	.word	0x40000c00
 8002238:	40014400 	.word	0x40014400
 800223c:	40014800 	.word	0x40014800

08002240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002260:	d11e      	bne.n	80022a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	4b34      	ldr	r3, [pc, #208]	; (8002338 <HAL_TIM_MspPostInit+0xf8>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a33      	ldr	r2, [pc, #204]	; (8002338 <HAL_TIM_MspPostInit+0xf8>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_TIM_MspPostInit+0xf8>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 800227e:	2320      	movs	r3, #32
 8002280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800228e:	2301      	movs	r3, #1
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	4828      	ldr	r0, [pc, #160]	; (800233c <HAL_TIM_MspPostInit+0xfc>)
 800229a:	f001 f92f 	bl	80034fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800229e:	e047      	b.n	8002330 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a26      	ldr	r2, [pc, #152]	; (8002340 <HAL_TIM_MspPostInit+0x100>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d11f      	bne.n	80022ea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <HAL_TIM_MspPostInit+0xf8>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a21      	ldr	r2, [pc, #132]	; (8002338 <HAL_TIM_MspPostInit+0xf8>)
 80022b4:	f043 0308 	orr.w	r3, r3, #8
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <HAL_TIM_MspPostInit+0xf8>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022d8:	2302      	movs	r3, #2
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	4818      	ldr	r0, [pc, #96]	; (8002344 <HAL_TIM_MspPostInit+0x104>)
 80022e4:	f001 f90a 	bl	80034fc <HAL_GPIO_Init>
}
 80022e8:	e022      	b.n	8002330 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a16      	ldr	r2, [pc, #88]	; (8002348 <HAL_TIM_MspPostInit+0x108>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d11d      	bne.n	8002330 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <HAL_TIM_MspPostInit+0xf8>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <HAL_TIM_MspPostInit+0xf8>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6313      	str	r3, [r2, #48]	; 0x30
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_TIM_MspPostInit+0xf8>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002310:	2308      	movs	r3, #8
 8002312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002320:	2302      	movs	r3, #2
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	4804      	ldr	r0, [pc, #16]	; (800233c <HAL_TIM_MspPostInit+0xfc>)
 800232c:	f001 f8e6 	bl	80034fc <HAL_GPIO_Init>
}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	; 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	40020000 	.word	0x40020000
 8002340:	40000800 	.word	0x40000800
 8002344:	40020c00 	.word	0x40020c00
 8002348:	40000c00 	.word	0x40000c00

0800234c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_UART_MspInit+0x94>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d134      	bne.n	80023d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <HAL_UART_MspInit+0x98>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_UART_MspInit+0x98>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_UART_MspInit+0x98>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_UART_MspInit+0x98>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <HAL_UART_MspInit+0x98>)
 8002394:	f043 0308 	orr.w	r3, r3, #8
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_UART_MspInit+0x98>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023b8:	2307      	movs	r3, #7
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	4809      	ldr	r0, [pc, #36]	; (80023e8 <HAL_UART_MspInit+0x9c>)
 80023c4:	f001 f89a 	bl	80034fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023c8:	2200      	movs	r2, #0
 80023ca:	2100      	movs	r1, #0
 80023cc:	2027      	movs	r0, #39	; 0x27
 80023ce:	f000 fca4 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023d2:	2027      	movs	r0, #39	; 0x27
 80023d4:	f000 fcbd 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023d8:	bf00      	nop
 80023da:	3728      	adds	r7, #40	; 0x28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40004800 	.word	0x40004800
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020c00 	.word	0x40020c00

080023ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800240c:	d13f      	bne.n	800248e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	4b21      	ldr	r3, [pc, #132]	; (8002498 <HAL_PCD_MspInit+0xac>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a20      	ldr	r2, [pc, #128]	; (8002498 <HAL_PCD_MspInit+0xac>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_PCD_MspInit+0xac>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800242a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800242e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800243c:	230a      	movs	r3, #10
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	4815      	ldr	r0, [pc, #84]	; (800249c <HAL_PCD_MspInit+0xb0>)
 8002448:	f001 f858 	bl	80034fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800244c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	480e      	ldr	r0, [pc, #56]	; (800249c <HAL_PCD_MspInit+0xb0>)
 8002462:	f001 f84b 	bl	80034fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_PCD_MspInit+0xac>)
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_PCD_MspInit+0xac>)
 800246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002470:	6353      	str	r3, [r2, #52]	; 0x34
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_PCD_MspInit+0xac>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_PCD_MspInit+0xac>)
 800247c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002480:	6453      	str	r3, [r2, #68]	; 0x44
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_PCD_MspInit+0xac>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800248e:	bf00      	nop
 8002490:	3728      	adds	r7, #40	; 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	40020000 	.word	0x40020000

080024a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <NMI_Handler+0x4>

080024a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <HardFault_Handler+0x4>

080024ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <MemManage_Handler+0x4>

080024b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b6:	e7fe      	b.n	80024b6 <BusFault_Handler+0x4>

080024b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <UsageFault_Handler+0x4>

080024be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ec:	f000 faf6 	bl	8002adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();	// ADD_JIMIN_231006
 80024f0:	f7fe fece 	bl	8001290 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024fe:	f003 fd21 	bl	8005f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200004ac 	.word	0x200004ac

0800250c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002512:	f003 fd17 	bl	8005f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200004f4 	.word	0x200004f4

08002520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <TIM2_IRQHandler+0x10>)
 8002526:	f003 fd0d 	bl	8005f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000038c 	.word	0x2000038c

08002534 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <TIM3_IRQHandler+0x10>)
 800253a:	f003 fd03 	bl	8005f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200003d4 	.word	0x200003d4

08002548 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <TIM4_IRQHandler+0x10>)
 800254e:	f003 fcf9 	bl	8005f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000041c 	.word	0x2000041c

0800255c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <USART3_IRQHandler+0x10>)
 8002562:	f004 fe59 	bl	8007218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	2000053c 	.word	0x2000053c

08002570 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <TIM5_IRQHandler+0x10>)
 8002576:	f003 fce5 	bl	8005f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000464 	.word	0x20000464

08002584 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	e00a      	b.n	80025ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002596:	f3af 8000 	nop.w
 800259a:	4601      	mov	r1, r0
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	60ba      	str	r2, [r7, #8]
 80025a2:	b2ca      	uxtb	r2, r1
 80025a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	3301      	adds	r3, #1
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	dbf0      	blt.n	8002596 <_read+0x12>
  }

  return len;
 80025b4:	687b      	ldr	r3, [r7, #4]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	e009      	b.n	80025e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	60ba      	str	r2, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fe75 	bl	80012c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3301      	adds	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	dbf1      	blt.n	80025d0 <_write+0x12>
  }
  return len;
 80025ec:	687b      	ldr	r3, [r7, #4]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <_close>:

int _close(int file)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800261e:	605a      	str	r2, [r3, #4]
  return 0;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <_isatty>:

int _isatty(int file)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002636:	2301      	movs	r3, #1
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <_sbrk+0x5c>)
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <_sbrk+0x60>)
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <_sbrk+0x64>)
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <_sbrk+0x68>)
 8002680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <_sbrk+0x64>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d207      	bcs.n	80026a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002690:	f006 f82c 	bl	80086ec <__errno>
 8002694:	4603      	mov	r3, r0
 8002696:	220c      	movs	r2, #12
 8002698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
 800269e:	e009      	b.n	80026b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <_sbrk+0x64>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <_sbrk+0x64>)
 80026b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026b2:	68fb      	ldr	r3, [r7, #12]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20030000 	.word	0x20030000
 80026c0:	00000400 	.word	0x00000400
 80026c4:	20000af0 	.word	0x20000af0
 80026c8:	20000b48 	.word	0x20000b48

080026cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <SystemInit+0x20>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	4a05      	ldr	r2, [pc, #20]	; (80026ec <SystemInit+0x20>)
 80026d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH]; //UART6 으로부터 수신된 char를 저장하는 공간. (\n을 만날 때까지)
volatile int bt_rx_index = 0; // bt_rx_buff의 save 위치
volatile int bt_newline_detect_flag = 0; // new line을 만났을 때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)	// comport master와 연결된 uart
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <HAL_UART_RxCpltCallback+0x74>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d12c      	bne.n	800275a <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH)	// 현재까지 들어온 바이트가 40바이트를 넘지 않으면
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_UART_RxCpltCallback+0x78>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b27      	cmp	r3, #39	; 0x27
 8002706:	dc1d      	bgt.n	8002744 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_UART_RxCpltCallback+0x7c>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b0a      	cmp	r3, #10
 800270e:	d003      	beq.n	8002718 <HAL_UART_RxCpltCallback+0x28>
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_UART_RxCpltCallback+0x7c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b0d      	cmp	r3, #13
 8002716:	d10b      	bne.n	8002730 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0;	// '\0'
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_UART_RxCpltCallback+0x78>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_UART_RxCpltCallback+0x80>)
 800271e:	2100      	movs	r1, #0
 8002720:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag = 1;	// new line을 만났다는 flag를 set한다
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_UART_RxCpltCallback+0x84>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]
				rx_index = 0;	// 다음 message 저장을 위해서 rx_index 값을 0으로 한다
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <HAL_UART_RxCpltCallback+0x78>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	e00f      	b.n	8002750 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++] = rx_data;
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_UART_RxCpltCallback+0x78>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	490c      	ldr	r1, [pc, #48]	; (8002768 <HAL_UART_RxCpltCallback+0x78>)
 8002738:	600a      	str	r2, [r1, #0]
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <HAL_UART_RxCpltCallback+0x7c>)
 800273c:	7811      	ldrb	r1, [r2, #0]
 800273e:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <HAL_UART_RxCpltCallback+0x80>)
 8002740:	54d1      	strb	r1, [r2, r3]
 8002742:	e005      	b.n	8002750 <HAL_UART_RxCpltCallback+0x60>
			}
		}
		else
		{
			rx_index = 0;
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_UART_RxCpltCallback+0x78>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
			printf("Message Overflow!!!\n");
 800274a:	480b      	ldr	r0, [pc, #44]	; (8002778 <HAL_UART_RxCpltCallback+0x88>)
 800274c:	f006 f886 	bl	800885c <puts>
		}
		// 주의: 반드시 HAL_UART_Recieve_IT를 call 해줘야 다음 INT가 발생된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002750:	2201      	movs	r2, #1
 8002752:	4906      	ldr	r1, [pc, #24]	; (800276c <HAL_UART_RxCpltCallback+0x7c>)
 8002754:	4803      	ldr	r0, [pc, #12]	; (8002764 <HAL_UART_RxCpltCallback+0x74>)
 8002756:	f004 fd2e 	bl	80071b6 <HAL_UART_Receive_IT>
	}
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	2000053c 	.word	0x2000053c
 8002768:	20000b1c 	.word	0x20000b1c
 800276c:	20000ad0 	.word	0x20000ad0
 8002770:	20000af4 	.word	0x20000af4
 8002774:	20000b20 	.word	0x20000b20
 8002778:	08009bbc 	.word	0x08009bbc

0800277c <HAL_TIM_IC_CaptureCallback>:
volatile int ic_cpt_finish_flag = 0;	// 초음파 거리 측정 완료 indicator 변수
// 1. Drivers > STM32F4xx_HAL_Driver > Src > stm32f4xx_hal_tim.c 에서 HAL_TIM_IC_CaptureCallback을 잘라내기 한 후 가져 온다
// 2. 초음파 센서의 Echo핀의 상승 에지와 하강 에지 발생 시 이 곳으로 들어 온다
volatile uint8_t is_first_capture = 0;	// 0 : 상승 에지, 1 : 하강 에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM3)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d11f      	bne.n	80027ce <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)	// 상승 에지
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <HAL_TIM_IC_CaptureCallback+0x60>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);		// clear H/W counter
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2200      	movs	r2, #0
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture = 1;		// 상승 에지를 만났다는 flag
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_TIM_IC_CaptureCallback+0x60>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
			is_first_capture = 0;		// 다음 echo 펄스를 count 하기 위해 변수 초기화
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);	// 현재까지 count한 펄스 수를 읽어 온다
			ic_cpt_finish_flag = 1;		// 초음파 측정 완료
		}
	}
}
 80027a6:	e012      	b.n	80027ce <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)	// 하강 에지를 만나면
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <HAL_TIM_IC_CaptureCallback+0x60>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d10d      	bne.n	80027ce <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture = 0;		// 다음 echo 펄스를 count 하기 위해 변수 초기화
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_TIM_IC_CaptureCallback+0x60>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);	// 현재까지 count한 펄스 수를 읽어 온다
 80027b8:	2100      	movs	r1, #0
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f003 fef0 	bl	80065a0 <HAL_TIM_ReadCapturedValue>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_TIM_IC_CaptureCallback+0x64>)
 80027c6:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag = 1;		// 초음파 측정 완료
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_TIM_IC_CaptureCallback+0x68>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40000400 	.word	0x40000400
 80027dc:	20000b2c 	.word	0x20000b2c
 80027e0:	20000b24 	.word	0x20000b24
 80027e4:	20000b28 	.word	0x20000b28

080027e8 <ultrasonic_processing>:

void ultrasonic_processing(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
	int dis;	// 거리를 측정 펄스 개수를 저장하는 변수
	char lcd_buff[20];

	TIM10_10ms_ultrasonic = 0;
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <ultrasonic_processing+0xb0>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
	make_trigger();
 80027f4:	f000 f85e 	bl	80028b4 <make_trigger>
	if (ic_cpt_finish_flag == 1)	// 초음파 측정이 완료되었으면
 80027f8:	4b28      	ldr	r3, [pc, #160]	; (800289c <ultrasonic_processing+0xb4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d141      	bne.n	8002884 <ultrasonic_processing+0x9c>
	{
		ic_cpt_finish_flag = 0;
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <ultrasonic_processing+0xb4>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
		dis = distance;
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <ultrasonic_processing+0xb8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	617b      	str	r3, [r7, #20]
		dis *= 0.034 / 2;	// 1us가 0.034cm를 이동. 왕복 거리를 리턴하기 때문에 /2를 해주는 것.
 800280c:	6978      	ldr	r0, [r7, #20]
 800280e:	f7fd ffbb 	bl	8000788 <__aeabi_i2d>
 8002812:	a31f      	add	r3, pc, #124	; (adr r3, 8002890 <ultrasonic_processing+0xa8>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f7fd fd3a 	bl	8000290 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	f7fe f81a 	bl	800085c <__aeabi_d2iz>
 8002828:	4603      	mov	r3, r0
 800282a:	617b      	str	r3, [r7, #20]

		if (dis < 50)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b31      	cmp	r3, #49	; 0x31
 8002830:	dc14      	bgt.n	800285c <ultrasonic_processing+0x74>
		{
			printf("%dcm Too much Detergent\n", dis);
 8002832:	6979      	ldr	r1, [r7, #20]
 8002834:	481b      	ldr	r0, [pc, #108]	; (80028a4 <ultrasonic_processing+0xbc>)
 8002836:	f005 ff8b 	bl	8008750 <iprintf>
			i2c_lcd_init();
 800283a:	f7fe fc91 	bl	8001160 <i2c_lcd_init>
			move_cursor(0,0);
 800283e:	2100      	movs	r1, #0
 8002840:	2000      	movs	r0, #0
 8002842:	f7fe fcbb 	bl	80011bc <move_cursor>
			sprintf(lcd_buff, "Too much Detergent", dis);
 8002846:	463b      	mov	r3, r7
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4917      	ldr	r1, [pc, #92]	; (80028a8 <ultrasonic_processing+0xc0>)
 800284c:	4618      	mov	r0, r3
 800284e:	f006 f80d 	bl	800886c <siprintf>
			lcd_string(lcd_buff);
 8002852:	463b      	mov	r3, r7
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe fc9c 	bl	8001192 <lcd_string>
			if (ultrasonic_flag)
			{
				printf("dis: %dcm\n", dis);
			}
#endif
}
 800285a:	e013      	b.n	8002884 <ultrasonic_processing+0x9c>
			printf("%dcm Enough Detergent\n", dis);
 800285c:	6979      	ldr	r1, [r7, #20]
 800285e:	4813      	ldr	r0, [pc, #76]	; (80028ac <ultrasonic_processing+0xc4>)
 8002860:	f005 ff76 	bl	8008750 <iprintf>
			i2c_lcd_init();
 8002864:	f7fe fc7c 	bl	8001160 <i2c_lcd_init>
			move_cursor(0,0);
 8002868:	2100      	movs	r1, #0
 800286a:	2000      	movs	r0, #0
 800286c:	f7fe fca6 	bl	80011bc <move_cursor>
			sprintf(lcd_buff, "Enough Detergent", dis);
 8002870:	463b      	mov	r3, r7
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	490e      	ldr	r1, [pc, #56]	; (80028b0 <ultrasonic_processing+0xc8>)
 8002876:	4618      	mov	r0, r3
 8002878:	f005 fff8 	bl	800886c <siprintf>
			lcd_string(lcd_buff);
 800287c:	463b      	mov	r3, r7
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fc87 	bl	8001192 <lcd_string>
}
 8002884:	bf00      	nop
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	f3af 8000 	nop.w
 8002890:	b020c49c 	.word	0xb020c49c
 8002894:	3f916872 	.word	0x3f916872
 8002898:	20000ad8 	.word	0x20000ad8
 800289c:	20000b28 	.word	0x20000b28
 80028a0:	20000b24 	.word	0x20000b24
 80028a4:	08009c90 	.word	0x08009c90
 80028a8:	08009cac 	.word	0x08009cac
 80028ac:	08009cc0 	.word	0x08009cc0
 80028b0:	08009cd8 	.word	0x08009cd8

080028b4 <make_trigger>:

void make_trigger()
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 80028b8:	2200      	movs	r2, #0
 80028ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028be:	480b      	ldr	r0, [pc, #44]	; (80028ec <make_trigger+0x38>)
 80028c0:	f000 ffe0 	bl	8003884 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80028c4:	2002      	movs	r0, #2
 80028c6:	f000 f929 	bl	8002b1c <HAL_Delay>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);
 80028ca:	2201      	movs	r2, #1
 80028cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028d0:	4806      	ldr	r0, [pc, #24]	; (80028ec <make_trigger+0x38>)
 80028d2:	f000 ffd7 	bl	8003884 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80028d6:	200a      	movs	r0, #10
 80028d8:	f000 f920 	bl	8002b1c <HAL_Delay>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e2:	4802      	ldr	r0, [pc, #8]	; (80028ec <make_trigger+0x38>)
 80028e4:	f000 ffce 	bl	8003884 <HAL_GPIO_WritePin>
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021400 	.word	0x40021400

080028f0 <washing_select>:
extern void washing_option(void);
extern void dcmotor_normal(void);
extern void dcmotor_speedy(void);

void washing_select(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
	// Button1을 누르고 Washing에 진입하면 Normal, Speedy 옵션을 보여준다
	if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80028f4:	2200      	movs	r2, #0
 80028f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028fa:	4835      	ldr	r0, [pc, #212]	; (80029d0 <washing_select+0xe0>)
 80028fc:	f7fe f958 	bl	8000bb0 <get_button>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d103      	bne.n	800290e <washing_select+0x1e>
	{
		i2c_lcd_init();
 8002906:	f7fe fc2b 	bl	8001160 <i2c_lcd_init>
		washing_option();
 800290a:	f7fe fc8f 	bl	800122c <washing_option>
	}

	// Button2를 눌러 Normal / Speedy를 움직일 수 있다
	if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 800290e:	2201      	movs	r2, #1
 8002910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002914:	482e      	ldr	r0, [pc, #184]	; (80029d0 <washing_select+0xe0>)
 8002916:	f7fe f94b 	bl	8000bb0 <get_button>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d130      	bne.n	8002982 <washing_select+0x92>
	{
		if (washing_mode_flag == 0)
 8002920:	4b2c      	ldr	r3, [pc, #176]	; (80029d4 <washing_select+0xe4>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10d      	bne.n	8002944 <washing_select+0x54>
		{
			move_cursor(0,0);
 8002928:	2100      	movs	r1, #0
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe fc46 	bl	80011bc <move_cursor>
			lcd_string("*");
 8002930:	4829      	ldr	r0, [pc, #164]	; (80029d8 <washing_select+0xe8>)
 8002932:	f7fe fc2e 	bl	8001192 <lcd_string>
			move_cursor(1,0);
 8002936:	2100      	movs	r1, #0
 8002938:	2001      	movs	r0, #1
 800293a:	f7fe fc3f 	bl	80011bc <move_cursor>
			lcd_string(" ");
 800293e:	4827      	ldr	r0, [pc, #156]	; (80029dc <washing_select+0xec>)
 8002940:	f7fe fc27 	bl	8001192 <lcd_string>
		}
		if (washing_mode_flag == 1)
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <washing_select+0xe4>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10d      	bne.n	8002968 <washing_select+0x78>
		{
			move_cursor(0,0);
 800294c:	2100      	movs	r1, #0
 800294e:	2000      	movs	r0, #0
 8002950:	f7fe fc34 	bl	80011bc <move_cursor>
			lcd_string(" ");
 8002954:	4821      	ldr	r0, [pc, #132]	; (80029dc <washing_select+0xec>)
 8002956:	f7fe fc1c 	bl	8001192 <lcd_string>
			move_cursor(1,0);
 800295a:	2100      	movs	r1, #0
 800295c:	2001      	movs	r0, #1
 800295e:	f7fe fc2d 	bl	80011bc <move_cursor>
			lcd_string("*");
 8002962:	481d      	ldr	r0, [pc, #116]	; (80029d8 <washing_select+0xe8>)
 8002964:	f7fe fc15 	bl	8001192 <lcd_string>
		}
		washing_mode_flag++;
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <washing_select+0xe4>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	b2da      	uxtb	r2, r3
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <washing_select+0xe4>)
 8002972:	701a      	strb	r2, [r3, #0]
		washing_mode_flag %= 2;
 8002974:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <washing_select+0xe4>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <washing_select+0xe4>)
 8002980:	701a      	strb	r2, [r3, #0]
	}

	// Button3을 누르면 해당 옵션을 선택한 것으로 간주하고 모터를 돌린다
	if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8002982:	2202      	movs	r2, #2
 8002984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002988:	4811      	ldr	r0, [pc, #68]	; (80029d0 <washing_select+0xe0>)
 800298a:	f7fe f911 	bl	8000bb0 <get_button>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d105      	bne.n	80029a0 <washing_select+0xb0>
	{
		us_flag = ~us_flag;
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <washing_select+0xf0>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	43db      	mvns	r3, r3
 800299a:	b2da      	uxtb	r2, r3
 800299c:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <washing_select+0xf0>)
 800299e:	701a      	strb	r2, [r3, #0]
	}

	if (us_flag)
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <washing_select+0xf0>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d011      	beq.n	80029cc <washing_select+0xdc>
	{
		// Normal Mode 선택 시
		if (washing_mode_flag % 2 == 1)
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <washing_select+0xe4>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <washing_select+0xca>
		{
			dcmotor_normal();
 80029b6:	f7fe f983 	bl	8000cc0 <dcmotor_normal>
		}
		if (washing_mode_flag % 2 == 0)
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <washing_select+0xe4>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <washing_select+0xdc>
		{
			dcmotor_speedy();
 80029c8:	f7fe f9e8 	bl	8000d9c <dcmotor_speedy>
		}
	}

}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	20000b2d 	.word	0x20000b2d
 80029d8:	08009cec 	.word	0x08009cec
 80029dc:	08009cf0 	.word	0x08009cf0
 80029e0:	20000b2e 	.word	0x20000b2e

080029e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80029e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a1c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029e8:	480d      	ldr	r0, [pc, #52]	; (8002a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029ea:	490e      	ldr	r1, [pc, #56]	; (8002a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029ec:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f0:	e002      	b.n	80029f8 <LoopCopyDataInit>

080029f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f6:	3304      	adds	r3, #4

080029f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029fc:	d3f9      	bcc.n	80029f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a00:	4c0b      	ldr	r4, [pc, #44]	; (8002a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a04:	e001      	b.n	8002a0a <LoopFillZerobss>

08002a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a08:	3204      	adds	r2, #4

08002a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a0c:	d3fb      	bcc.n	8002a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a0e:	f7ff fe5d 	bl	80026cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a12:	f005 fe71 	bl	80086f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a16:	f7fe fc89 	bl	800132c <main>
  bx  lr    
 8002a1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002a1c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a24:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002a28:	08009db4 	.word	0x08009db4
  ldr r2, =_sbss
 8002a2c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002a30:	20000b44 	.word	0x20000b44

08002a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC_IRQHandler>
	...

08002a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_Init+0x40>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <HAL_Init+0x40>)
 8002a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <HAL_Init+0x40>)
 8002a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <HAL_Init+0x40>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a60:	2003      	movs	r0, #3
 8002a62:	f000 f94f 	bl	8002d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f000 f808 	bl	8002a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a6c:	f7ff f990 	bl	8001d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00

08002a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_InitTick+0x54>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_InitTick+0x58>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f967 	bl	8002d6e <HAL_SYSTICK_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00e      	b.n	8002ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b0f      	cmp	r3, #15
 8002aae:	d80a      	bhi.n	8002ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	f000 f92f 	bl	8002d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002abc:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <HAL_InitTick+0x5c>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000040 	.word	0x20000040
 8002ad4:	20000048 	.word	0x20000048
 8002ad8:	20000044 	.word	0x20000044

08002adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_IncTick+0x20>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x24>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_IncTick+0x24>)
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000048 	.word	0x20000048
 8002b00:	20000b30 	.word	0x20000b30

08002b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return uwTick;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_GetTick+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000b30 	.word	0x20000b30

08002b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff ffee 	bl	8002b04 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d005      	beq.n	8002b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_Delay+0x44>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b42:	bf00      	nop
 8002b44:	f7ff ffde 	bl	8002b04 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8f7      	bhi.n	8002b44 <HAL_Delay+0x28>
  {
  }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000048 	.word	0x20000048

08002b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	60d3      	str	r3, [r2, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	db0b      	blt.n	8002bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4907      	ldr	r1, [pc, #28]	; (8002c00 <__NVIC_EnableIRQ+0x38>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2001      	movs	r0, #1
 8002bea:	fa00 f202 	lsl.w	r2, r0, r2
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db0a      	blt.n	8002c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	490c      	ldr	r1, [pc, #48]	; (8002c50 <__NVIC_SetPriority+0x4c>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	440b      	add	r3, r1
 8002c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c2c:	e00a      	b.n	8002c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4908      	ldr	r1, [pc, #32]	; (8002c54 <__NVIC_SetPriority+0x50>)
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	3b04      	subs	r3, #4
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	440b      	add	r3, r1
 8002c42:	761a      	strb	r2, [r3, #24]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000e100 	.word	0xe000e100
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f1c3 0307 	rsb	r3, r3, #7
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	bf28      	it	cs
 8002c76:	2304      	movcs	r3, #4
 8002c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d902      	bls.n	8002c88 <NVIC_EncodePriority+0x30>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b03      	subs	r3, #3
 8002c86:	e000      	b.n	8002c8a <NVIC_EncodePriority+0x32>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	4313      	orrs	r3, r2
         );
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3724      	adds	r7, #36	; 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd0:	d301      	bcc.n	8002cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00f      	b.n	8002cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <SysTick_Config+0x40>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cde:	210f      	movs	r1, #15
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	f7ff ff8e 	bl	8002c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <SysTick_Config+0x40>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <SysTick_Config+0x40>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010

08002d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff29 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d2c:	f7ff ff3e 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	6978      	ldr	r0, [r7, #20]
 8002d38:	f7ff ff8e 	bl	8002c58 <NVIC_EncodePriority>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff5d 	bl	8002c04 <__NVIC_SetPriority>
}
 8002d4a:	bf00      	nop
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff31 	bl	8002bc8 <__NVIC_EnableIRQ>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ffa2 	bl	8002cc0 <SysTick_Config>
 8002d7c:	4603      	mov	r3, r0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff feb6 	bl	8002b04 <HAL_GetTick>
 8002d98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d008      	beq.n	8002db8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e052      	b.n	8002e5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0216 	bic.w	r2, r2, #22
 8002dc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <HAL_DMA_Abort+0x62>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0208 	bic.w	r2, r2, #8
 8002df6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e08:	e013      	b.n	8002e32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e0a:	f7ff fe7b 	bl	8002b04 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	d90c      	bls.n	8002e32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2203      	movs	r2, #3
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e015      	b.n	8002e5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e4      	bne.n	8002e0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	223f      	movs	r2, #63	; 0x3f
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d004      	beq.n	8002e84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e00c      	b.n	8002e9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2205      	movs	r2, #5
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e06c      	b.n	8002f98 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2223      	movs	r2, #35	; 0x23
 8002ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fe ff85 	bl	8001de0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <HAL_ETH_Init+0xf4>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	4a30      	ldr	r2, [pc, #192]	; (8002fa0 <HAL_ETH_Init+0xf4>)
 8002ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_ETH_Init+0xf4>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ef2:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <HAL_ETH_Init+0xf8>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a2b      	ldr	r2, [pc, #172]	; (8002fa4 <HAL_ETH_Init+0xf8>)
 8002ef8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002efc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002efe:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <HAL_ETH_Init+0xf8>)
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4927      	ldr	r1, [pc, #156]	; (8002fa4 <HAL_ETH_Init+0xf8>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <HAL_ETH_Init+0xf8>)
 8002f0e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f28:	f7ff fdec 	bl	8002b04 <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002f2e:	e011      	b.n	8002f54 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002f30:	f7ff fde8 	bl	8002b04 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f3e:	d909      	bls.n	8002f54 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2204      	movs	r2, #4
 8002f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	22e0      	movs	r2, #224	; 0xe0
 8002f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e021      	b.n	8002f98 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e4      	bne.n	8002f30 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f958 	bl	800321c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f9ff 	bl	8003370 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa55 	bl	8003422 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2100      	movs	r1, #0
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f9bd 	bl	8003300 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2210      	movs	r2, #16
 8002f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40013800 	.word	0x40013800

08002fa8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4b51      	ldr	r3, [pc, #324]	; (8003104 <ETH_SetMACConfig+0x15c>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	7c1b      	ldrb	r3, [r3, #16]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <ETH_SetMACConfig+0x28>
 8002fca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002fce:	e000      	b.n	8002fd2 <ETH_SetMACConfig+0x2a>
 8002fd0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	7c5b      	ldrb	r3, [r3, #17]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <ETH_SetMACConfig+0x38>
 8002fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fde:	e000      	b.n	8002fe2 <ETH_SetMACConfig+0x3a>
 8002fe0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fe2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002fe8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	7fdb      	ldrb	r3, [r3, #31]
 8002fee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ff0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ff6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	7f92      	ldrb	r2, [r2, #30]
 8002ffc:	2a00      	cmp	r2, #0
 8002ffe:	d102      	bne.n	8003006 <ETH_SetMACConfig+0x5e>
 8003000:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003004:	e000      	b.n	8003008 <ETH_SetMACConfig+0x60>
 8003006:	2200      	movs	r2, #0
                        macconf->Speed |
 8003008:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7f1b      	ldrb	r3, [r3, #28]
 800300e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003010:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003016:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	791b      	ldrb	r3, [r3, #4]
 800301c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800301e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003026:	2a00      	cmp	r2, #0
 8003028:	d102      	bne.n	8003030 <ETH_SetMACConfig+0x88>
 800302a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302e:	e000      	b.n	8003032 <ETH_SetMACConfig+0x8a>
 8003030:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003032:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	7bdb      	ldrb	r3, [r3, #15]
 8003038:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800303a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003040:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003048:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800304a:	4313      	orrs	r3, r2
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003062:	2001      	movs	r0, #1
 8003064:	f7ff fd5a 	bl	8002b1c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800307e:	4013      	ands	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800308e:	2a00      	cmp	r2, #0
 8003090:	d101      	bne.n	8003096 <ETH_SetMACConfig+0xee>
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	e000      	b.n	8003098 <ETH_SetMACConfig+0xf0>
 8003096:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003098:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800309e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80030a6:	2a01      	cmp	r2, #1
 80030a8:	d101      	bne.n	80030ae <ETH_SetMACConfig+0x106>
 80030aa:	2208      	movs	r2, #8
 80030ac:	e000      	b.n	80030b0 <ETH_SetMACConfig+0x108>
 80030ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80030b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80030b8:	2a01      	cmp	r2, #1
 80030ba:	d101      	bne.n	80030c0 <ETH_SetMACConfig+0x118>
 80030bc:	2204      	movs	r2, #4
 80030be:	e000      	b.n	80030c2 <ETH_SetMACConfig+0x11a>
 80030c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80030ca:	2a01      	cmp	r2, #1
 80030cc:	d101      	bne.n	80030d2 <ETH_SetMACConfig+0x12a>
 80030ce:	2202      	movs	r2, #2
 80030d0:	e000      	b.n	80030d4 <ETH_SetMACConfig+0x12c>
 80030d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030d4:	4313      	orrs	r3, r2
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030ec:	2001      	movs	r0, #1
 80030ee:	f7ff fd15 	bl	8002b1c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	619a      	str	r2, [r3, #24]
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	ff20810f 	.word	0xff20810f

08003108 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <ETH_SetDMAConfig+0x110>)
 8003122:	4013      	ands	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	7b1b      	ldrb	r3, [r3, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <ETH_SetDMAConfig+0x2c>
 800312e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003132:	e000      	b.n	8003136 <ETH_SetDMAConfig+0x2e>
 8003134:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	7b5b      	ldrb	r3, [r3, #13]
 800313a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800313c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	7f52      	ldrb	r2, [r2, #29]
 8003142:	2a00      	cmp	r2, #0
 8003144:	d102      	bne.n	800314c <ETH_SetDMAConfig+0x44>
 8003146:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800314a:	e000      	b.n	800314e <ETH_SetDMAConfig+0x46>
 800314c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800314e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	7b9b      	ldrb	r3, [r3, #14]
 8003154:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003156:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800315c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	7f1b      	ldrb	r3, [r3, #28]
 8003162:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003164:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	7f9b      	ldrb	r3, [r3, #30]
 800316a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800316c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003172:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800317a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800317c:	4313      	orrs	r3, r2
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800318c:	461a      	mov	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800319e:	2001      	movs	r0, #1
 80031a0:	f7ff fcbc 	bl	8002b1c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ac:	461a      	mov	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	791b      	ldrb	r3, [r3, #4]
 80031b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80031c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80031d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031fc:	2001      	movs	r0, #1
 80031fe:	f7ff fc8d 	bl	8002b1c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800320a:	461a      	mov	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	f8de3f23 	.word	0xf8de3f23

0800321c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b0a6      	sub	sp, #152	; 0x98
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003224:	2301      	movs	r3, #1
 8003226:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800322a:	2301      	movs	r3, #1
 800322c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003230:	2300      	movs	r3, #0
 8003232:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003240:	2300      	movs	r3, #0
 8003242:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003246:	2301      	movs	r3, #1
 8003248:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003258:	2300      	movs	r3, #0
 800325a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800325c:	2300      	movs	r3, #0
 800325e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003262:	2300      	movs	r3, #0
 8003264:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003266:	2300      	movs	r3, #0
 8003268:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800326c:	2300      	movs	r3, #0
 800326e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003272:	2300      	movs	r3, #0
 8003274:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003278:	2300      	movs	r3, #0
 800327a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800327e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003288:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800328a:	2300      	movs	r3, #0
 800328c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003290:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fe86 	bl	8002fa8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800329c:	2301      	movs	r3, #1
 800329e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80032a0:	2301      	movs	r3, #1
 80032a2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80032be:	2300      	movs	r3, #0
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80032c8:	2301      	movs	r3, #1
 80032ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80032cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032d0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80032ec:	f107 0308 	add.w	r3, r7, #8
 80032f0:	4619      	mov	r1, r3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ff08 	bl	8003108 <ETH_SetDMAConfig>
}
 80032f8:	bf00      	nop
 80032fa:	3798      	adds	r7, #152	; 0x98
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3305      	adds	r3, #5
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	3204      	adds	r2, #4
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <ETH_MACAddressConfig+0x68>)
 8003322:	4413      	add	r3, r2
 8003324:	461a      	mov	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3303      	adds	r3, #3
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	061a      	lsls	r2, r3, #24
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3302      	adds	r3, #2
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	041b      	lsls	r3, r3, #16
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	4313      	orrs	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	7812      	ldrb	r2, [r2, #0]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <ETH_MACAddressConfig+0x6c>)
 8003352:	4413      	add	r3, r2
 8003354:	461a      	mov	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	6013      	str	r3, [r2, #0]
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40028040 	.word	0x40028040
 800336c:	40028044 	.word	0x40028044

08003370 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	e03e      	b.n	80033fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	440b      	add	r3, r1
 800338e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2200      	movs	r2, #0
 800339a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2200      	movs	r2, #0
 80033a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	3206      	adds	r2, #6
 80033b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d80c      	bhi.n	80033e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68d9      	ldr	r1, [r3, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	461a      	mov	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	e004      	b.n	80033ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	461a      	mov	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3301      	adds	r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d9bd      	bls.n	800337e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003414:	611a      	str	r2, [r3, #16]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003422:	b480      	push	{r7}
 8003424:	b085      	sub	sp, #20
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	e046      	b.n	80034be <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6919      	ldr	r1, [r3, #16]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	440b      	add	r3, r1
 8003440:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2200      	movs	r2, #0
 800344c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2200      	movs	r2, #0
 800345e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800346c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003474:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	3212      	adds	r2, #18
 800348a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d80c      	bhi.n	80034ae <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6919      	ldr	r1, [r3, #16]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	440b      	add	r3, r1
 80034a6:	461a      	mov	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	e004      	b.n	80034b8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3301      	adds	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d9b5      	bls.n	8003430 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ee:	60da      	str	r2, [r3, #12]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b089      	sub	sp, #36	; 0x24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	e177      	b.n	8003808 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003518:	2201      	movs	r2, #1
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	429a      	cmp	r2, r3
 8003532:	f040 8166 	bne.w	8003802 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d005      	beq.n	800354e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800354a:	2b02      	cmp	r3, #2
 800354c:	d130      	bne.n	80035b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	2203      	movs	r2, #3
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003584:	2201      	movs	r2, #1
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 0201 	and.w	r2, r3, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d017      	beq.n	80035ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	2203      	movs	r2, #3
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d123      	bne.n	8003640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	08da      	lsrs	r2, r3, #3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3208      	adds	r2, #8
 8003600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	220f      	movs	r2, #15
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	08da      	lsrs	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3208      	adds	r2, #8
 800363a:	69b9      	ldr	r1, [r7, #24]
 800363c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 0203 	and.w	r2, r3, #3
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80c0 	beq.w	8003802 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	4b66      	ldr	r3, [pc, #408]	; (8003820 <HAL_GPIO_Init+0x324>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	4a65      	ldr	r2, [pc, #404]	; (8003820 <HAL_GPIO_Init+0x324>)
 800368c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003690:	6453      	str	r3, [r2, #68]	; 0x44
 8003692:	4b63      	ldr	r3, [pc, #396]	; (8003820 <HAL_GPIO_Init+0x324>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800369e:	4a61      	ldr	r2, [pc, #388]	; (8003824 <HAL_GPIO_Init+0x328>)
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	3302      	adds	r3, #2
 80036a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	220f      	movs	r2, #15
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a58      	ldr	r2, [pc, #352]	; (8003828 <HAL_GPIO_Init+0x32c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d037      	beq.n	800373a <HAL_GPIO_Init+0x23e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a57      	ldr	r2, [pc, #348]	; (800382c <HAL_GPIO_Init+0x330>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d031      	beq.n	8003736 <HAL_GPIO_Init+0x23a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a56      	ldr	r2, [pc, #344]	; (8003830 <HAL_GPIO_Init+0x334>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d02b      	beq.n	8003732 <HAL_GPIO_Init+0x236>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a55      	ldr	r2, [pc, #340]	; (8003834 <HAL_GPIO_Init+0x338>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d025      	beq.n	800372e <HAL_GPIO_Init+0x232>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a54      	ldr	r2, [pc, #336]	; (8003838 <HAL_GPIO_Init+0x33c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01f      	beq.n	800372a <HAL_GPIO_Init+0x22e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a53      	ldr	r2, [pc, #332]	; (800383c <HAL_GPIO_Init+0x340>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d019      	beq.n	8003726 <HAL_GPIO_Init+0x22a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_GPIO_Init+0x344>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_GPIO_Init+0x226>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a51      	ldr	r2, [pc, #324]	; (8003844 <HAL_GPIO_Init+0x348>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00d      	beq.n	800371e <HAL_GPIO_Init+0x222>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a50      	ldr	r2, [pc, #320]	; (8003848 <HAL_GPIO_Init+0x34c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <HAL_GPIO_Init+0x21e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a4f      	ldr	r2, [pc, #316]	; (800384c <HAL_GPIO_Init+0x350>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <HAL_GPIO_Init+0x21a>
 8003712:	2309      	movs	r3, #9
 8003714:	e012      	b.n	800373c <HAL_GPIO_Init+0x240>
 8003716:	230a      	movs	r3, #10
 8003718:	e010      	b.n	800373c <HAL_GPIO_Init+0x240>
 800371a:	2308      	movs	r3, #8
 800371c:	e00e      	b.n	800373c <HAL_GPIO_Init+0x240>
 800371e:	2307      	movs	r3, #7
 8003720:	e00c      	b.n	800373c <HAL_GPIO_Init+0x240>
 8003722:	2306      	movs	r3, #6
 8003724:	e00a      	b.n	800373c <HAL_GPIO_Init+0x240>
 8003726:	2305      	movs	r3, #5
 8003728:	e008      	b.n	800373c <HAL_GPIO_Init+0x240>
 800372a:	2304      	movs	r3, #4
 800372c:	e006      	b.n	800373c <HAL_GPIO_Init+0x240>
 800372e:	2303      	movs	r3, #3
 8003730:	e004      	b.n	800373c <HAL_GPIO_Init+0x240>
 8003732:	2302      	movs	r3, #2
 8003734:	e002      	b.n	800373c <HAL_GPIO_Init+0x240>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <HAL_GPIO_Init+0x240>
 800373a:	2300      	movs	r3, #0
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	f002 0203 	and.w	r2, r2, #3
 8003742:	0092      	lsls	r2, r2, #2
 8003744:	4093      	lsls	r3, r2
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800374c:	4935      	ldr	r1, [pc, #212]	; (8003824 <HAL_GPIO_Init+0x328>)
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	3302      	adds	r3, #2
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800375a:	4b3d      	ldr	r3, [pc, #244]	; (8003850 <HAL_GPIO_Init+0x354>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800377e:	4a34      	ldr	r2, [pc, #208]	; (8003850 <HAL_GPIO_Init+0x354>)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003784:	4b32      	ldr	r3, [pc, #200]	; (8003850 <HAL_GPIO_Init+0x354>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037a8:	4a29      	ldr	r2, [pc, #164]	; (8003850 <HAL_GPIO_Init+0x354>)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ae:	4b28      	ldr	r3, [pc, #160]	; (8003850 <HAL_GPIO_Init+0x354>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4013      	ands	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037d2:	4a1f      	ldr	r2, [pc, #124]	; (8003850 <HAL_GPIO_Init+0x354>)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d8:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <HAL_GPIO_Init+0x354>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <HAL_GPIO_Init+0x354>)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3301      	adds	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	2b0f      	cmp	r3, #15
 800380c:	f67f ae84 	bls.w	8003518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	3724      	adds	r7, #36	; 0x24
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	40013800 	.word	0x40013800
 8003828:	40020000 	.word	0x40020000
 800382c:	40020400 	.word	0x40020400
 8003830:	40020800 	.word	0x40020800
 8003834:	40020c00 	.word	0x40020c00
 8003838:	40021000 	.word	0x40021000
 800383c:	40021400 	.word	0x40021400
 8003840:	40021800 	.word	0x40021800
 8003844:	40021c00 	.word	0x40021c00
 8003848:	40022000 	.word	0x40022000
 800384c:	40022400 	.word	0x40022400
 8003850:	40013c00 	.word	0x40013c00

08003854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	887b      	ldrh	r3, [r7, #2]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	e001      	b.n	8003876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003876:	7bfb      	ldrb	r3, [r7, #15]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
 8003890:	4613      	mov	r3, r2
 8003892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003894:	787b      	ldrb	r3, [r7, #1]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038a0:	e003      	b.n	80038aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038a2:	887b      	ldrh	r3, [r7, #2]
 80038a4:	041a      	lsls	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	619a      	str	r2, [r3, #24]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e12b      	b.n	8003b22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe fb44 	bl	8001f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800390a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800391a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800391c:	f001 fa20 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 8003920:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4a81      	ldr	r2, [pc, #516]	; (8003b2c <HAL_I2C_Init+0x274>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d807      	bhi.n	800393c <HAL_I2C_Init+0x84>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4a80      	ldr	r2, [pc, #512]	; (8003b30 <HAL_I2C_Init+0x278>)
 8003930:	4293      	cmp	r3, r2
 8003932:	bf94      	ite	ls
 8003934:	2301      	movls	r3, #1
 8003936:	2300      	movhi	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e006      	b.n	800394a <HAL_I2C_Init+0x92>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a7d      	ldr	r2, [pc, #500]	; (8003b34 <HAL_I2C_Init+0x27c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	bf94      	ite	ls
 8003944:	2301      	movls	r3, #1
 8003946:	2300      	movhi	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e0e7      	b.n	8003b22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4a78      	ldr	r2, [pc, #480]	; (8003b38 <HAL_I2C_Init+0x280>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	0c9b      	lsrs	r3, r3, #18
 800395c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4a6a      	ldr	r2, [pc, #424]	; (8003b2c <HAL_I2C_Init+0x274>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d802      	bhi.n	800398c <HAL_I2C_Init+0xd4>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3301      	adds	r3, #1
 800398a:	e009      	b.n	80039a0 <HAL_I2C_Init+0xe8>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	4a69      	ldr	r2, [pc, #420]	; (8003b3c <HAL_I2C_Init+0x284>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	099b      	lsrs	r3, r3, #6
 800399e:	3301      	adds	r3, #1
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	495c      	ldr	r1, [pc, #368]	; (8003b2c <HAL_I2C_Init+0x274>)
 80039bc:	428b      	cmp	r3, r1
 80039be:	d819      	bhi.n	80039f4 <HAL_I2C_Init+0x13c>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ce:	1c59      	adds	r1, r3, #1
 80039d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039d4:	400b      	ands	r3, r1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_I2C_Init+0x138>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1e59      	subs	r1, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e8:	3301      	adds	r3, #1
 80039ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ee:	e051      	b.n	8003a94 <HAL_I2C_Init+0x1dc>
 80039f0:	2304      	movs	r3, #4
 80039f2:	e04f      	b.n	8003a94 <HAL_I2C_Init+0x1dc>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d111      	bne.n	8003a20 <HAL_I2C_Init+0x168>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1e58      	subs	r0, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	440b      	add	r3, r1
 8003a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e012      	b.n	8003a46 <HAL_I2C_Init+0x18e>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1e58      	subs	r0, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	0099      	lsls	r1, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a36:	3301      	adds	r3, #1
 8003a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf0c      	ite	eq
 8003a40:	2301      	moveq	r3, #1
 8003a42:	2300      	movne	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_I2C_Init+0x196>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e022      	b.n	8003a94 <HAL_I2C_Init+0x1dc>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10e      	bne.n	8003a74 <HAL_I2C_Init+0x1bc>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1e58      	subs	r0, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6859      	ldr	r1, [r3, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	440b      	add	r3, r1
 8003a64:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a68:	3301      	adds	r3, #1
 8003a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a72:	e00f      	b.n	8003a94 <HAL_I2C_Init+0x1dc>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e58      	subs	r0, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	0099      	lsls	r1, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	6809      	ldr	r1, [r1, #0]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ac2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6911      	ldr	r1, [r2, #16]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68d2      	ldr	r2, [r2, #12]
 8003ace:	4311      	orrs	r1, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	000186a0 	.word	0x000186a0
 8003b30:	001e847f 	.word	0x001e847f
 8003b34:	003d08ff 	.word	0x003d08ff
 8003b38:	431bde83 	.word	0x431bde83
 8003b3c:	10624dd3 	.word	0x10624dd3

08003b40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	817b      	strh	r3, [r7, #10]
 8003b50:	4613      	mov	r3, r2
 8003b52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b54:	f7fe ffd6 	bl	8002b04 <HAL_GetTick>
 8003b58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	f040 80e0 	bne.w	8003d28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	2319      	movs	r3, #25
 8003b6e:	2201      	movs	r2, #1
 8003b70:	4970      	ldr	r1, [pc, #448]	; (8003d34 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f964 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e0d3      	b.n	8003d2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_I2C_Master_Transmit+0x50>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e0cc      	b.n	8003d2a <HAL_I2C_Master_Transmit+0x1ea>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d007      	beq.n	8003bb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0201 	orr.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2221      	movs	r2, #33	; 0x21
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	893a      	ldrh	r2, [r7, #8]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a50      	ldr	r2, [pc, #320]	; (8003d38 <HAL_I2C_Master_Transmit+0x1f8>)
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bf8:	8979      	ldrh	r1, [r7, #10]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	6a3a      	ldr	r2, [r7, #32]
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f89c 	bl	8003d3c <I2C_MasterRequestWrite>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e08d      	b.n	8003d2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c24:	e066      	b.n	8003cf4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	6a39      	ldr	r1, [r7, #32]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f9de 	bl	8003fec <I2C_WaitOnTXEFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00d      	beq.n	8003c52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d107      	bne.n	8003c4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e06b      	b.n	8003d2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	781a      	ldrb	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d11b      	bne.n	8003cc8 <HAL_I2C_Master_Transmit+0x188>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d017      	beq.n	8003cc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	6a39      	ldr	r1, [r7, #32]
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f9ce 	bl	800406e <I2C_WaitOnBTFFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d107      	bne.n	8003cf0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e01a      	b.n	8003d2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d194      	bne.n	8003c26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e000      	b.n	8003d2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
  }
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	00100002 	.word	0x00100002
 8003d38:	ffff0000 	.word	0xffff0000

08003d3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d006      	beq.n	8003d66 <I2C_MasterRequestWrite+0x2a>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d003      	beq.n	8003d66 <I2C_MasterRequestWrite+0x2a>
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d64:	d108      	bne.n	8003d78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e00b      	b.n	8003d90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	2b12      	cmp	r3, #18
 8003d7e:	d107      	bne.n	8003d90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f84f 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db6:	d103      	bne.n	8003dc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e035      	b.n	8003e30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dcc:	d108      	bne.n	8003de0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dce:	897b      	ldrh	r3, [r7, #10]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ddc:	611a      	str	r2, [r3, #16]
 8003dde:	e01b      	b.n	8003e18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003de0:	897b      	ldrh	r3, [r7, #10]
 8003de2:	11db      	asrs	r3, r3, #7
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f003 0306 	and.w	r3, r3, #6
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f063 030f 	orn	r3, r3, #15
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	490e      	ldr	r1, [pc, #56]	; (8003e38 <I2C_MasterRequestWrite+0xfc>)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f875 	bl	8003eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e010      	b.n	8003e30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e0e:	897b      	ldrh	r3, [r7, #10]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4907      	ldr	r1, [pc, #28]	; (8003e3c <I2C_MasterRequestWrite+0x100>)
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f865 	bl	8003eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	00010008 	.word	0x00010008
 8003e3c:	00010002 	.word	0x00010002

08003e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e50:	e025      	b.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d021      	beq.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5a:	f7fe fe53 	bl	8002b04 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d116      	bne.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f043 0220 	orr.w	r2, r3, #32
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e023      	b.n	8003ee6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d10d      	bne.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	e00c      	b.n	8003ede <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d0b6      	beq.n	8003e52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003efc:	e051      	b.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0c:	d123      	bne.n	8003f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e046      	b.n	8003fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d021      	beq.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5e:	f7fe fdd1 	bl	8002b04 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d302      	bcc.n	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d116      	bne.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f043 0220 	orr.w	r2, r3, #32
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e020      	b.n	8003fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10c      	bne.n	8003fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf14      	ite	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	2300      	moveq	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	e00b      	b.n	8003fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	43da      	mvns	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d18d      	bne.n	8003efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff8:	e02d      	b.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f878 	bl	80040f0 <I2C_IsAcknowledgeFailed>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e02d      	b.n	8004066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d021      	beq.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004012:	f7fe fd77 	bl	8002b04 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d116      	bne.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e007      	b.n	8004066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b80      	cmp	r3, #128	; 0x80
 8004062:	d1ca      	bne.n	8003ffa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800407a:	e02d      	b.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f837 	bl	80040f0 <I2C_IsAcknowledgeFailed>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e02d      	b.n	80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d021      	beq.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004094:	f7fe fd36 	bl	8002b04 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d302      	bcc.n	80040aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d116      	bne.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e007      	b.n	80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d1ca      	bne.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004106:	d11b      	bne.n	8004140 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004110:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f043 0204 	orr.w	r2, r3, #4
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b20      	cmp	r3, #32
 8004162:	d129      	bne.n	80041b8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2224      	movs	r2, #36	; 0x24
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0210 	bic.w	r2, r2, #16
 800418a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d12a      	bne.n	8004236 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2224      	movs	r2, #36	; 0x24
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004200:	89fb      	ldrh	r3, [r7, #14]
 8004202:	f023 030f 	bic.w	r3, r3, #15
 8004206:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	b29a      	uxth	r2, r3
 800420c:	89fb      	ldrh	r3, [r7, #14]
 800420e:	4313      	orrs	r3, r2
 8004210:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	89fa      	ldrh	r2, [r7, #14]
 8004218:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e000      	b.n	8004238 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004246:	b08f      	sub	sp, #60	; 0x3c
 8004248:	af0a      	add	r7, sp, #40	; 0x28
 800424a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e10f      	b.n	8004476 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7fe f8bb 	bl	80023ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2203      	movs	r2, #3
 800427a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d102      	bne.n	8004290 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f003 ff88 	bl	80081aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	687e      	ldr	r6, [r7, #4]
 80042a2:	466d      	mov	r5, sp
 80042a4:	f106 0410 	add.w	r4, r6, #16
 80042a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80042b8:	1d33      	adds	r3, r6, #4
 80042ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042bc:	6838      	ldr	r0, [r7, #0]
 80042be:	f003 ff13 	bl	80080e8 <USB_CoreInit>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0d0      	b.n	8004476 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f003 ff76 	bl	80081cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e0:	2300      	movs	r3, #0
 80042e2:	73fb      	strb	r3, [r7, #15]
 80042e4:	e04a      	b.n	800437c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042e6:	7bfa      	ldrb	r2, [r7, #15]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	333d      	adds	r3, #61	; 0x3d
 80042f6:	2201      	movs	r2, #1
 80042f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	333c      	adds	r3, #60	; 0x3c
 800430a:	7bfa      	ldrb	r2, [r7, #15]
 800430c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800430e:	7bfa      	ldrb	r2, [r7, #15]
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	b298      	uxth	r0, r3
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	3344      	adds	r3, #68	; 0x44
 8004322:	4602      	mov	r2, r0
 8004324:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	3340      	adds	r3, #64	; 0x40
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800433a:	7bfa      	ldrb	r2, [r7, #15]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	3348      	adds	r3, #72	; 0x48
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800434e:	7bfa      	ldrb	r2, [r7, #15]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	334c      	adds	r3, #76	; 0x4c
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004362:	7bfa      	ldrb	r2, [r7, #15]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	3354      	adds	r3, #84	; 0x54
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	3301      	adds	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
 800437c:	7bfa      	ldrb	r2, [r7, #15]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	d3af      	bcc.n	80042e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004386:	2300      	movs	r3, #0
 8004388:	73fb      	strb	r3, [r7, #15]
 800438a:	e044      	b.n	8004416 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800438c:	7bfa      	ldrb	r2, [r7, #15]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043a2:	7bfa      	ldrb	r2, [r7, #15]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80043b4:	7bfa      	ldrb	r2, [r7, #15]
 80043b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043b8:	7bfa      	ldrb	r2, [r7, #15]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043ce:	7bfa      	ldrb	r2, [r7, #15]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043e4:	7bfa      	ldrb	r2, [r7, #15]
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	4613      	mov	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043fa:	7bfa      	ldrb	r2, [r7, #15]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	3301      	adds	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
 8004416:	7bfa      	ldrb	r2, [r7, #15]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	429a      	cmp	r2, r3
 800441e:	d3b5      	bcc.n	800438c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	687e      	ldr	r6, [r7, #4]
 8004428:	466d      	mov	r5, sp
 800442a:	f106 0410 	add.w	r4, r6, #16
 800442e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004436:	e894 0003 	ldmia.w	r4, {r0, r1}
 800443a:	e885 0003 	stmia.w	r5, {r0, r1}
 800443e:	1d33      	adds	r3, r6, #4
 8004440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004442:	6838      	ldr	r0, [r7, #0]
 8004444:	f003 ff0e 	bl	8008264 <USB_DevInit>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e00d      	b.n	8004476 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f004 f8d9 	bl	8008626 <USB_DevDisconnect>

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e267      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d075      	beq.n	800458a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800449e:	4b88      	ldr	r3, [pc, #544]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d00c      	beq.n	80044c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044aa:	4b85      	ldr	r3, [pc, #532]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d112      	bne.n	80044dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b6:	4b82      	ldr	r3, [pc, #520]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c2:	d10b      	bne.n	80044dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c4:	4b7e      	ldr	r3, [pc, #504]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d05b      	beq.n	8004588 <HAL_RCC_OscConfig+0x108>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d157      	bne.n	8004588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e242      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e4:	d106      	bne.n	80044f4 <HAL_RCC_OscConfig+0x74>
 80044e6:	4b76      	ldr	r3, [pc, #472]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a75      	ldr	r2, [pc, #468]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	e01d      	b.n	8004530 <HAL_RCC_OscConfig+0xb0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0x98>
 80044fe:	4b70      	ldr	r3, [pc, #448]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a6f      	ldr	r2, [pc, #444]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4b6d      	ldr	r3, [pc, #436]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6c      	ldr	r2, [pc, #432]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e00b      	b.n	8004530 <HAL_RCC_OscConfig+0xb0>
 8004518:	4b69      	ldr	r3, [pc, #420]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a68      	ldr	r2, [pc, #416]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 800451e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b66      	ldr	r3, [pc, #408]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a65      	ldr	r2, [pc, #404]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 800452a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800452e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d013      	beq.n	8004560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004538:	f7fe fae4 	bl	8002b04 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004540:	f7fe fae0 	bl	8002b04 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	; 0x64
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e207      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004552:	4b5b      	ldr	r3, [pc, #364]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0xc0>
 800455e:	e014      	b.n	800458a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fe fad0 	bl	8002b04 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004568:	f7fe facc 	bl	8002b04 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	; 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e1f3      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457a:	4b51      	ldr	r3, [pc, #324]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0xe8>
 8004586:	e000      	b.n	800458a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d063      	beq.n	800465e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004596:	4b4a      	ldr	r3, [pc, #296]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045a2:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d11c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ae:	4b44      	ldr	r3, [pc, #272]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d116      	bne.n	80045e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ba:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_RCC_OscConfig+0x152>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d001      	beq.n	80045d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e1c7      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d2:	4b3b      	ldr	r3, [pc, #236]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	4937      	ldr	r1, [pc, #220]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e6:	e03a      	b.n	800465e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d020      	beq.n	8004632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f0:	4b34      	ldr	r3, [pc, #208]	; (80046c4 <HAL_RCC_OscConfig+0x244>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f6:	f7fe fa85 	bl	8002b04 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045fe:	f7fe fa81 	bl	8002b04 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e1a8      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004610:	4b2b      	ldr	r3, [pc, #172]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461c:	4b28      	ldr	r3, [pc, #160]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4925      	ldr	r1, [pc, #148]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 800462c:	4313      	orrs	r3, r2
 800462e:	600b      	str	r3, [r1, #0]
 8004630:	e015      	b.n	800465e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <HAL_RCC_OscConfig+0x244>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fe fa64 	bl	8002b04 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004640:	f7fe fa60 	bl	8002b04 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e187      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004652:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d036      	beq.n	80046d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <HAL_RCC_OscConfig+0x248>)
 8004674:	2201      	movs	r2, #1
 8004676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fe fa44 	bl	8002b04 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004680:	f7fe fa40 	bl	8002b04 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e167      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x200>
 800469e:	e01b      	b.n	80046d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_RCC_OscConfig+0x248>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a6:	f7fe fa2d 	bl	8002b04 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ac:	e00e      	b.n	80046cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ae:	f7fe fa29 	bl	8002b04 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d907      	bls.n	80046cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e150      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
 80046c0:	40023800 	.word	0x40023800
 80046c4:	42470000 	.word	0x42470000
 80046c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	4b88      	ldr	r3, [pc, #544]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 80046ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1ea      	bne.n	80046ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8097 	beq.w	8004814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e6:	2300      	movs	r3, #0
 80046e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ea:	4b81      	ldr	r3, [pc, #516]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10f      	bne.n	8004716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	4b7d      	ldr	r3, [pc, #500]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	4a7c      	ldr	r2, [pc, #496]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004704:	6413      	str	r3, [r2, #64]	; 0x40
 8004706:	4b7a      	ldr	r3, [pc, #488]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004712:	2301      	movs	r3, #1
 8004714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004716:	4b77      	ldr	r3, [pc, #476]	; (80048f4 <HAL_RCC_OscConfig+0x474>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471e:	2b00      	cmp	r3, #0
 8004720:	d118      	bne.n	8004754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004722:	4b74      	ldr	r3, [pc, #464]	; (80048f4 <HAL_RCC_OscConfig+0x474>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a73      	ldr	r2, [pc, #460]	; (80048f4 <HAL_RCC_OscConfig+0x474>)
 8004728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800472e:	f7fe f9e9 	bl	8002b04 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004736:	f7fe f9e5 	bl	8002b04 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e10c      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	4b6a      	ldr	r3, [pc, #424]	; (80048f4 <HAL_RCC_OscConfig+0x474>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d106      	bne.n	800476a <HAL_RCC_OscConfig+0x2ea>
 800475c:	4b64      	ldr	r3, [pc, #400]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004760:	4a63      	ldr	r2, [pc, #396]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	6713      	str	r3, [r2, #112]	; 0x70
 8004768:	e01c      	b.n	80047a4 <HAL_RCC_OscConfig+0x324>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b05      	cmp	r3, #5
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0x30c>
 8004772:	4b5f      	ldr	r3, [pc, #380]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	4a5e      	ldr	r2, [pc, #376]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004778:	f043 0304 	orr.w	r3, r3, #4
 800477c:	6713      	str	r3, [r2, #112]	; 0x70
 800477e:	4b5c      	ldr	r3, [pc, #368]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	4a5b      	ldr	r2, [pc, #364]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	6713      	str	r3, [r2, #112]	; 0x70
 800478a:	e00b      	b.n	80047a4 <HAL_RCC_OscConfig+0x324>
 800478c:	4b58      	ldr	r3, [pc, #352]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004790:	4a57      	ldr	r2, [pc, #348]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	6713      	str	r3, [r2, #112]	; 0x70
 8004798:	4b55      	ldr	r3, [pc, #340]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	4a54      	ldr	r2, [pc, #336]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 800479e:	f023 0304 	bic.w	r3, r3, #4
 80047a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d015      	beq.n	80047d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fe f9aa 	bl	8002b04 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fe f9a6 	bl	8002b04 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e0cb      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ca:	4b49      	ldr	r3, [pc, #292]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ee      	beq.n	80047b4 <HAL_RCC_OscConfig+0x334>
 80047d6:	e014      	b.n	8004802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d8:	f7fe f994 	bl	8002b04 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047de:	e00a      	b.n	80047f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e0:	f7fe f990 	bl	8002b04 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e0b5      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f6:	4b3e      	ldr	r3, [pc, #248]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1ee      	bne.n	80047e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004802:	7dfb      	ldrb	r3, [r7, #23]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d105      	bne.n	8004814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004808:	4b39      	ldr	r3, [pc, #228]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	4a38      	ldr	r2, [pc, #224]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 800480e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004812:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80a1 	beq.w	8004960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800481e:	4b34      	ldr	r3, [pc, #208]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	2b08      	cmp	r3, #8
 8004828:	d05c      	beq.n	80048e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d141      	bne.n	80048b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004832:	4b31      	ldr	r3, [pc, #196]	; (80048f8 <HAL_RCC_OscConfig+0x478>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fe f964 	bl	8002b04 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004840:	f7fe f960 	bl	8002b04 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e087      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004852:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	019b      	lsls	r3, r3, #6
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	3b01      	subs	r3, #1
 8004878:	041b      	lsls	r3, r3, #16
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	061b      	lsls	r3, r3, #24
 8004882:	491b      	ldr	r1, [pc, #108]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004884:	4313      	orrs	r3, r2
 8004886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004888:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <HAL_RCC_OscConfig+0x478>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488e:	f7fe f939 	bl	8002b04 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004896:	f7fe f935 	bl	8002b04 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e05c      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a8:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x416>
 80048b4:	e054      	b.n	8004960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <HAL_RCC_OscConfig+0x478>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fe f922 	bl	8002b04 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fe f91e 	bl	8002b04 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e045      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCC_OscConfig+0x470>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x444>
 80048e2:	e03d      	b.n	8004960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d107      	bne.n	80048fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e038      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
 80048f0:	40023800 	.word	0x40023800
 80048f4:	40007000 	.word	0x40007000
 80048f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048fc:	4b1b      	ldr	r3, [pc, #108]	; (800496c <HAL_RCC_OscConfig+0x4ec>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d028      	beq.n	800495c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d121      	bne.n	800495c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d11a      	bne.n	800495c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800492c:	4013      	ands	r3, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004934:	4293      	cmp	r3, r2
 8004936:	d111      	bne.n	800495c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	3b01      	subs	r3, #1
 8004946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d107      	bne.n	800495c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d001      	beq.n	8004960 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40023800 	.word	0x40023800

08004970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0cc      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004984:	4b68      	ldr	r3, [pc, #416]	; (8004b28 <HAL_RCC_ClockConfig+0x1b8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d90c      	bls.n	80049ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b65      	ldr	r3, [pc, #404]	; (8004b28 <HAL_RCC_ClockConfig+0x1b8>)
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	4b63      	ldr	r3, [pc, #396]	; (8004b28 <HAL_RCC_ClockConfig+0x1b8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0b8      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d020      	beq.n	80049fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c4:	4b59      	ldr	r3, [pc, #356]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a58      	ldr	r2, [pc, #352]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049dc:	4b53      	ldr	r3, [pc, #332]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a52      	ldr	r2, [pc, #328]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e8:	4b50      	ldr	r3, [pc, #320]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	494d      	ldr	r1, [pc, #308]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d044      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0e:	4b47      	ldr	r3, [pc, #284]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d119      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e07f      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d003      	beq.n	8004a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2e:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e06f      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3e:	4b3b      	ldr	r3, [pc, #236]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e067      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4e:	4b37      	ldr	r3, [pc, #220]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f023 0203 	bic.w	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4934      	ldr	r1, [pc, #208]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a60:	f7fe f850 	bl	8002b04 <HAL_GetTick>
 8004a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a68:	f7fe f84c 	bl	8002b04 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e04f      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	4b2b      	ldr	r3, [pc, #172]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 020c 	and.w	r2, r3, #12
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d1eb      	bne.n	8004a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a90:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <HAL_RCC_ClockConfig+0x1b8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d20c      	bcs.n	8004ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b22      	ldr	r3, [pc, #136]	; (8004b28 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e032      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac4:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4916      	ldr	r1, [pc, #88]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	490e      	ldr	r1, [pc, #56]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004af6:	f000 f821 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8004afa:	4602      	mov	r2, r0
 8004afc:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	490a      	ldr	r1, [pc, #40]	; (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004b08:	5ccb      	ldrb	r3, [r1, r3]
 8004b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0e:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <HAL_RCC_ClockConfig+0x1c8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fd ffb0 	bl	8002a7c <HAL_InitTick>

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40023c00 	.word	0x40023c00
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	08009cf4 	.word	0x08009cf4
 8004b34:	20000040 	.word	0x20000040
 8004b38:	20000044 	.word	0x20000044

08004b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b40:	b094      	sub	sp, #80	; 0x50
 8004b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	647b      	str	r3, [r7, #68]	; 0x44
 8004b48:	2300      	movs	r3, #0
 8004b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b54:	4b79      	ldr	r3, [pc, #484]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d00d      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0x40>
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	f200 80e1 	bhi.w	8004d28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x34>
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d003      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b6e:	e0db      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b70:	4b73      	ldr	r3, [pc, #460]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b74:	e0db      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b76:	4b73      	ldr	r3, [pc, #460]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b7a:	e0d8      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b7c:	4b6f      	ldr	r3, [pc, #444]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b86:	4b6d      	ldr	r3, [pc, #436]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d063      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b92:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	2200      	movs	r2, #0
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8004baa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bae:	4622      	mov	r2, r4
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f04f 0100 	mov.w	r1, #0
 8004bba:	0159      	lsls	r1, r3, #5
 8004bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc0:	0150      	lsls	r0, r2, #5
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	1a51      	subs	r1, r2, r1
 8004bca:	6139      	str	r1, [r7, #16]
 8004bcc:	4629      	mov	r1, r5
 8004bce:	eb63 0301 	sbc.w	r3, r3, r1
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be0:	4659      	mov	r1, fp
 8004be2:	018b      	lsls	r3, r1, #6
 8004be4:	4651      	mov	r1, sl
 8004be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bea:	4651      	mov	r1, sl
 8004bec:	018a      	lsls	r2, r1, #6
 8004bee:	4651      	mov	r1, sl
 8004bf0:	ebb2 0801 	subs.w	r8, r2, r1
 8004bf4:	4659      	mov	r1, fp
 8004bf6:	eb63 0901 	sbc.w	r9, r3, r1
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c0e:	4690      	mov	r8, r2
 8004c10:	4699      	mov	r9, r3
 8004c12:	4623      	mov	r3, r4
 8004c14:	eb18 0303 	adds.w	r3, r8, r3
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	462b      	mov	r3, r5
 8004c1c:	eb49 0303 	adc.w	r3, r9, r3
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c2e:	4629      	mov	r1, r5
 8004c30:	024b      	lsls	r3, r1, #9
 8004c32:	4621      	mov	r1, r4
 8004c34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c38:	4621      	mov	r1, r4
 8004c3a:	024a      	lsls	r2, r1, #9
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	2200      	movs	r2, #0
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c4c:	f7fb fe2e 	bl	80008ac <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4613      	mov	r3, r2
 8004c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c58:	e058      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5a:	4b38      	ldr	r3, [pc, #224]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	099b      	lsrs	r3, r3, #6
 8004c60:	2200      	movs	r2, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	4611      	mov	r1, r2
 8004c66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c6a:	623b      	str	r3, [r7, #32]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c74:	4642      	mov	r2, r8
 8004c76:	464b      	mov	r3, r9
 8004c78:	f04f 0000 	mov.w	r0, #0
 8004c7c:	f04f 0100 	mov.w	r1, #0
 8004c80:	0159      	lsls	r1, r3, #5
 8004c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c86:	0150      	lsls	r0, r2, #5
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c92:	4649      	mov	r1, r9
 8004c94:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ca4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ca8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cac:	ebb2 040a 	subs.w	r4, r2, sl
 8004cb0:	eb63 050b 	sbc.w	r5, r3, fp
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	00eb      	lsls	r3, r5, #3
 8004cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cc2:	00e2      	lsls	r2, r4, #3
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	461d      	mov	r5, r3
 8004cc8:	4643      	mov	r3, r8
 8004cca:	18e3      	adds	r3, r4, r3
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	464b      	mov	r3, r9
 8004cd0:	eb45 0303 	adc.w	r3, r5, r3
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	028b      	lsls	r3, r1, #10
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cec:	4621      	mov	r1, r4
 8004cee:	028a      	lsls	r2, r1, #10
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	61fa      	str	r2, [r7, #28]
 8004cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d00:	f7fb fdd4 	bl	80008ac <__aeabi_uldivmod>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4613      	mov	r3, r2
 8004d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	0c1b      	lsrs	r3, r3, #16
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	3301      	adds	r3, #1
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d26:	e002      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3750      	adds	r7, #80	; 0x50
 8004d34:	46bd      	mov	sp, r7
 8004d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	00f42400 	.word	0x00f42400
 8004d44:	007a1200 	.word	0x007a1200

08004d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d4c:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000040 	.word	0x20000040

08004d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d64:	f7ff fff0 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	0a9b      	lsrs	r3, r3, #10
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4903      	ldr	r1, [pc, #12]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40023800 	.word	0x40023800
 8004d84:	08009d04 	.word	0x08009d04

08004d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d8c:	f7ff ffdc 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0b5b      	lsrs	r3, r3, #13
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	4903      	ldr	r1, [pc, #12]	; (8004dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d9e:	5ccb      	ldrb	r3, [r1, r3]
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40023800 	.word	0x40023800
 8004dac:	08009d04 	.word	0x08009d04

08004db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10b      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d075      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004de4:	4b91      	ldr	r3, [pc, #580]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dea:	f7fd fe8b 	bl	8002b04 <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004df2:	f7fd fe87 	bl	8002b04 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e189      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e04:	4b8a      	ldr	r3, [pc, #552]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f0      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d009      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	019a      	lsls	r2, r3, #6
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	071b      	lsls	r3, r3, #28
 8004e28:	4981      	ldr	r1, [pc, #516]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01f      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e3c:	4b7c      	ldr	r3, [pc, #496]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e42:	0f1b      	lsrs	r3, r3, #28
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	019a      	lsls	r2, r3, #6
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	061b      	lsls	r3, r3, #24
 8004e56:	431a      	orrs	r2, r3
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	071b      	lsls	r3, r3, #28
 8004e5c:	4974      	ldr	r1, [pc, #464]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e64:	4b72      	ldr	r3, [pc, #456]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e6a:	f023 021f 	bic.w	r2, r3, #31
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	496e      	ldr	r1, [pc, #440]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00d      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	019a      	lsls	r2, r3, #6
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	061b      	lsls	r3, r3, #24
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	071b      	lsls	r3, r3, #28
 8004e9c:	4964      	ldr	r1, [pc, #400]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ea4:	4b61      	ldr	r3, [pc, #388]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eaa:	f7fd fe2b 	bl	8002b04 <HAL_GetTick>
 8004eae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eb2:	f7fd fe27 	bl	8002b04 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e129      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ec4:	4b5a      	ldr	r3, [pc, #360]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d105      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d079      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ee8:	4b52      	ldr	r3, [pc, #328]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eee:	f7fd fe09 	bl	8002b04 <HAL_GetTick>
 8004ef2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ef6:	f7fd fe05 	bl	8002b04 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e107      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f08:	4b49      	ldr	r3, [pc, #292]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f14:	d0ef      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d020      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f22:	4b43      	ldr	r3, [pc, #268]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f28:	0f1b      	lsrs	r3, r3, #28
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	019a      	lsls	r2, r3, #6
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	061b      	lsls	r3, r3, #24
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	071b      	lsls	r3, r3, #28
 8004f42:	493b      	ldr	r1, [pc, #236]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f4a:	4b39      	ldr	r3, [pc, #228]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	4934      	ldr	r1, [pc, #208]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01e      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f70:	4b2f      	ldr	r3, [pc, #188]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f76:	0e1b      	lsrs	r3, r3, #24
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	019a      	lsls	r2, r3, #6
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	061b      	lsls	r3, r3, #24
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	071b      	lsls	r3, r3, #28
 8004f90:	4927      	ldr	r1, [pc, #156]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f98:	4b25      	ldr	r3, [pc, #148]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	4922      	ldr	r1, [pc, #136]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fae:	4b21      	ldr	r3, [pc, #132]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb4:	f7fd fda6 	bl	8002b04 <HAL_GetTick>
 8004fb8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fbc:	f7fd fda2 	bl	8002b04 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e0a4      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fce:	4b18      	ldr	r3, [pc, #96]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fda:	d1ef      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 808b 	beq.w	8005100 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	4b10      	ldr	r3, [pc, #64]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	4a0f      	ldr	r2, [pc, #60]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005006:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a0b      	ldr	r2, [pc, #44]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005010:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005012:	f7fd fd77 	bl	8002b04 <HAL_GetTick>
 8005016:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005018:	e010      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800501a:	f7fd fd73 	bl	8002b04 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d909      	bls.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e075      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800502c:	42470068 	.word	0x42470068
 8005030:	40023800 	.word	0x40023800
 8005034:	42470070 	.word	0x42470070
 8005038:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800503c:	4b38      	ldr	r3, [pc, #224]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0e8      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005048:	4b36      	ldr	r3, [pc, #216]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800504a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005050:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d02f      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	429a      	cmp	r2, r3
 8005064:	d028      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005066:	4b2f      	ldr	r3, [pc, #188]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005070:	4b2d      	ldr	r3, [pc, #180]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005076:	4b2c      	ldr	r3, [pc, #176]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800507c:	4a29      	ldr	r2, [pc, #164]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005082:	4b28      	ldr	r3, [pc, #160]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b01      	cmp	r3, #1
 800508c:	d114      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800508e:	f7fd fd39 	bl	8002b04 <HAL_GetTick>
 8005092:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005094:	e00a      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fd fd35 	bl	8002b04 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e035      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ac:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ee      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c4:	d10d      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80050c6:	4b17      	ldr	r3, [pc, #92]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050da:	4912      	ldr	r1, [pc, #72]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	608b      	str	r3, [r1, #8]
 80050e0:	e005      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80050e2:	4b10      	ldr	r3, [pc, #64]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	4a0f      	ldr	r2, [pc, #60]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050ec:	6093      	str	r3, [r2, #8]
 80050ee:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050fa:	490a      	ldr	r1, [pc, #40]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d004      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005114:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40007000 	.word	0x40007000
 8005124:	40023800 	.word	0x40023800
 8005128:	42470e40 	.word	0x42470e40
 800512c:	424711e0 	.word	0x424711e0

08005130 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e066      	b.n	8005214 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	7f5b      	ldrb	r3, [r3, #29]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d105      	bne.n	800515c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fc ff50 	bl	8001ffc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	22ca      	movs	r2, #202	; 0xca
 8005168:	625a      	str	r2, [r3, #36]	; 0x24
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2253      	movs	r2, #83	; 0x53
 8005170:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f998 	bl	80054a8 <RTC_EnterInitMode>
 8005178:	4603      	mov	r3, r0
 800517a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d12c      	bne.n	80051dc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005194:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6899      	ldr	r1, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	68d2      	ldr	r2, [r2, #12]
 80051bc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6919      	ldr	r1, [r3, #16]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	041a      	lsls	r2, r3, #16
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f99f 	bl	8005516 <RTC_ExitInitMode>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d113      	bne.n	800520a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699a      	ldr	r2, [r3, #24]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	22ff      	movs	r2, #255	; 0xff
 8005210:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005212:	7bfb      	ldrb	r3, [r7, #15]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	7f1b      	ldrb	r3, [r3, #28]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_RTC_SetTime+0x1c>
 8005234:	2302      	movs	r3, #2
 8005236:	e087      	b.n	8005348 <HAL_RTC_SetTime+0x12c>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2202      	movs	r2, #2
 8005242:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d126      	bne.n	8005298 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2200      	movs	r2, #0
 800525c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f97c 	bl	8005560 <RTC_ByteToBcd2>
 8005268:	4603      	mov	r3, r0
 800526a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f975 	bl	8005560 <RTC_ByteToBcd2>
 8005276:	4603      	mov	r3, r0
 8005278:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800527a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	789b      	ldrb	r3, [r3, #2]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 f96d 	bl	8005560 <RTC_ByteToBcd2>
 8005286:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005288:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	78db      	ldrb	r3, [r3, #3]
 8005290:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e018      	b.n	80052ca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2200      	movs	r2, #0
 80052aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80052b8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80052be:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	78db      	ldrb	r3, [r3, #3]
 80052c4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	22ca      	movs	r2, #202	; 0xca
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2253      	movs	r2, #83	; 0x53
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f8e4 	bl	80054a8 <RTC_EnterInitMode>
 80052e0:	4603      	mov	r3, r0
 80052e2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80052e4:	7cfb      	ldrb	r3, [r7, #19]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d120      	bne.n	800532c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80052f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80052f8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005308:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6899      	ldr	r1, [r3, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f8f7 	bl	8005516 <RTC_ExitInitMode>
 8005328:	4603      	mov	r3, r0
 800532a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d102      	bne.n	8005338 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	22ff      	movs	r2, #255	; 0xff
 800533e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	771a      	strb	r2, [r3, #28]

  return status;
 8005346:	7cfb      	ldrb	r3, [r7, #19]
}
 8005348:	4618      	mov	r0, r3
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	bd90      	pop	{r4, r7, pc}

08005350 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005350:	b590      	push	{r4, r7, lr}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	7f1b      	ldrb	r3, [r3, #28]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_RTC_SetDate+0x1c>
 8005368:	2302      	movs	r3, #2
 800536a:	e071      	b.n	8005450 <HAL_RTC_SetDate+0x100>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2202      	movs	r2, #2
 8005376:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10e      	bne.n	800539c <HAL_RTC_SetDate+0x4c>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	785b      	ldrb	r3, [r3, #1]
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	2b00      	cmp	r3, #0
 8005388:	d008      	beq.n	800539c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	f023 0310 	bic.w	r3, r3, #16
 8005392:	b2db      	uxtb	r3, r3
 8005394:	330a      	adds	r3, #10
 8005396:	b2da      	uxtb	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d11c      	bne.n	80053dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	78db      	ldrb	r3, [r3, #3]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f8da 	bl	8005560 <RTC_ByteToBcd2>
 80053ac:	4603      	mov	r3, r0
 80053ae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	785b      	ldrb	r3, [r3, #1]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 f8d3 	bl	8005560 <RTC_ByteToBcd2>
 80053ba:	4603      	mov	r3, r0
 80053bc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053be:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	789b      	ldrb	r3, [r3, #2]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 f8cb 	bl	8005560 <RTC_ByteToBcd2>
 80053ca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80053cc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	e00e      	b.n	80053fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	78db      	ldrb	r3, [r3, #3]
 80053e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80053e8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80053ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	22ca      	movs	r2, #202	; 0xca
 8005400:	625a      	str	r2, [r3, #36]	; 0x24
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2253      	movs	r2, #83	; 0x53
 8005408:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f84c 	bl	80054a8 <RTC_EnterInitMode>
 8005410:	4603      	mov	r3, r0
 8005412:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005414:	7cfb      	ldrb	r3, [r7, #19]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10c      	bne.n	8005434 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005424:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005428:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f873 	bl	8005516 <RTC_ExitInitMode>
 8005430:	4603      	mov	r3, r0
 8005432:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005434:	7cfb      	ldrb	r3, [r7, #19]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d102      	bne.n	8005440 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	22ff      	movs	r2, #255	; 0xff
 8005446:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	771a      	strb	r2, [r3, #28]

  return status;
 800544e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005450:	4618      	mov	r0, r3
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	bd90      	pop	{r4, r7, pc}

08005458 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005472:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005474:	f7fd fb46 	bl	8002b04 <HAL_GetTick>
 8005478:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800547a:	e009      	b.n	8005490 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800547c:	f7fd fb42 	bl	8002b04 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800548a:	d901      	bls.n	8005490 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e007      	b.n	80054a0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0ee      	beq.n	800547c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d122      	bne.n	800550c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054d6:	f7fd fb15 	bl	8002b04 <HAL_GetTick>
 80054da:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80054dc:	e00c      	b.n	80054f8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054de:	f7fd fb11 	bl	8002b04 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ec:	d904      	bls.n	80054f8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2204      	movs	r2, #4
 80054f2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <RTC_EnterInitMode+0x64>
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d1e8      	bne.n	80054de <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005530:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff ff89 	bl	8005458 <HAL_RTC_WaitForSynchro>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2204      	movs	r2, #4
 8005550:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005556:	7bfb      	ldrb	r3, [r7, #15]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800556e:	e005      	b.n	800557c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	3301      	adds	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	3b0a      	subs	r3, #10
 800557a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	2b09      	cmp	r3, #9
 8005580:	d8f6      	bhi.n	8005570 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	b2da      	uxtb	r2, r3
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	4313      	orrs	r3, r2
 800558c:	b2db      	uxtb	r3, r3
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e041      	b.n	8005630 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d106      	bne.n	80055c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7fc fdbb 	bl	800213c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2202      	movs	r2, #2
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3304      	adds	r3, #4
 80055d6:	4619      	mov	r1, r3
 80055d8:	4610      	mov	r0, r2
 80055da:	f001 f843 	bl	8006664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	d001      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e04e      	b.n	80056ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a23      	ldr	r2, [pc, #140]	; (80056fc <HAL_TIM_Base_Start_IT+0xc4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567a:	d01d      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1f      	ldr	r2, [pc, #124]	; (8005700 <HAL_TIM_Base_Start_IT+0xc8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1e      	ldr	r2, [pc, #120]	; (8005704 <HAL_TIM_Base_Start_IT+0xcc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1c      	ldr	r2, [pc, #112]	; (8005708 <HAL_TIM_Base_Start_IT+0xd0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1b      	ldr	r2, [pc, #108]	; (800570c <HAL_TIM_Base_Start_IT+0xd4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a19      	ldr	r2, [pc, #100]	; (8005710 <HAL_TIM_Base_Start_IT+0xd8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a18      	ldr	r2, [pc, #96]	; (8005714 <HAL_TIM_Base_Start_IT+0xdc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d111      	bne.n	80056dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b06      	cmp	r3, #6
 80056c8:	d010      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056da:	e007      	b.n	80056ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40010400 	.word	0x40010400
 8005710:	40014000 	.word	0x40014000
 8005714:	40001800 	.word	0x40001800

08005718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e041      	b.n	80057ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fc fc86 	bl	8002050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f000 ff84 	bl	8006664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d109      	bne.n	80057dc <HAL_TIM_PWM_Start+0x24>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	e022      	b.n	8005822 <HAL_TIM_PWM_Start+0x6a>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d109      	bne.n	80057f6 <HAL_TIM_PWM_Start+0x3e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	bf14      	ite	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	2300      	moveq	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	e015      	b.n	8005822 <HAL_TIM_PWM_Start+0x6a>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d109      	bne.n	8005810 <HAL_TIM_PWM_Start+0x58>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	e008      	b.n	8005822 <HAL_TIM_PWM_Start+0x6a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	bf14      	ite	ne
 800581c:	2301      	movne	r3, #1
 800581e:	2300      	moveq	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e07c      	b.n	8005924 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d104      	bne.n	800583a <HAL_TIM_PWM_Start+0x82>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005838:	e013      	b.n	8005862 <HAL_TIM_PWM_Start+0xaa>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b04      	cmp	r3, #4
 800583e:	d104      	bne.n	800584a <HAL_TIM_PWM_Start+0x92>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005848:	e00b      	b.n	8005862 <HAL_TIM_PWM_Start+0xaa>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d104      	bne.n	800585a <HAL_TIM_PWM_Start+0xa2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005858:	e003      	b.n	8005862 <HAL_TIM_PWM_Start+0xaa>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2201      	movs	r2, #1
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f001 fb0e 	bl	8006e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2d      	ldr	r2, [pc, #180]	; (800592c <HAL_TIM_PWM_Start+0x174>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIM_PWM_Start+0xcc>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a2c      	ldr	r2, [pc, #176]	; (8005930 <HAL_TIM_PWM_Start+0x178>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d101      	bne.n	8005888 <HAL_TIM_PWM_Start+0xd0>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <HAL_TIM_PWM_Start+0xd2>
 8005888:	2300      	movs	r3, #0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800589c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a22      	ldr	r2, [pc, #136]	; (800592c <HAL_TIM_PWM_Start+0x174>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b0:	d01d      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1f      	ldr	r2, [pc, #124]	; (8005934 <HAL_TIM_PWM_Start+0x17c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1d      	ldr	r2, [pc, #116]	; (8005938 <HAL_TIM_PWM_Start+0x180>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1c      	ldr	r2, [pc, #112]	; (800593c <HAL_TIM_PWM_Start+0x184>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a16      	ldr	r2, [pc, #88]	; (8005930 <HAL_TIM_PWM_Start+0x178>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a18      	ldr	r2, [pc, #96]	; (8005940 <HAL_TIM_PWM_Start+0x188>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a16      	ldr	r2, [pc, #88]	; (8005944 <HAL_TIM_PWM_Start+0x18c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d111      	bne.n	8005912 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b06      	cmp	r3, #6
 80058fe:	d010      	beq.n	8005922 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005910:	e007      	b.n	8005922 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0201 	orr.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40010000 	.word	0x40010000
 8005930:	40010400 	.word	0x40010400
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40014000 	.word	0x40014000
 8005944:	40001800 	.word	0x40001800

08005948 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2200      	movs	r2, #0
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f001 fa96 	bl	8006e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a2e      	ldr	r2, [pc, #184]	; (8005a20 <HAL_TIM_PWM_Stop+0xd8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d004      	beq.n	8005974 <HAL_TIM_PWM_Stop+0x2c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a2d      	ldr	r2, [pc, #180]	; (8005a24 <HAL_TIM_PWM_Stop+0xdc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d101      	bne.n	8005978 <HAL_TIM_PWM_Stop+0x30>
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <HAL_TIM_PWM_Stop+0x32>
 8005978:	2300      	movs	r3, #0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d017      	beq.n	80059ae <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6a1a      	ldr	r2, [r3, #32]
 8005984:	f241 1311 	movw	r3, #4369	; 0x1111
 8005988:	4013      	ands	r3, r2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10f      	bne.n	80059ae <HAL_TIM_PWM_Stop+0x66>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a1a      	ldr	r2, [r3, #32]
 8005994:	f240 4344 	movw	r3, #1092	; 0x444
 8005998:	4013      	ands	r3, r2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d107      	bne.n	80059ae <HAL_TIM_PWM_Stop+0x66>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a1a      	ldr	r2, [r3, #32]
 80059b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10f      	bne.n	80059de <HAL_TIM_PWM_Stop+0x96>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	f240 4344 	movw	r3, #1092	; 0x444
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d107      	bne.n	80059de <HAL_TIM_PWM_Stop+0x96>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0201 	bic.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d104      	bne.n	80059ee <HAL_TIM_PWM_Stop+0xa6>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ec:	e013      	b.n	8005a16 <HAL_TIM_PWM_Stop+0xce>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Stop+0xb6>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059fc:	e00b      	b.n	8005a16 <HAL_TIM_PWM_Stop+0xce>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_PWM_Stop+0xc6>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a0c:	e003      	b.n	8005a16 <HAL_TIM_PWM_Stop+0xce>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40010400 	.word	0x40010400

08005a28 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d109      	bne.n	8005a50 <HAL_TIM_PWM_Start_IT+0x28>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	bf14      	ite	ne
 8005a48:	2301      	movne	r3, #1
 8005a4a:	2300      	moveq	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	e022      	b.n	8005a96 <HAL_TIM_PWM_Start_IT+0x6e>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d109      	bne.n	8005a6a <HAL_TIM_PWM_Start_IT+0x42>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	bf14      	ite	ne
 8005a62:	2301      	movne	r3, #1
 8005a64:	2300      	moveq	r3, #0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	e015      	b.n	8005a96 <HAL_TIM_PWM_Start_IT+0x6e>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d109      	bne.n	8005a84 <HAL_TIM_PWM_Start_IT+0x5c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	bf14      	ite	ne
 8005a7c:	2301      	movne	r3, #1
 8005a7e:	2300      	moveq	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	e008      	b.n	8005a96 <HAL_TIM_PWM_Start_IT+0x6e>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	bf14      	ite	ne
 8005a90:	2301      	movne	r3, #1
 8005a92:	2300      	moveq	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e0c7      	b.n	8005c2e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_PWM_Start_IT+0x86>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aac:	e013      	b.n	8005ad6 <HAL_TIM_PWM_Start_IT+0xae>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_PWM_Start_IT+0x96>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005abc:	e00b      	b.n	8005ad6 <HAL_TIM_PWM_Start_IT+0xae>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d104      	bne.n	8005ace <HAL_TIM_PWM_Start_IT+0xa6>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005acc:	e003      	b.n	8005ad6 <HAL_TIM_PWM_Start_IT+0xae>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b0c      	cmp	r3, #12
 8005ada:	d841      	bhi.n	8005b60 <HAL_TIM_PWM_Start_IT+0x138>
 8005adc:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005b19 	.word	0x08005b19
 8005ae8:	08005b61 	.word	0x08005b61
 8005aec:	08005b61 	.word	0x08005b61
 8005af0:	08005b61 	.word	0x08005b61
 8005af4:	08005b2b 	.word	0x08005b2b
 8005af8:	08005b61 	.word	0x08005b61
 8005afc:	08005b61 	.word	0x08005b61
 8005b00:	08005b61 	.word	0x08005b61
 8005b04:	08005b3d 	.word	0x08005b3d
 8005b08:	08005b61 	.word	0x08005b61
 8005b0c:	08005b61 	.word	0x08005b61
 8005b10:	08005b61 	.word	0x08005b61
 8005b14:	08005b4f 	.word	0x08005b4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0202 	orr.w	r2, r2, #2
 8005b26:	60da      	str	r2, [r3, #12]
      break;
 8005b28:	e01d      	b.n	8005b66 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f042 0204 	orr.w	r2, r2, #4
 8005b38:	60da      	str	r2, [r3, #12]
      break;
 8005b3a:	e014      	b.n	8005b66 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0208 	orr.w	r2, r2, #8
 8005b4a:	60da      	str	r2, [r3, #12]
      break;
 8005b4c:	e00b      	b.n	8005b66 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 0210 	orr.w	r2, r2, #16
 8005b5c:	60da      	str	r2, [r3, #12]
      break;
 8005b5e:	e002      	b.n	8005b66 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
      break;
 8005b64:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d15f      	bne.n	8005c2c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2201      	movs	r2, #1
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f001 f989 	bl	8006e8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a2e      	ldr	r2, [pc, #184]	; (8005c38 <HAL_TIM_PWM_Start_IT+0x210>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d004      	beq.n	8005b8e <HAL_TIM_PWM_Start_IT+0x166>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a2c      	ldr	r2, [pc, #176]	; (8005c3c <HAL_TIM_PWM_Start_IT+0x214>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d101      	bne.n	8005b92 <HAL_TIM_PWM_Start_IT+0x16a>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <HAL_TIM_PWM_Start_IT+0x16c>
 8005b92:	2300      	movs	r3, #0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d007      	beq.n	8005ba8 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ba6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a22      	ldr	r2, [pc, #136]	; (8005c38 <HAL_TIM_PWM_Start_IT+0x210>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d022      	beq.n	8005bf8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bba:	d01d      	beq.n	8005bf8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1f      	ldr	r2, [pc, #124]	; (8005c40 <HAL_TIM_PWM_Start_IT+0x218>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d018      	beq.n	8005bf8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1e      	ldr	r2, [pc, #120]	; (8005c44 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1c      	ldr	r2, [pc, #112]	; (8005c48 <HAL_TIM_PWM_Start_IT+0x220>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a17      	ldr	r2, [pc, #92]	; (8005c3c <HAL_TIM_PWM_Start_IT+0x214>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d009      	beq.n	8005bf8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <HAL_TIM_PWM_Start_IT+0x224>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a17      	ldr	r2, [pc, #92]	; (8005c50 <HAL_TIM_PWM_Start_IT+0x228>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d111      	bne.n	8005c1c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b06      	cmp	r3, #6
 8005c08:	d010      	beq.n	8005c2c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0201 	orr.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1a:	e007      	b.n	8005c2c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40010400 	.word	0x40010400
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40000800 	.word	0x40000800
 8005c48:	40000c00 	.word	0x40000c00
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40001800 	.word	0x40001800

08005c54 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e041      	b.n	8005cea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fc fa0e 	bl	800209c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f000 fce6 	bl	8006664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_IC_Start_IT+0x1e>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	e013      	b.n	8005d3a <HAL_TIM_IC_Start_IT+0x46>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d104      	bne.n	8005d22 <HAL_TIM_IC_Start_IT+0x2e>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	e00b      	b.n	8005d3a <HAL_TIM_IC_Start_IT+0x46>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d104      	bne.n	8005d32 <HAL_TIM_IC_Start_IT+0x3e>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	e003      	b.n	8005d3a <HAL_TIM_IC_Start_IT+0x46>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d104      	bne.n	8005d4c <HAL_TIM_IC_Start_IT+0x58>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	e013      	b.n	8005d74 <HAL_TIM_IC_Start_IT+0x80>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d104      	bne.n	8005d5c <HAL_TIM_IC_Start_IT+0x68>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	e00b      	b.n	8005d74 <HAL_TIM_IC_Start_IT+0x80>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d104      	bne.n	8005d6c <HAL_TIM_IC_Start_IT+0x78>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	e003      	b.n	8005d74 <HAL_TIM_IC_Start_IT+0x80>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d76:	7bbb      	ldrb	r3, [r7, #14]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d102      	bne.n	8005d82 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d7c:	7b7b      	ldrb	r3, [r7, #13]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d001      	beq.n	8005d86 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e0cc      	b.n	8005f20 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d104      	bne.n	8005d96 <HAL_TIM_IC_Start_IT+0xa2>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d94:	e013      	b.n	8005dbe <HAL_TIM_IC_Start_IT+0xca>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d104      	bne.n	8005da6 <HAL_TIM_IC_Start_IT+0xb2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da4:	e00b      	b.n	8005dbe <HAL_TIM_IC_Start_IT+0xca>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d104      	bne.n	8005db6 <HAL_TIM_IC_Start_IT+0xc2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db4:	e003      	b.n	8005dbe <HAL_TIM_IC_Start_IT+0xca>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <HAL_TIM_IC_Start_IT+0xda>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dcc:	e013      	b.n	8005df6 <HAL_TIM_IC_Start_IT+0x102>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d104      	bne.n	8005dde <HAL_TIM_IC_Start_IT+0xea>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ddc:	e00b      	b.n	8005df6 <HAL_TIM_IC_Start_IT+0x102>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d104      	bne.n	8005dee <HAL_TIM_IC_Start_IT+0xfa>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dec:	e003      	b.n	8005df6 <HAL_TIM_IC_Start_IT+0x102>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2202      	movs	r2, #2
 8005df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b0c      	cmp	r3, #12
 8005dfa:	d841      	bhi.n	8005e80 <HAL_TIM_IC_Start_IT+0x18c>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <HAL_TIM_IC_Start_IT+0x110>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e39 	.word	0x08005e39
 8005e08:	08005e81 	.word	0x08005e81
 8005e0c:	08005e81 	.word	0x08005e81
 8005e10:	08005e81 	.word	0x08005e81
 8005e14:	08005e4b 	.word	0x08005e4b
 8005e18:	08005e81 	.word	0x08005e81
 8005e1c:	08005e81 	.word	0x08005e81
 8005e20:	08005e81 	.word	0x08005e81
 8005e24:	08005e5d 	.word	0x08005e5d
 8005e28:	08005e81 	.word	0x08005e81
 8005e2c:	08005e81 	.word	0x08005e81
 8005e30:	08005e81 	.word	0x08005e81
 8005e34:	08005e6f 	.word	0x08005e6f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0202 	orr.w	r2, r2, #2
 8005e46:	60da      	str	r2, [r3, #12]
      break;
 8005e48:	e01d      	b.n	8005e86 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0204 	orr.w	r2, r2, #4
 8005e58:	60da      	str	r2, [r3, #12]
      break;
 8005e5a:	e014      	b.n	8005e86 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0208 	orr.w	r2, r2, #8
 8005e6a:	60da      	str	r2, [r3, #12]
      break;
 8005e6c:	e00b      	b.n	8005e86 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0210 	orr.w	r2, r2, #16
 8005e7c:	60da      	str	r2, [r3, #12]
      break;
 8005e7e:	e002      	b.n	8005e86 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
      break;
 8005e84:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d148      	bne.n	8005f1e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2201      	movs	r2, #1
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fff9 	bl	8006e8c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a22      	ldr	r2, [pc, #136]	; (8005f28 <HAL_TIM_IC_Start_IT+0x234>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d022      	beq.n	8005eea <HAL_TIM_IC_Start_IT+0x1f6>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eac:	d01d      	beq.n	8005eea <HAL_TIM_IC_Start_IT+0x1f6>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <HAL_TIM_IC_Start_IT+0x238>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d018      	beq.n	8005eea <HAL_TIM_IC_Start_IT+0x1f6>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1c      	ldr	r2, [pc, #112]	; (8005f30 <HAL_TIM_IC_Start_IT+0x23c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <HAL_TIM_IC_Start_IT+0x1f6>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_TIM_IC_Start_IT+0x240>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00e      	beq.n	8005eea <HAL_TIM_IC_Start_IT+0x1f6>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a19      	ldr	r2, [pc, #100]	; (8005f38 <HAL_TIM_IC_Start_IT+0x244>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d009      	beq.n	8005eea <HAL_TIM_IC_Start_IT+0x1f6>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a18      	ldr	r2, [pc, #96]	; (8005f3c <HAL_TIM_IC_Start_IT+0x248>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d004      	beq.n	8005eea <HAL_TIM_IC_Start_IT+0x1f6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a16      	ldr	r2, [pc, #88]	; (8005f40 <HAL_TIM_IC_Start_IT+0x24c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d111      	bne.n	8005f0e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b06      	cmp	r3, #6
 8005efa:	d010      	beq.n	8005f1e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f0c:	e007      	b.n	8005f1e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0201 	orr.w	r2, r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40000c00 	.word	0x40000c00
 8005f38:	40010400 	.word	0x40010400
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40001800 	.word	0x40001800

08005f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d122      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d11b      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0202 	mvn.w	r2, #2
 8005f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fc fbf8 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 8005f8c:	e005      	b.n	8005f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fb4a 	bl	8006628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fb51 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d122      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d11b      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0204 	mvn.w	r2, #4
 8005fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fc fbce 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 8005fe0:	e005      	b.n	8005fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fb20 	bl	8006628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fb27 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0308 	and.w	r3, r3, #8
 8005ffe:	2b08      	cmp	r3, #8
 8006000:	d122      	bne.n	8006048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b08      	cmp	r3, #8
 800600e:	d11b      	bne.n	8006048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0208 	mvn.w	r2, #8
 8006018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2204      	movs	r2, #4
 800601e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fc fba4 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 8006034:	e005      	b.n	8006042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 faf6 	bl	8006628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fafd 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	2b10      	cmp	r3, #16
 8006054:	d122      	bne.n	800609c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0310 	and.w	r3, r3, #16
 8006060:	2b10      	cmp	r3, #16
 8006062:	d11b      	bne.n	800609c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0210 	mvn.w	r2, #16
 800606c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2208      	movs	r2, #8
 8006072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fc fb7a 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 8006088:	e005      	b.n	8006096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 facc 	bl	8006628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fad3 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d10e      	bne.n	80060c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d107      	bne.n	80060c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0201 	mvn.w	r2, #1
 80060c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fb f912 	bl	80012ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d2:	2b80      	cmp	r3, #128	; 0x80
 80060d4:	d10e      	bne.n	80060f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e0:	2b80      	cmp	r3, #128	; 0x80
 80060e2:	d107      	bne.n	80060f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 ff78 	bl	8006fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fe:	2b40      	cmp	r3, #64	; 0x40
 8006100:	d10e      	bne.n	8006120 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	d107      	bne.n	8006120 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fa98 	bl	8006650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b20      	cmp	r3, #32
 800612c:	d10e      	bne.n	800614c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b20      	cmp	r3, #32
 800613a:	d107      	bne.n	800614c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f06f 0220 	mvn.w	r2, #32
 8006144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 ff42 	bl	8006fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800614c:	bf00      	nop
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_TIM_IC_ConfigChannel+0x1e>
 800616e:	2302      	movs	r3, #2
 8006170:	e088      	b.n	8006284 <HAL_TIM_IC_ConfigChannel+0x130>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d11b      	bne.n	80061b8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6818      	ldr	r0, [r3, #0]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	6819      	ldr	r1, [r3, #0]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f000 fcb8 	bl	8006b04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 020c 	bic.w	r2, r2, #12
 80061a2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6999      	ldr	r1, [r3, #24]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	619a      	str	r2, [r3, #24]
 80061b6:	e060      	b.n	800627a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d11c      	bne.n	80061f8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6819      	ldr	r1, [r3, #0]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f000 fd3c 	bl	8006c4a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699a      	ldr	r2, [r3, #24]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061e0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6999      	ldr	r1, [r3, #24]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	021a      	lsls	r2, r3, #8
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	619a      	str	r2, [r3, #24]
 80061f6:	e040      	b.n	800627a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d11b      	bne.n	8006236 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	6819      	ldr	r1, [r3, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f000 fd89 	bl	8006d24 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 020c 	bic.w	r2, r2, #12
 8006220:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69d9      	ldr	r1, [r3, #28]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	61da      	str	r2, [r3, #28]
 8006234:	e021      	b.n	800627a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b0c      	cmp	r3, #12
 800623a:	d11c      	bne.n	8006276 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	6819      	ldr	r1, [r3, #0]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f000 fda6 	bl	8006d9c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69da      	ldr	r2, [r3, #28]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800625e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69d9      	ldr	r1, [r3, #28]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	61da      	str	r2, [r3, #28]
 8006274:	e001      	b.n	800627a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006282:	7dfb      	ldrb	r3, [r7, #23]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e0ae      	b.n	8006408 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	f200 809f 	bhi.w	80063f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062f5 	.word	0x080062f5
 80062c4:	080063f9 	.word	0x080063f9
 80062c8:	080063f9 	.word	0x080063f9
 80062cc:	080063f9 	.word	0x080063f9
 80062d0:	08006335 	.word	0x08006335
 80062d4:	080063f9 	.word	0x080063f9
 80062d8:	080063f9 	.word	0x080063f9
 80062dc:	080063f9 	.word	0x080063f9
 80062e0:	08006377 	.word	0x08006377
 80062e4:	080063f9 	.word	0x080063f9
 80062e8:	080063f9 	.word	0x080063f9
 80062ec:	080063f9 	.word	0x080063f9
 80062f0:	080063b7 	.word	0x080063b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 fa52 	bl	80067a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0208 	orr.w	r2, r2, #8
 800630e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0204 	bic.w	r2, r2, #4
 800631e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6999      	ldr	r1, [r3, #24]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	691a      	ldr	r2, [r3, #16]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	619a      	str	r2, [r3, #24]
      break;
 8006332:	e064      	b.n	80063fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	4618      	mov	r0, r3
 800633c:	f000 faa2 	bl	8006884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800634e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699a      	ldr	r2, [r3, #24]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6999      	ldr	r1, [r3, #24]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	021a      	lsls	r2, r3, #8
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	619a      	str	r2, [r3, #24]
      break;
 8006374:	e043      	b.n	80063fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 faf7 	bl	8006970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0208 	orr.w	r2, r2, #8
 8006390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69da      	ldr	r2, [r3, #28]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0204 	bic.w	r2, r2, #4
 80063a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69d9      	ldr	r1, [r3, #28]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	691a      	ldr	r2, [r3, #16]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	61da      	str	r2, [r3, #28]
      break;
 80063b4:	e023      	b.n	80063fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68b9      	ldr	r1, [r7, #8]
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fb4b 	bl	8006a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69da      	ldr	r2, [r3, #28]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69d9      	ldr	r1, [r3, #28]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	021a      	lsls	r2, r3, #8
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	61da      	str	r2, [r3, #28]
      break;
 80063f6:	e002      	b.n	80063fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	75fb      	strb	r3, [r7, #23]
      break;
 80063fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006406:	7dfb      	ldrb	r3, [r7, #23]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_TIM_ConfigClockSource+0x1c>
 8006428:	2302      	movs	r3, #2
 800642a:	e0b4      	b.n	8006596 <HAL_TIM_ConfigClockSource+0x186>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800644a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006464:	d03e      	beq.n	80064e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646a:	f200 8087 	bhi.w	800657c <HAL_TIM_ConfigClockSource+0x16c>
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006472:	f000 8086 	beq.w	8006582 <HAL_TIM_ConfigClockSource+0x172>
 8006476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647a:	d87f      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 800647c:	2b70      	cmp	r3, #112	; 0x70
 800647e:	d01a      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006480:	2b70      	cmp	r3, #112	; 0x70
 8006482:	d87b      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 8006484:	2b60      	cmp	r3, #96	; 0x60
 8006486:	d050      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x11a>
 8006488:	2b60      	cmp	r3, #96	; 0x60
 800648a:	d877      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 800648c:	2b50      	cmp	r3, #80	; 0x50
 800648e:	d03c      	beq.n	800650a <HAL_TIM_ConfigClockSource+0xfa>
 8006490:	2b50      	cmp	r3, #80	; 0x50
 8006492:	d873      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 8006494:	2b40      	cmp	r3, #64	; 0x40
 8006496:	d058      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x13a>
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d86f      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 800649c:	2b30      	cmp	r3, #48	; 0x30
 800649e:	d064      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x15a>
 80064a0:	2b30      	cmp	r3, #48	; 0x30
 80064a2:	d86b      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d060      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x15a>
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d867      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d05c      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x15a>
 80064b0:	2b10      	cmp	r3, #16
 80064b2:	d05a      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x15a>
 80064b4:	e062      	b.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6899      	ldr	r1, [r3, #8]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f000 fcc1 	bl	8006e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	609a      	str	r2, [r3, #8]
      break;
 80064e2:	e04f      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	6899      	ldr	r1, [r3, #8]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f000 fcaa 	bl	8006e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006506:	609a      	str	r2, [r3, #8]
      break;
 8006508:	e03c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	6859      	ldr	r1, [r3, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	461a      	mov	r2, r3
 8006518:	f000 fb68 	bl	8006bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2150      	movs	r1, #80	; 0x50
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fc77 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006528:	e02c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6859      	ldr	r1, [r3, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	461a      	mov	r2, r3
 8006538:	f000 fbc4 	bl	8006cc4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2160      	movs	r1, #96	; 0x60
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fc67 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006548:	e01c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6859      	ldr	r1, [r3, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	461a      	mov	r2, r3
 8006558:	f000 fb48 	bl	8006bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2140      	movs	r1, #64	; 0x40
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fc57 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006568:	e00c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f000 fc4e 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 800657a:	e003      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
      break;
 8006580:	e000      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b0c      	cmp	r3, #12
 80065b2:	d831      	bhi.n	8006618 <HAL_TIM_ReadCapturedValue+0x78>
 80065b4:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <HAL_TIM_ReadCapturedValue+0x1c>)
 80065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	080065f1 	.word	0x080065f1
 80065c0:	08006619 	.word	0x08006619
 80065c4:	08006619 	.word	0x08006619
 80065c8:	08006619 	.word	0x08006619
 80065cc:	080065fb 	.word	0x080065fb
 80065d0:	08006619 	.word	0x08006619
 80065d4:	08006619 	.word	0x08006619
 80065d8:	08006619 	.word	0x08006619
 80065dc:	08006605 	.word	0x08006605
 80065e0:	08006619 	.word	0x08006619
 80065e4:	08006619 	.word	0x08006619
 80065e8:	08006619 	.word	0x08006619
 80065ec:	0800660f 	.word	0x0800660f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	60fb      	str	r3, [r7, #12]

      break;
 80065f8:	e00f      	b.n	800661a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	60fb      	str	r3, [r7, #12]

      break;
 8006602:	e00a      	b.n	800661a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	60fb      	str	r3, [r7, #12]

      break;
 800660c:	e005      	b.n	800661a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	60fb      	str	r3, [r7, #12]

      break;
 8006616:	e000      	b.n	800661a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006618:	bf00      	nop
  }

  return tmpreg;
 800661a:	68fb      	ldr	r3, [r7, #12]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a40      	ldr	r2, [pc, #256]	; (8006778 <TIM_Base_SetConfig+0x114>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d013      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006682:	d00f      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a3d      	ldr	r2, [pc, #244]	; (800677c <TIM_Base_SetConfig+0x118>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00b      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a3c      	ldr	r2, [pc, #240]	; (8006780 <TIM_Base_SetConfig+0x11c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d007      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a3b      	ldr	r2, [pc, #236]	; (8006784 <TIM_Base_SetConfig+0x120>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a3a      	ldr	r2, [pc, #232]	; (8006788 <TIM_Base_SetConfig+0x124>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d108      	bne.n	80066b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a2f      	ldr	r2, [pc, #188]	; (8006778 <TIM_Base_SetConfig+0x114>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d02b      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c4:	d027      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a2c      	ldr	r2, [pc, #176]	; (800677c <TIM_Base_SetConfig+0x118>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d023      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a2b      	ldr	r2, [pc, #172]	; (8006780 <TIM_Base_SetConfig+0x11c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d01f      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a2a      	ldr	r2, [pc, #168]	; (8006784 <TIM_Base_SetConfig+0x120>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d01b      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a29      	ldr	r2, [pc, #164]	; (8006788 <TIM_Base_SetConfig+0x124>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d017      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a28      	ldr	r2, [pc, #160]	; (800678c <TIM_Base_SetConfig+0x128>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a27      	ldr	r2, [pc, #156]	; (8006790 <TIM_Base_SetConfig+0x12c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00f      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a26      	ldr	r2, [pc, #152]	; (8006794 <TIM_Base_SetConfig+0x130>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00b      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a25      	ldr	r2, [pc, #148]	; (8006798 <TIM_Base_SetConfig+0x134>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d007      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a24      	ldr	r2, [pc, #144]	; (800679c <TIM_Base_SetConfig+0x138>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a23      	ldr	r2, [pc, #140]	; (80067a0 <TIM_Base_SetConfig+0x13c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d108      	bne.n	8006728 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <TIM_Base_SetConfig+0x114>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_Base_SetConfig+0xf8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a0c      	ldr	r2, [pc, #48]	; (8006788 <TIM_Base_SetConfig+0x124>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d103      	bne.n	8006764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	615a      	str	r2, [r3, #20]
}
 800676a:	bf00      	nop
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40010000 	.word	0x40010000
 800677c:	40000400 	.word	0x40000400
 8006780:	40000800 	.word	0x40000800
 8006784:	40000c00 	.word	0x40000c00
 8006788:	40010400 	.word	0x40010400
 800678c:	40014000 	.word	0x40014000
 8006790:	40014400 	.word	0x40014400
 8006794:	40014800 	.word	0x40014800
 8006798:	40001800 	.word	0x40001800
 800679c:	40001c00 	.word	0x40001c00
 80067a0:	40002000 	.word	0x40002000

080067a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f023 0201 	bic.w	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 0302 	bic.w	r3, r3, #2
 80067ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a20      	ldr	r2, [pc, #128]	; (800687c <TIM_OC1_SetConfig+0xd8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_OC1_SetConfig+0x64>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a1f      	ldr	r2, [pc, #124]	; (8006880 <TIM_OC1_SetConfig+0xdc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d10c      	bne.n	8006822 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f023 0308 	bic.w	r3, r3, #8
 800680e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f023 0304 	bic.w	r3, r3, #4
 8006820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a15      	ldr	r2, [pc, #84]	; (800687c <TIM_OC1_SetConfig+0xd8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_OC1_SetConfig+0x8e>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a14      	ldr	r2, [pc, #80]	; (8006880 <TIM_OC1_SetConfig+0xdc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d111      	bne.n	8006856 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40010000 	.word	0x40010000
 8006880:	40010400 	.word	0x40010400

08006884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	f023 0210 	bic.w	r2, r3, #16
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f023 0320 	bic.w	r3, r3, #32
 80068ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a22      	ldr	r2, [pc, #136]	; (8006968 <TIM_OC2_SetConfig+0xe4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_OC2_SetConfig+0x68>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a21      	ldr	r2, [pc, #132]	; (800696c <TIM_OC2_SetConfig+0xe8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d10d      	bne.n	8006908 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a17      	ldr	r2, [pc, #92]	; (8006968 <TIM_OC2_SetConfig+0xe4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_OC2_SetConfig+0x94>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a16      	ldr	r2, [pc, #88]	; (800696c <TIM_OC2_SetConfig+0xe8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d113      	bne.n	8006940 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800691e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	4313      	orrs	r3, r2
 800693e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40010000 	.word	0x40010000
 800696c:	40010400 	.word	0x40010400

08006970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0303 	bic.w	r3, r3, #3
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a21      	ldr	r2, [pc, #132]	; (8006a50 <TIM_OC3_SetConfig+0xe0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d003      	beq.n	80069d6 <TIM_OC3_SetConfig+0x66>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a20      	ldr	r2, [pc, #128]	; (8006a54 <TIM_OC3_SetConfig+0xe4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d10d      	bne.n	80069f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a16      	ldr	r2, [pc, #88]	; (8006a50 <TIM_OC3_SetConfig+0xe0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d003      	beq.n	8006a02 <TIM_OC3_SetConfig+0x92>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a15      	ldr	r2, [pc, #84]	; (8006a54 <TIM_OC3_SetConfig+0xe4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d113      	bne.n	8006a2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	621a      	str	r2, [r3, #32]
}
 8006a44:	bf00      	nop
 8006a46:	371c      	adds	r7, #28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40010400 	.word	0x40010400

08006a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	021b      	lsls	r3, r3, #8
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	031b      	lsls	r3, r3, #12
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a12      	ldr	r2, [pc, #72]	; (8006afc <TIM_OC4_SetConfig+0xa4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <TIM_OC4_SetConfig+0x68>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a11      	ldr	r2, [pc, #68]	; (8006b00 <TIM_OC4_SetConfig+0xa8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d109      	bne.n	8006ad4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	019b      	lsls	r3, r3, #6
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40010000 	.word	0x40010000
 8006b00:	40010400 	.word	0x40010400

08006b04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f023 0201 	bic.w	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4a28      	ldr	r2, [pc, #160]	; (8006bd0 <TIM_TI1_SetConfig+0xcc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01b      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b38:	d017      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a25      	ldr	r2, [pc, #148]	; (8006bd4 <TIM_TI1_SetConfig+0xd0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d013      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4a24      	ldr	r2, [pc, #144]	; (8006bd8 <TIM_TI1_SetConfig+0xd4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00f      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4a23      	ldr	r2, [pc, #140]	; (8006bdc <TIM_TI1_SetConfig+0xd8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00b      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a22      	ldr	r2, [pc, #136]	; (8006be0 <TIM_TI1_SetConfig+0xdc>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d007      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4a21      	ldr	r2, [pc, #132]	; (8006be4 <TIM_TI1_SetConfig+0xe0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d003      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4a20      	ldr	r2, [pc, #128]	; (8006be8 <TIM_TI1_SetConfig+0xe4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d101      	bne.n	8006b6e <TIM_TI1_SetConfig+0x6a>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e000      	b.n	8006b70 <TIM_TI1_SetConfig+0x6c>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d008      	beq.n	8006b86 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f023 0303 	bic.w	r3, r3, #3
 8006b7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e003      	b.n	8006b8e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f043 0301 	orr.w	r3, r3, #1
 8006b8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f023 030a 	bic.w	r3, r3, #10
 8006ba8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f003 030a 	and.w	r3, r3, #10
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40010400 	.word	0x40010400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40001800 	.word	0x40001800

08006bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f023 0201 	bic.w	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 030a 	bic.w	r3, r3, #10
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
 8006c56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f023 0210 	bic.w	r2, r3, #16
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	031b      	lsls	r3, r3, #12
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	621a      	str	r2, [r3, #32]
}
 8006cb8:	bf00      	nop
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	f023 0210 	bic.w	r2, r3, #16
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	031b      	lsls	r3, r3, #12
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	621a      	str	r2, [r3, #32]
}
 8006d18:	bf00      	nop
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f023 0303 	bic.w	r3, r3, #3
 8006d50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	621a      	str	r2, [r3, #32]
}
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	031b      	lsls	r3, r3, #12
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006dee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	031b      	lsls	r3, r3, #12
 8006df4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f043 0307 	orr.w	r3, r3, #7
 8006e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	609a      	str	r2, [r3, #8]
}
 8006e40:	bf00      	nop
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	021a      	lsls	r2, r3, #8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	609a      	str	r2, [r3, #8]
}
 8006e80:	bf00      	nop
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f003 031f 	and.w	r3, r3, #31
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1a      	ldr	r2, [r3, #32]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	43db      	mvns	r3, r3
 8006eae:	401a      	ands	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1a      	ldr	r2, [r3, #32]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
	...

08006ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e05a      	b.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a21      	ldr	r2, [pc, #132]	; (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d022      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3c:	d01d      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1d      	ldr	r2, [pc, #116]	; (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d018      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1b      	ldr	r2, [pc, #108]	; (8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d013      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1a      	ldr	r2, [pc, #104]	; (8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00e      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a18      	ldr	r2, [pc, #96]	; (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d009      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a17      	ldr	r2, [pc, #92]	; (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d004      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a15      	ldr	r2, [pc, #84]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d10c      	bne.n	8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40010000 	.word	0x40010000
 8006fb8:	40000400 	.word	0x40000400
 8006fbc:	40000800 	.word	0x40000800
 8006fc0:	40000c00 	.word	0x40000c00
 8006fc4:	40010400 	.word	0x40010400
 8006fc8:	40014000 	.word	0x40014000
 8006fcc:	40001800 	.word	0x40001800

08006fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e03f      	b.n	800708a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fb f994 	bl	800234c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2224      	movs	r2, #36	; 0x24
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800703a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fddf 	bl	8007c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	691a      	ldr	r2, [r3, #16]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	695a      	ldr	r2, [r3, #20]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b08a      	sub	sp, #40	; 0x28
 8007096:	af02      	add	r7, sp, #8
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	603b      	str	r3, [r7, #0]
 800709e:	4613      	mov	r3, r2
 80070a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d17c      	bne.n	80071ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <HAL_UART_Transmit+0x2c>
 80070b8:	88fb      	ldrh	r3, [r7, #6]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e075      	b.n	80071ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_UART_Transmit+0x3e>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e06e      	b.n	80071ae <HAL_UART_Transmit+0x11c>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2221      	movs	r2, #33	; 0x21
 80070e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070e6:	f7fb fd0d 	bl	8002b04 <HAL_GetTick>
 80070ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	88fa      	ldrh	r2, [r7, #6]
 80070f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	88fa      	ldrh	r2, [r7, #6]
 80070f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007100:	d108      	bne.n	8007114 <HAL_UART_Transmit+0x82>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800710a:	2300      	movs	r3, #0
 800710c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	61bb      	str	r3, [r7, #24]
 8007112:	e003      	b.n	800711c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007118:	2300      	movs	r3, #0
 800711a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007124:	e02a      	b.n	800717c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2200      	movs	r2, #0
 800712e:	2180      	movs	r1, #128	; 0x80
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 fb1f 	bl	8007774 <UART_WaitOnFlagUntilTimeout>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e036      	b.n	80071ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10b      	bne.n	800715e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	3302      	adds	r3, #2
 800715a:	61bb      	str	r3, [r7, #24]
 800715c:	e007      	b.n	800716e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	781a      	ldrb	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	3301      	adds	r3, #1
 800716c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1cf      	bne.n	8007126 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2200      	movs	r2, #0
 800718e:	2140      	movs	r1, #64	; 0x40
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 faef 	bl	8007774 <UART_WaitOnFlagUntilTimeout>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e006      	b.n	80071ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	e000      	b.n	80071ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071ac:	2302      	movs	r3, #2
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	4613      	mov	r3, r2
 80071c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	d11d      	bne.n	800720c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_UART_Receive_IT+0x26>
 80071d6:	88fb      	ldrh	r3, [r7, #6]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e016      	b.n	800720e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_UART_Receive_IT+0x38>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e00f      	b.n	800720e <HAL_UART_Receive_IT+0x58>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071fc:	88fb      	ldrh	r3, [r7, #6]
 80071fe:	461a      	mov	r2, r3
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 fb24 	bl	8007850 <UART_Start_Receive_IT>
 8007208:	4603      	mov	r3, r0
 800720a:	e000      	b.n	800720e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800720c:	2302      	movs	r3, #2
  }
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b0ba      	sub	sp, #232	; 0xe8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800723e:	2300      	movs	r3, #0
 8007240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007244:	2300      	movs	r3, #0
 8007246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800724a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10f      	bne.n	800727e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d009      	beq.n	800727e <HAL_UART_IRQHandler+0x66>
 800726a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fc07 	bl	8007a8a <UART_Receive_IT>
      return;
 800727c:	e256      	b.n	800772c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800727e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80de 	beq.w	8007444 <HAL_UART_IRQHandler+0x22c>
 8007288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d106      	bne.n	80072a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007298:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 80d1 	beq.w	8007444 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00b      	beq.n	80072c6 <HAL_UART_IRQHandler+0xae>
 80072ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d005      	beq.n	80072c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	f043 0201 	orr.w	r2, r3, #1
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00b      	beq.n	80072ea <HAL_UART_IRQHandler+0xd2>
 80072d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d005      	beq.n	80072ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	f043 0202 	orr.w	r2, r3, #2
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00b      	beq.n	800730e <HAL_UART_IRQHandler+0xf6>
 80072f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d005      	beq.n	800730e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	f043 0204 	orr.w	r2, r3, #4
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800730e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007312:	f003 0308 	and.w	r3, r3, #8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d011      	beq.n	800733e <HAL_UART_IRQHandler+0x126>
 800731a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d105      	bne.n	8007332 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f043 0208 	orr.w	r2, r3, #8
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 81ed 	beq.w	8007722 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b00      	cmp	r3, #0
 8007352:	d008      	beq.n	8007366 <HAL_UART_IRQHandler+0x14e>
 8007354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007358:	f003 0320 	and.w	r3, r3, #32
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fb92 	bl	8007a8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b40      	cmp	r3, #64	; 0x40
 8007372:	bf0c      	ite	eq
 8007374:	2301      	moveq	r3, #1
 8007376:	2300      	movne	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <HAL_UART_IRQHandler+0x17a>
 800738a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800738e:	2b00      	cmp	r3, #0
 8007390:	d04f      	beq.n	8007432 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fa9a 	bl	80078cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a2:	2b40      	cmp	r3, #64	; 0x40
 80073a4:	d141      	bne.n	800742a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3314      	adds	r3, #20
 80073ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3314      	adds	r3, #20
 80073ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1d9      	bne.n	80073a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d013      	beq.n	8007422 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	4a7d      	ldr	r2, [pc, #500]	; (80075f4 <HAL_UART_IRQHandler+0x3dc>)
 8007400:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	4618      	mov	r0, r3
 8007408:	f7fb fd2d 	bl	8002e66 <HAL_DMA_Abort_IT>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d016      	beq.n	8007440 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800741c:	4610      	mov	r0, r2
 800741e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007420:	e00e      	b.n	8007440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f990 	bl	8007748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007428:	e00a      	b.n	8007440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f98c 	bl	8007748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007430:	e006      	b.n	8007440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f988 	bl	8007748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800743e:	e170      	b.n	8007722 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007440:	bf00      	nop
    return;
 8007442:	e16e      	b.n	8007722 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007448:	2b01      	cmp	r3, #1
 800744a:	f040 814a 	bne.w	80076e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800744e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007452:	f003 0310 	and.w	r3, r3, #16
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 8143 	beq.w	80076e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800745c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007460:	f003 0310 	and.w	r3, r3, #16
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 813c 	beq.w	80076e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800746a:	2300      	movs	r3, #0
 800746c:	60bb      	str	r3, [r7, #8]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	60bb      	str	r3, [r7, #8]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	60bb      	str	r3, [r7, #8]
 800747e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	f040 80b4 	bne.w	80075f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800749c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 8140 	beq.w	8007726 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074ae:	429a      	cmp	r2, r3
 80074b0:	f080 8139 	bcs.w	8007726 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c6:	f000 8088 	beq.w	80075da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	330c      	adds	r3, #12
 80074d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	330c      	adds	r3, #12
 80074f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80074f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007502:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800750e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1d9      	bne.n	80074ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3314      	adds	r3, #20
 800751c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3314      	adds	r3, #20
 8007536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800753a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800753e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800754c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e1      	bne.n	8007516 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3314      	adds	r3, #20
 8007558:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3314      	adds	r3, #20
 8007572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007576:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007578:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800757c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e3      	bne.n	8007552 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	330c      	adds	r3, #12
 800759e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a2:	e853 3f00 	ldrex	r3, [r3]
 80075a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075aa:	f023 0310 	bic.w	r3, r3, #16
 80075ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80075be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e3      	bne.n	8007598 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fb fbd6 	bl	8002d86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f8b6 	bl	800775c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075f0:	e099      	b.n	8007726 <HAL_UART_IRQHandler+0x50e>
 80075f2:	bf00      	nop
 80075f4:	08007993 	.word	0x08007993
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007600:	b29b      	uxth	r3, r3
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 808b 	beq.w	800772a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8086 	beq.w	800772a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	330c      	adds	r3, #12
 8007624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800762e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	330c      	adds	r3, #12
 800763e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007642:	647a      	str	r2, [r7, #68]	; 0x44
 8007644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e3      	bne.n	800761e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3314      	adds	r3, #20
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	623b      	str	r3, [r7, #32]
   return(result);
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	f023 0301 	bic.w	r3, r3, #1
 800766c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3314      	adds	r3, #20
 8007676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800767a:	633a      	str	r2, [r7, #48]	; 0x30
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e3      	bne.n	8007656 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0310 	bic.w	r3, r3, #16
 80076b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	330c      	adds	r3, #12
 80076bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80076c0:	61fa      	str	r2, [r7, #28]
 80076c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	69b9      	ldr	r1, [r7, #24]
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	617b      	str	r3, [r7, #20]
   return(result);
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e3      	bne.n	800769c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f83e 	bl	800775c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076e0:	e023      	b.n	800772a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d009      	beq.n	8007702 <HAL_UART_IRQHandler+0x4ea>
 80076ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f95d 	bl	80079ba <UART_Transmit_IT>
    return;
 8007700:	e014      	b.n	800772c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00e      	beq.n	800772c <HAL_UART_IRQHandler+0x514>
 800770e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007716:	2b00      	cmp	r3, #0
 8007718:	d008      	beq.n	800772c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f99d 	bl	8007a5a <UART_EndTransmit_IT>
    return;
 8007720:	e004      	b.n	800772c <HAL_UART_IRQHandler+0x514>
    return;
 8007722:	bf00      	nop
 8007724:	e002      	b.n	800772c <HAL_UART_IRQHandler+0x514>
      return;
 8007726:	bf00      	nop
 8007728:	e000      	b.n	800772c <HAL_UART_IRQHandler+0x514>
      return;
 800772a:	bf00      	nop
  }
}
 800772c:	37e8      	adds	r7, #232	; 0xe8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop

08007734 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b090      	sub	sp, #64	; 0x40
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	4613      	mov	r3, r2
 8007782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007784:	e050      	b.n	8007828 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778c:	d04c      	beq.n	8007828 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800778e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007790:	2b00      	cmp	r3, #0
 8007792:	d007      	beq.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007794:	f7fb f9b6 	bl	8002b04 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d241      	bcs.n	8007828 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	330c      	adds	r3, #12
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	330c      	adds	r3, #12
 80077c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077c4:	637a      	str	r2, [r7, #52]	; 0x34
 80077c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e5      	bne.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3314      	adds	r3, #20
 80077de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	613b      	str	r3, [r7, #16]
   return(result);
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f023 0301 	bic.w	r3, r3, #1
 80077ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3314      	adds	r3, #20
 80077f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077f8:	623a      	str	r2, [r7, #32]
 80077fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	69f9      	ldr	r1, [r7, #28]
 80077fe:	6a3a      	ldr	r2, [r7, #32]
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	61bb      	str	r3, [r7, #24]
   return(result);
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e5      	bne.n	80077d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e00f      	b.n	8007848 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	4013      	ands	r3, r2
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	429a      	cmp	r2, r3
 8007836:	bf0c      	ite	eq
 8007838:	2301      	moveq	r3, #1
 800783a:	2300      	movne	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	461a      	mov	r2, r3
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	429a      	cmp	r2, r3
 8007844:	d09f      	beq.n	8007786 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3740      	adds	r7, #64	; 0x40
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	88fa      	ldrh	r2, [r7, #6]
 8007868:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	88fa      	ldrh	r2, [r7, #6]
 800786e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2222      	movs	r2, #34	; 0x22
 800787a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d007      	beq.n	800789e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800789c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	695a      	ldr	r2, [r3, #20]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f042 0201 	orr.w	r2, r2, #1
 80078ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0220 	orr.w	r2, r2, #32
 80078bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b095      	sub	sp, #84	; 0x54
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	330c      	adds	r3, #12
 80078da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	330c      	adds	r3, #12
 80078f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078f4:	643a      	str	r2, [r7, #64]	; 0x40
 80078f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e5      	bne.n	80078d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3314      	adds	r3, #20
 800790e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	61fb      	str	r3, [r7, #28]
   return(result);
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	f023 0301 	bic.w	r3, r3, #1
 800791e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3314      	adds	r3, #20
 8007926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007928:	62fa      	str	r2, [r7, #44]	; 0x2c
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800792e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e5      	bne.n	8007908 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007940:	2b01      	cmp	r3, #1
 8007942:	d119      	bne.n	8007978 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	330c      	adds	r3, #12
 800794a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	60bb      	str	r3, [r7, #8]
   return(result);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f023 0310 	bic.w	r3, r3, #16
 800795a:	647b      	str	r3, [r7, #68]	; 0x44
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007964:	61ba      	str	r2, [r7, #24]
 8007966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6979      	ldr	r1, [r7, #20]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	613b      	str	r3, [r7, #16]
   return(result);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e5      	bne.n	8007944 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007986:	bf00      	nop
 8007988:	3754      	adds	r7, #84	; 0x54
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f7ff fecb 	bl	8007748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079b2:	bf00      	nop
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b21      	cmp	r3, #33	; 0x21
 80079cc:	d13e      	bne.n	8007a4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d6:	d114      	bne.n	8007a02 <UART_Transmit_IT+0x48>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d110      	bne.n	8007a02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	1c9a      	adds	r2, r3, #2
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	621a      	str	r2, [r3, #32]
 8007a00:	e008      	b.n	8007a14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	1c59      	adds	r1, r3, #1
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6211      	str	r1, [r2, #32]
 8007a0c:	781a      	ldrb	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	4619      	mov	r1, r3
 8007a22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10f      	bne.n	8007a48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	e000      	b.n	8007a4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a4c:	2302      	movs	r3, #2
  }
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff fe5a 	bl	8007734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b08c      	sub	sp, #48	; 0x30
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b22      	cmp	r3, #34	; 0x22
 8007a9c:	f040 80ab 	bne.w	8007bf6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa8:	d117      	bne.n	8007ada <UART_Receive_IT+0x50>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d113      	bne.n	8007ada <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007acc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	1c9a      	adds	r2, r3, #2
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ad8:	e026      	b.n	8007b28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aec:	d007      	beq.n	8007afe <UART_Receive_IT+0x74>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <UART_Receive_IT+0x82>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d106      	bne.n	8007b0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	701a      	strb	r2, [r3, #0]
 8007b0a:	e008      	b.n	8007b1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	4619      	mov	r1, r3
 8007b36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d15a      	bne.n	8007bf2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0220 	bic.w	r2, r2, #32
 8007b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695a      	ldr	r2, [r3, #20]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0201 	bic.w	r2, r2, #1
 8007b6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d135      	bne.n	8007be8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	330c      	adds	r3, #12
 8007b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	613b      	str	r3, [r7, #16]
   return(result);
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f023 0310 	bic.w	r3, r3, #16
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	330c      	adds	r3, #12
 8007ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba2:	623a      	str	r2, [r7, #32]
 8007ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	69f9      	ldr	r1, [r7, #28]
 8007ba8:	6a3a      	ldr	r2, [r7, #32]
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e5      	bne.n	8007b82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	2b10      	cmp	r3, #16
 8007bc2:	d10a      	bne.n	8007bda <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fdbb 	bl	800775c <HAL_UARTEx_RxEventCallback>
 8007be6:	e002      	b.n	8007bee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7fa fd81 	bl	80026f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e002      	b.n	8007bf8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e000      	b.n	8007bf8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007bf6:	2302      	movs	r3, #2
  }
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3730      	adds	r7, #48	; 0x30
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c04:	b0c0      	sub	sp, #256	; 0x100
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1c:	68d9      	ldr	r1, [r3, #12]
 8007c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	ea40 0301 	orr.w	r3, r0, r1
 8007c28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	431a      	orrs	r2, r3
 8007c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c58:	f021 010c 	bic.w	r1, r1, #12
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c66:	430b      	orrs	r3, r1
 8007c68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c7a:	6999      	ldr	r1, [r3, #24]
 8007c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	ea40 0301 	orr.w	r3, r0, r1
 8007c86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	4b8f      	ldr	r3, [pc, #572]	; (8007ecc <UART_SetConfig+0x2cc>)
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d005      	beq.n	8007ca0 <UART_SetConfig+0xa0>
 8007c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	4b8d      	ldr	r3, [pc, #564]	; (8007ed0 <UART_SetConfig+0x2d0>)
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d104      	bne.n	8007caa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ca0:	f7fd f872 	bl	8004d88 <HAL_RCC_GetPCLK2Freq>
 8007ca4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ca8:	e003      	b.n	8007cb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007caa:	f7fd f859 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 8007cae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cbc:	f040 810c 	bne.w	8007ed8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	1891      	adds	r1, r2, r2
 8007cd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cda:	415b      	adcs	r3, r3
 8007cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	eb12 0801 	adds.w	r8, r2, r1
 8007ce8:	4629      	mov	r1, r5
 8007cea:	eb43 0901 	adc.w	r9, r3, r1
 8007cee:	f04f 0200 	mov.w	r2, #0
 8007cf2:	f04f 0300 	mov.w	r3, #0
 8007cf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d02:	4690      	mov	r8, r2
 8007d04:	4699      	mov	r9, r3
 8007d06:	4623      	mov	r3, r4
 8007d08:	eb18 0303 	adds.w	r3, r8, r3
 8007d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d10:	462b      	mov	r3, r5
 8007d12:	eb49 0303 	adc.w	r3, r9, r3
 8007d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d2e:	460b      	mov	r3, r1
 8007d30:	18db      	adds	r3, r3, r3
 8007d32:	653b      	str	r3, [r7, #80]	; 0x50
 8007d34:	4613      	mov	r3, r2
 8007d36:	eb42 0303 	adc.w	r3, r2, r3
 8007d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8007d3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d44:	f7f8 fdb2 	bl	80008ac <__aeabi_uldivmod>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4b61      	ldr	r3, [pc, #388]	; (8007ed4 <UART_SetConfig+0x2d4>)
 8007d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	011c      	lsls	r4, r3, #4
 8007d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d68:	4642      	mov	r2, r8
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	1891      	adds	r1, r2, r2
 8007d6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d70:	415b      	adcs	r3, r3
 8007d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d78:	4641      	mov	r1, r8
 8007d7a:	eb12 0a01 	adds.w	sl, r2, r1
 8007d7e:	4649      	mov	r1, r9
 8007d80:	eb43 0b01 	adc.w	fp, r3, r1
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d98:	4692      	mov	sl, r2
 8007d9a:	469b      	mov	fp, r3
 8007d9c:	4643      	mov	r3, r8
 8007d9e:	eb1a 0303 	adds.w	r3, sl, r3
 8007da2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007da6:	464b      	mov	r3, r9
 8007da8:	eb4b 0303 	adc.w	r3, fp, r3
 8007dac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007dc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	18db      	adds	r3, r3, r3
 8007dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8007dca:	4613      	mov	r3, r2
 8007dcc:	eb42 0303 	adc.w	r3, r2, r3
 8007dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8007dd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007dd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007dda:	f7f8 fd67 	bl	80008ac <__aeabi_uldivmod>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	4611      	mov	r1, r2
 8007de4:	4b3b      	ldr	r3, [pc, #236]	; (8007ed4 <UART_SetConfig+0x2d4>)
 8007de6:	fba3 2301 	umull	r2, r3, r3, r1
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	2264      	movs	r2, #100	; 0x64
 8007dee:	fb02 f303 	mul.w	r3, r2, r3
 8007df2:	1acb      	subs	r3, r1, r3
 8007df4:	00db      	lsls	r3, r3, #3
 8007df6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007dfa:	4b36      	ldr	r3, [pc, #216]	; (8007ed4 <UART_SetConfig+0x2d4>)
 8007dfc:	fba3 2302 	umull	r2, r3, r3, r2
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e08:	441c      	add	r4, r3
 8007e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e1c:	4642      	mov	r2, r8
 8007e1e:	464b      	mov	r3, r9
 8007e20:	1891      	adds	r1, r2, r2
 8007e22:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e24:	415b      	adcs	r3, r3
 8007e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e2c:	4641      	mov	r1, r8
 8007e2e:	1851      	adds	r1, r2, r1
 8007e30:	6339      	str	r1, [r7, #48]	; 0x30
 8007e32:	4649      	mov	r1, r9
 8007e34:	414b      	adcs	r3, r1
 8007e36:	637b      	str	r3, [r7, #52]	; 0x34
 8007e38:	f04f 0200 	mov.w	r2, #0
 8007e3c:	f04f 0300 	mov.w	r3, #0
 8007e40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e44:	4659      	mov	r1, fp
 8007e46:	00cb      	lsls	r3, r1, #3
 8007e48:	4651      	mov	r1, sl
 8007e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e4e:	4651      	mov	r1, sl
 8007e50:	00ca      	lsls	r2, r1, #3
 8007e52:	4610      	mov	r0, r2
 8007e54:	4619      	mov	r1, r3
 8007e56:	4603      	mov	r3, r0
 8007e58:	4642      	mov	r2, r8
 8007e5a:	189b      	adds	r3, r3, r2
 8007e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e60:	464b      	mov	r3, r9
 8007e62:	460a      	mov	r2, r1
 8007e64:	eb42 0303 	adc.w	r3, r2, r3
 8007e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e80:	460b      	mov	r3, r1
 8007e82:	18db      	adds	r3, r3, r3
 8007e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e86:	4613      	mov	r3, r2
 8007e88:	eb42 0303 	adc.w	r3, r2, r3
 8007e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e96:	f7f8 fd09 	bl	80008ac <__aeabi_uldivmod>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ed4 <UART_SetConfig+0x2d4>)
 8007ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ea4:	095b      	lsrs	r3, r3, #5
 8007ea6:	2164      	movs	r1, #100	; 0x64
 8007ea8:	fb01 f303 	mul.w	r3, r1, r3
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	3332      	adds	r3, #50	; 0x32
 8007eb2:	4a08      	ldr	r2, [pc, #32]	; (8007ed4 <UART_SetConfig+0x2d4>)
 8007eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb8:	095b      	lsrs	r3, r3, #5
 8007eba:	f003 0207 	and.w	r2, r3, #7
 8007ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4422      	add	r2, r4
 8007ec6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ec8:	e105      	b.n	80080d6 <UART_SetConfig+0x4d6>
 8007eca:	bf00      	nop
 8007ecc:	40011000 	.word	0x40011000
 8007ed0:	40011400 	.word	0x40011400
 8007ed4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007edc:	2200      	movs	r2, #0
 8007ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ee2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ee6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007eea:	4642      	mov	r2, r8
 8007eec:	464b      	mov	r3, r9
 8007eee:	1891      	adds	r1, r2, r2
 8007ef0:	6239      	str	r1, [r7, #32]
 8007ef2:	415b      	adcs	r3, r3
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007efa:	4641      	mov	r1, r8
 8007efc:	1854      	adds	r4, r2, r1
 8007efe:	4649      	mov	r1, r9
 8007f00:	eb43 0501 	adc.w	r5, r3, r1
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	00eb      	lsls	r3, r5, #3
 8007f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f12:	00e2      	lsls	r2, r4, #3
 8007f14:	4614      	mov	r4, r2
 8007f16:	461d      	mov	r5, r3
 8007f18:	4643      	mov	r3, r8
 8007f1a:	18e3      	adds	r3, r4, r3
 8007f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f20:	464b      	mov	r3, r9
 8007f22:	eb45 0303 	adc.w	r3, r5, r3
 8007f26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	f04f 0300 	mov.w	r3, #0
 8007f42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f46:	4629      	mov	r1, r5
 8007f48:	008b      	lsls	r3, r1, #2
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f50:	4621      	mov	r1, r4
 8007f52:	008a      	lsls	r2, r1, #2
 8007f54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f58:	f7f8 fca8 	bl	80008ac <__aeabi_uldivmod>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4b60      	ldr	r3, [pc, #384]	; (80080e4 <UART_SetConfig+0x4e4>)
 8007f62:	fba3 2302 	umull	r2, r3, r3, r2
 8007f66:	095b      	lsrs	r3, r3, #5
 8007f68:	011c      	lsls	r4, r3, #4
 8007f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f7c:	4642      	mov	r2, r8
 8007f7e:	464b      	mov	r3, r9
 8007f80:	1891      	adds	r1, r2, r2
 8007f82:	61b9      	str	r1, [r7, #24]
 8007f84:	415b      	adcs	r3, r3
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f8c:	4641      	mov	r1, r8
 8007f8e:	1851      	adds	r1, r2, r1
 8007f90:	6139      	str	r1, [r7, #16]
 8007f92:	4649      	mov	r1, r9
 8007f94:	414b      	adcs	r3, r1
 8007f96:	617b      	str	r3, [r7, #20]
 8007f98:	f04f 0200 	mov.w	r2, #0
 8007f9c:	f04f 0300 	mov.w	r3, #0
 8007fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fa4:	4659      	mov	r1, fp
 8007fa6:	00cb      	lsls	r3, r1, #3
 8007fa8:	4651      	mov	r1, sl
 8007faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fae:	4651      	mov	r1, sl
 8007fb0:	00ca      	lsls	r2, r1, #3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4642      	mov	r2, r8
 8007fba:	189b      	adds	r3, r3, r2
 8007fbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fc0:	464b      	mov	r3, r9
 8007fc2:	460a      	mov	r2, r1
 8007fc4:	eb42 0303 	adc.w	r3, r2, r3
 8007fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	008b      	lsls	r3, r1, #2
 8007fe8:	4641      	mov	r1, r8
 8007fea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fee:	4641      	mov	r1, r8
 8007ff0:	008a      	lsls	r2, r1, #2
 8007ff2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007ff6:	f7f8 fc59 	bl	80008ac <__aeabi_uldivmod>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4b39      	ldr	r3, [pc, #228]	; (80080e4 <UART_SetConfig+0x4e4>)
 8008000:	fba3 1302 	umull	r1, r3, r3, r2
 8008004:	095b      	lsrs	r3, r3, #5
 8008006:	2164      	movs	r1, #100	; 0x64
 8008008:	fb01 f303 	mul.w	r3, r1, r3
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	3332      	adds	r3, #50	; 0x32
 8008012:	4a34      	ldr	r2, [pc, #208]	; (80080e4 <UART_SetConfig+0x4e4>)
 8008014:	fba2 2303 	umull	r2, r3, r2, r3
 8008018:	095b      	lsrs	r3, r3, #5
 800801a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800801e:	441c      	add	r4, r3
 8008020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008024:	2200      	movs	r2, #0
 8008026:	673b      	str	r3, [r7, #112]	; 0x70
 8008028:	677a      	str	r2, [r7, #116]	; 0x74
 800802a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800802e:	4642      	mov	r2, r8
 8008030:	464b      	mov	r3, r9
 8008032:	1891      	adds	r1, r2, r2
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	415b      	adcs	r3, r3
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800803e:	4641      	mov	r1, r8
 8008040:	1851      	adds	r1, r2, r1
 8008042:	6039      	str	r1, [r7, #0]
 8008044:	4649      	mov	r1, r9
 8008046:	414b      	adcs	r3, r1
 8008048:	607b      	str	r3, [r7, #4]
 800804a:	f04f 0200 	mov.w	r2, #0
 800804e:	f04f 0300 	mov.w	r3, #0
 8008052:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008056:	4659      	mov	r1, fp
 8008058:	00cb      	lsls	r3, r1, #3
 800805a:	4651      	mov	r1, sl
 800805c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008060:	4651      	mov	r1, sl
 8008062:	00ca      	lsls	r2, r1, #3
 8008064:	4610      	mov	r0, r2
 8008066:	4619      	mov	r1, r3
 8008068:	4603      	mov	r3, r0
 800806a:	4642      	mov	r2, r8
 800806c:	189b      	adds	r3, r3, r2
 800806e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008070:	464b      	mov	r3, r9
 8008072:	460a      	mov	r2, r1
 8008074:	eb42 0303 	adc.w	r3, r2, r3
 8008078:	66fb      	str	r3, [r7, #108]	; 0x6c
 800807a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	663b      	str	r3, [r7, #96]	; 0x60
 8008084:	667a      	str	r2, [r7, #100]	; 0x64
 8008086:	f04f 0200 	mov.w	r2, #0
 800808a:	f04f 0300 	mov.w	r3, #0
 800808e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008092:	4649      	mov	r1, r9
 8008094:	008b      	lsls	r3, r1, #2
 8008096:	4641      	mov	r1, r8
 8008098:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800809c:	4641      	mov	r1, r8
 800809e:	008a      	lsls	r2, r1, #2
 80080a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80080a4:	f7f8 fc02 	bl	80008ac <__aeabi_uldivmod>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <UART_SetConfig+0x4e4>)
 80080ae:	fba3 1302 	umull	r1, r3, r3, r2
 80080b2:	095b      	lsrs	r3, r3, #5
 80080b4:	2164      	movs	r1, #100	; 0x64
 80080b6:	fb01 f303 	mul.w	r3, r1, r3
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	011b      	lsls	r3, r3, #4
 80080be:	3332      	adds	r3, #50	; 0x32
 80080c0:	4a08      	ldr	r2, [pc, #32]	; (80080e4 <UART_SetConfig+0x4e4>)
 80080c2:	fba2 2303 	umull	r2, r3, r2, r3
 80080c6:	095b      	lsrs	r3, r3, #5
 80080c8:	f003 020f 	and.w	r2, r3, #15
 80080cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4422      	add	r2, r4
 80080d4:	609a      	str	r2, [r3, #8]
}
 80080d6:	bf00      	nop
 80080d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80080dc:	46bd      	mov	sp, r7
 80080de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080e2:	bf00      	nop
 80080e4:	51eb851f 	.word	0x51eb851f

080080e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080e8:	b084      	sub	sp, #16
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	f107 001c 	add.w	r0, r7, #28
 80080f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d122      	bne.n	8008146 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800812a:	2b01      	cmp	r3, #1
 800812c:	d105      	bne.n	800813a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 faa2 	bl	8008684 <USB_CoreReset>
 8008140:	4603      	mov	r3, r0
 8008142:	73fb      	strb	r3, [r7, #15]
 8008144:	e01a      	b.n	800817c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fa96 	bl	8008684 <USB_CoreReset>
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800815c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d106      	bne.n	8008170 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	639a      	str	r2, [r3, #56]	; 0x38
 800816e:	e005      	b.n	800817c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008174:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800817c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817e:	2b01      	cmp	r3, #1
 8008180:	d10b      	bne.n	800819a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f043 0206 	orr.w	r2, r3, #6
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f043 0220 	orr.w	r2, r3, #32
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800819a:	7bfb      	ldrb	r3, [r7, #15]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081a6:	b004      	add	sp, #16
 80081a8:	4770      	bx	lr

080081aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f023 0201 	bic.w	r2, r3, #1
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d115      	bne.n	800821a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081fa:	2001      	movs	r0, #1
 80081fc:	f7fa fc8e 	bl	8002b1c <HAL_Delay>
      ms++;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3301      	adds	r3, #1
 8008204:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa2e 	bl	8008668 <USB_GetMode>
 800820c:	4603      	mov	r3, r0
 800820e:	2b01      	cmp	r3, #1
 8008210:	d01e      	beq.n	8008250 <USB_SetCurrentMode+0x84>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b31      	cmp	r3, #49	; 0x31
 8008216:	d9f0      	bls.n	80081fa <USB_SetCurrentMode+0x2e>
 8008218:	e01a      	b.n	8008250 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800821a:	78fb      	ldrb	r3, [r7, #3]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d115      	bne.n	800824c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800822c:	2001      	movs	r0, #1
 800822e:	f7fa fc75 	bl	8002b1c <HAL_Delay>
      ms++;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fa15 	bl	8008668 <USB_GetMode>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d005      	beq.n	8008250 <USB_SetCurrentMode+0x84>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b31      	cmp	r3, #49	; 0x31
 8008248:	d9f0      	bls.n	800822c <USB_SetCurrentMode+0x60>
 800824a:	e001      	b.n	8008250 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e005      	b.n	800825c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b32      	cmp	r3, #50	; 0x32
 8008254:	d101      	bne.n	800825a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008264:	b084      	sub	sp, #16
 8008266:	b580      	push	{r7, lr}
 8008268:	b086      	sub	sp, #24
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800827e:	2300      	movs	r3, #0
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	e009      	b.n	8008298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	3340      	adds	r3, #64	; 0x40
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	2200      	movs	r2, #0
 8008290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	3301      	adds	r3, #1
 8008296:	613b      	str	r3, [r7, #16]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b0e      	cmp	r3, #14
 800829c:	d9f2      	bls.n	8008284 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800829e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d11c      	bne.n	80082de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082b2:	f043 0302 	orr.w	r3, r3, #2
 80082b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	639a      	str	r2, [r3, #56]	; 0x38
 80082dc:	e00b      	b.n	80082f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082fc:	461a      	mov	r2, r3
 80082fe:	2300      	movs	r3, #0
 8008300:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008308:	4619      	mov	r1, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008310:	461a      	mov	r2, r3
 8008312:	680b      	ldr	r3, [r1, #0]
 8008314:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	2b01      	cmp	r3, #1
 800831a:	d10c      	bne.n	8008336 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800831c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d104      	bne.n	800832c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008322:	2100      	movs	r1, #0
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f965 	bl	80085f4 <USB_SetDevSpeed>
 800832a:	e008      	b.n	800833e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800832c:	2101      	movs	r1, #1
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f960 	bl	80085f4 <USB_SetDevSpeed>
 8008334:	e003      	b.n	800833e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008336:	2103      	movs	r1, #3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f95b 	bl	80085f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800833e:	2110      	movs	r1, #16
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f8f3 	bl	800852c <USB_FlushTxFifo>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f91f 	bl	8008594 <USB_FlushRxFifo>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008366:	461a      	mov	r2, r3
 8008368:	2300      	movs	r3, #0
 800836a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008372:	461a      	mov	r2, r3
 8008374:	2300      	movs	r3, #0
 8008376:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837e:	461a      	mov	r2, r3
 8008380:	2300      	movs	r3, #0
 8008382:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008384:	2300      	movs	r3, #0
 8008386:	613b      	str	r3, [r7, #16]
 8008388:	e043      	b.n	8008412 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800839c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083a0:	d118      	bne.n	80083d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10a      	bne.n	80083be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b4:	461a      	mov	r2, r3
 80083b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	e013      	b.n	80083e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ca:	461a      	mov	r2, r3
 80083cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	e008      	b.n	80083e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e0:	461a      	mov	r2, r3
 80083e2:	2300      	movs	r3, #0
 80083e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f2:	461a      	mov	r2, r3
 80083f4:	2300      	movs	r3, #0
 80083f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008404:	461a      	mov	r2, r3
 8008406:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800840a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	3301      	adds	r3, #1
 8008410:	613b      	str	r3, [r7, #16]
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	429a      	cmp	r2, r3
 8008418:	d3b7      	bcc.n	800838a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800841a:	2300      	movs	r3, #0
 800841c:	613b      	str	r3, [r7, #16]
 800841e:	e043      	b.n	80084a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4413      	add	r3, r2
 8008428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008436:	d118      	bne.n	800846a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844a:	461a      	mov	r2, r3
 800844c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	e013      	b.n	800847c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008460:	461a      	mov	r2, r3
 8008462:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	e008      	b.n	800847c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008476:	461a      	mov	r2, r3
 8008478:	2300      	movs	r3, #0
 800847a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008488:	461a      	mov	r2, r3
 800848a:	2300      	movs	r3, #0
 800848c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849a:	461a      	mov	r2, r3
 800849c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	3301      	adds	r3, #1
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d3b7      	bcc.n	8008420 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80084d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d105      	bne.n	80084e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	f043 0210 	orr.w	r2, r3, #16
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	699a      	ldr	r2, [r3, #24]
 80084e8:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <USB_DevInit+0x2c4>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	f043 0208 	orr.w	r2, r3, #8
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008504:	2b01      	cmp	r3, #1
 8008506:	d107      	bne.n	8008518 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008510:	f043 0304 	orr.w	r3, r3, #4
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008518:	7dfb      	ldrb	r3, [r7, #23]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008524:	b004      	add	sp, #16
 8008526:	4770      	bx	lr
 8008528:	803c3800 	.word	0x803c3800

0800852c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3301      	adds	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4a13      	ldr	r2, [pc, #76]	; (8008590 <USB_FlushTxFifo+0x64>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d901      	bls.n	800854c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e01b      	b.n	8008584 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	daf2      	bge.n	800853a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	019b      	lsls	r3, r3, #6
 800855c:	f043 0220 	orr.w	r2, r3, #32
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	4a08      	ldr	r2, [pc, #32]	; (8008590 <USB_FlushTxFifo+0x64>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d901      	bls.n	8008576 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e006      	b.n	8008584 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f003 0320 	and.w	r3, r3, #32
 800857e:	2b20      	cmp	r3, #32
 8008580:	d0f0      	beq.n	8008564 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	00030d40 	.word	0x00030d40

08008594 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3301      	adds	r3, #1
 80085a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	4a11      	ldr	r2, [pc, #68]	; (80085f0 <USB_FlushRxFifo+0x5c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d901      	bls.n	80085b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e018      	b.n	80085e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	daf2      	bge.n	80085a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2210      	movs	r2, #16
 80085c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	3301      	adds	r3, #1
 80085c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4a08      	ldr	r2, [pc, #32]	; (80085f0 <USB_FlushRxFifo+0x5c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d901      	bls.n	80085d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e006      	b.n	80085e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0310 	and.w	r3, r3, #16
 80085de:	2b10      	cmp	r3, #16
 80085e0:	d0f0      	beq.n	80085c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	00030d40 	.word	0x00030d40

080085f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	68f9      	ldr	r1, [r7, #12]
 8008610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008614:	4313      	orrs	r3, r2
 8008616:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008626:	b480      	push	{r7}
 8008628:	b085      	sub	sp, #20
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008640:	f023 0303 	bic.w	r3, r3, #3
 8008644:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008654:	f043 0302 	orr.w	r3, r3, #2
 8008658:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	f003 0301 	and.w	r3, r3, #1
}
 8008678:	4618      	mov	r0, r3
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800868c:	2300      	movs	r3, #0
 800868e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3301      	adds	r3, #1
 8008694:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	4a13      	ldr	r2, [pc, #76]	; (80086e8 <USB_CoreReset+0x64>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d901      	bls.n	80086a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e01b      	b.n	80086da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	daf2      	bge.n	8008690 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	f043 0201 	orr.w	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3301      	adds	r3, #1
 80086be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	4a09      	ldr	r2, [pc, #36]	; (80086e8 <USB_CoreReset+0x64>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d901      	bls.n	80086cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e006      	b.n	80086da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d0f0      	beq.n	80086ba <USB_CoreReset+0x36>

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	00030d40 	.word	0x00030d40

080086ec <__errno>:
 80086ec:	4b01      	ldr	r3, [pc, #4]	; (80086f4 <__errno+0x8>)
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	2000004c 	.word	0x2000004c

080086f8 <__libc_init_array>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	4d0d      	ldr	r5, [pc, #52]	; (8008730 <__libc_init_array+0x38>)
 80086fc:	4c0d      	ldr	r4, [pc, #52]	; (8008734 <__libc_init_array+0x3c>)
 80086fe:	1b64      	subs	r4, r4, r5
 8008700:	10a4      	asrs	r4, r4, #2
 8008702:	2600      	movs	r6, #0
 8008704:	42a6      	cmp	r6, r4
 8008706:	d109      	bne.n	800871c <__libc_init_array+0x24>
 8008708:	4d0b      	ldr	r5, [pc, #44]	; (8008738 <__libc_init_array+0x40>)
 800870a:	4c0c      	ldr	r4, [pc, #48]	; (800873c <__libc_init_array+0x44>)
 800870c:	f001 fa00 	bl	8009b10 <_init>
 8008710:	1b64      	subs	r4, r4, r5
 8008712:	10a4      	asrs	r4, r4, #2
 8008714:	2600      	movs	r6, #0
 8008716:	42a6      	cmp	r6, r4
 8008718:	d105      	bne.n	8008726 <__libc_init_array+0x2e>
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008720:	4798      	blx	r3
 8008722:	3601      	adds	r6, #1
 8008724:	e7ee      	b.n	8008704 <__libc_init_array+0xc>
 8008726:	f855 3b04 	ldr.w	r3, [r5], #4
 800872a:	4798      	blx	r3
 800872c:	3601      	adds	r6, #1
 800872e:	e7f2      	b.n	8008716 <__libc_init_array+0x1e>
 8008730:	08009dac 	.word	0x08009dac
 8008734:	08009dac 	.word	0x08009dac
 8008738:	08009dac 	.word	0x08009dac
 800873c:	08009db0 	.word	0x08009db0

08008740 <memset>:
 8008740:	4402      	add	r2, r0
 8008742:	4603      	mov	r3, r0
 8008744:	4293      	cmp	r3, r2
 8008746:	d100      	bne.n	800874a <memset+0xa>
 8008748:	4770      	bx	lr
 800874a:	f803 1b01 	strb.w	r1, [r3], #1
 800874e:	e7f9      	b.n	8008744 <memset+0x4>

08008750 <iprintf>:
 8008750:	b40f      	push	{r0, r1, r2, r3}
 8008752:	4b0a      	ldr	r3, [pc, #40]	; (800877c <iprintf+0x2c>)
 8008754:	b513      	push	{r0, r1, r4, lr}
 8008756:	681c      	ldr	r4, [r3, #0]
 8008758:	b124      	cbz	r4, 8008764 <iprintf+0x14>
 800875a:	69a3      	ldr	r3, [r4, #24]
 800875c:	b913      	cbnz	r3, 8008764 <iprintf+0x14>
 800875e:	4620      	mov	r0, r4
 8008760:	f000 fa7e 	bl	8008c60 <__sinit>
 8008764:	ab05      	add	r3, sp, #20
 8008766:	9a04      	ldr	r2, [sp, #16]
 8008768:	68a1      	ldr	r1, [r4, #8]
 800876a:	9301      	str	r3, [sp, #4]
 800876c:	4620      	mov	r0, r4
 800876e:	f000 fde3 	bl	8009338 <_vfiprintf_r>
 8008772:	b002      	add	sp, #8
 8008774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008778:	b004      	add	sp, #16
 800877a:	4770      	bx	lr
 800877c:	2000004c 	.word	0x2000004c

08008780 <_puts_r>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	460e      	mov	r6, r1
 8008784:	4605      	mov	r5, r0
 8008786:	b118      	cbz	r0, 8008790 <_puts_r+0x10>
 8008788:	6983      	ldr	r3, [r0, #24]
 800878a:	b90b      	cbnz	r3, 8008790 <_puts_r+0x10>
 800878c:	f000 fa68 	bl	8008c60 <__sinit>
 8008790:	69ab      	ldr	r3, [r5, #24]
 8008792:	68ac      	ldr	r4, [r5, #8]
 8008794:	b913      	cbnz	r3, 800879c <_puts_r+0x1c>
 8008796:	4628      	mov	r0, r5
 8008798:	f000 fa62 	bl	8008c60 <__sinit>
 800879c:	4b2c      	ldr	r3, [pc, #176]	; (8008850 <_puts_r+0xd0>)
 800879e:	429c      	cmp	r4, r3
 80087a0:	d120      	bne.n	80087e4 <_puts_r+0x64>
 80087a2:	686c      	ldr	r4, [r5, #4]
 80087a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087a6:	07db      	lsls	r3, r3, #31
 80087a8:	d405      	bmi.n	80087b6 <_puts_r+0x36>
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	0598      	lsls	r0, r3, #22
 80087ae:	d402      	bmi.n	80087b6 <_puts_r+0x36>
 80087b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087b2:	f000 faf3 	bl	8008d9c <__retarget_lock_acquire_recursive>
 80087b6:	89a3      	ldrh	r3, [r4, #12]
 80087b8:	0719      	lsls	r1, r3, #28
 80087ba:	d51d      	bpl.n	80087f8 <_puts_r+0x78>
 80087bc:	6923      	ldr	r3, [r4, #16]
 80087be:	b1db      	cbz	r3, 80087f8 <_puts_r+0x78>
 80087c0:	3e01      	subs	r6, #1
 80087c2:	68a3      	ldr	r3, [r4, #8]
 80087c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80087c8:	3b01      	subs	r3, #1
 80087ca:	60a3      	str	r3, [r4, #8]
 80087cc:	bb39      	cbnz	r1, 800881e <_puts_r+0x9e>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	da38      	bge.n	8008844 <_puts_r+0xc4>
 80087d2:	4622      	mov	r2, r4
 80087d4:	210a      	movs	r1, #10
 80087d6:	4628      	mov	r0, r5
 80087d8:	f000 f868 	bl	80088ac <__swbuf_r>
 80087dc:	3001      	adds	r0, #1
 80087de:	d011      	beq.n	8008804 <_puts_r+0x84>
 80087e0:	250a      	movs	r5, #10
 80087e2:	e011      	b.n	8008808 <_puts_r+0x88>
 80087e4:	4b1b      	ldr	r3, [pc, #108]	; (8008854 <_puts_r+0xd4>)
 80087e6:	429c      	cmp	r4, r3
 80087e8:	d101      	bne.n	80087ee <_puts_r+0x6e>
 80087ea:	68ac      	ldr	r4, [r5, #8]
 80087ec:	e7da      	b.n	80087a4 <_puts_r+0x24>
 80087ee:	4b1a      	ldr	r3, [pc, #104]	; (8008858 <_puts_r+0xd8>)
 80087f0:	429c      	cmp	r4, r3
 80087f2:	bf08      	it	eq
 80087f4:	68ec      	ldreq	r4, [r5, #12]
 80087f6:	e7d5      	b.n	80087a4 <_puts_r+0x24>
 80087f8:	4621      	mov	r1, r4
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 f8a8 	bl	8008950 <__swsetup_r>
 8008800:	2800      	cmp	r0, #0
 8008802:	d0dd      	beq.n	80087c0 <_puts_r+0x40>
 8008804:	f04f 35ff 	mov.w	r5, #4294967295
 8008808:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800880a:	07da      	lsls	r2, r3, #31
 800880c:	d405      	bmi.n	800881a <_puts_r+0x9a>
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	059b      	lsls	r3, r3, #22
 8008812:	d402      	bmi.n	800881a <_puts_r+0x9a>
 8008814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008816:	f000 fac2 	bl	8008d9e <__retarget_lock_release_recursive>
 800881a:	4628      	mov	r0, r5
 800881c:	bd70      	pop	{r4, r5, r6, pc}
 800881e:	2b00      	cmp	r3, #0
 8008820:	da04      	bge.n	800882c <_puts_r+0xac>
 8008822:	69a2      	ldr	r2, [r4, #24]
 8008824:	429a      	cmp	r2, r3
 8008826:	dc06      	bgt.n	8008836 <_puts_r+0xb6>
 8008828:	290a      	cmp	r1, #10
 800882a:	d004      	beq.n	8008836 <_puts_r+0xb6>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	6022      	str	r2, [r4, #0]
 8008832:	7019      	strb	r1, [r3, #0]
 8008834:	e7c5      	b.n	80087c2 <_puts_r+0x42>
 8008836:	4622      	mov	r2, r4
 8008838:	4628      	mov	r0, r5
 800883a:	f000 f837 	bl	80088ac <__swbuf_r>
 800883e:	3001      	adds	r0, #1
 8008840:	d1bf      	bne.n	80087c2 <_puts_r+0x42>
 8008842:	e7df      	b.n	8008804 <_puts_r+0x84>
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	250a      	movs	r5, #10
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	6022      	str	r2, [r4, #0]
 800884c:	701d      	strb	r5, [r3, #0]
 800884e:	e7db      	b.n	8008808 <_puts_r+0x88>
 8008850:	08009d30 	.word	0x08009d30
 8008854:	08009d50 	.word	0x08009d50
 8008858:	08009d10 	.word	0x08009d10

0800885c <puts>:
 800885c:	4b02      	ldr	r3, [pc, #8]	; (8008868 <puts+0xc>)
 800885e:	4601      	mov	r1, r0
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	f7ff bf8d 	b.w	8008780 <_puts_r>
 8008866:	bf00      	nop
 8008868:	2000004c 	.word	0x2000004c

0800886c <siprintf>:
 800886c:	b40e      	push	{r1, r2, r3}
 800886e:	b500      	push	{lr}
 8008870:	b09c      	sub	sp, #112	; 0x70
 8008872:	ab1d      	add	r3, sp, #116	; 0x74
 8008874:	9002      	str	r0, [sp, #8]
 8008876:	9006      	str	r0, [sp, #24]
 8008878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800887c:	4809      	ldr	r0, [pc, #36]	; (80088a4 <siprintf+0x38>)
 800887e:	9107      	str	r1, [sp, #28]
 8008880:	9104      	str	r1, [sp, #16]
 8008882:	4909      	ldr	r1, [pc, #36]	; (80088a8 <siprintf+0x3c>)
 8008884:	f853 2b04 	ldr.w	r2, [r3], #4
 8008888:	9105      	str	r1, [sp, #20]
 800888a:	6800      	ldr	r0, [r0, #0]
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	a902      	add	r1, sp, #8
 8008890:	f000 fc28 	bl	80090e4 <_svfiprintf_r>
 8008894:	9b02      	ldr	r3, [sp, #8]
 8008896:	2200      	movs	r2, #0
 8008898:	701a      	strb	r2, [r3, #0]
 800889a:	b01c      	add	sp, #112	; 0x70
 800889c:	f85d eb04 	ldr.w	lr, [sp], #4
 80088a0:	b003      	add	sp, #12
 80088a2:	4770      	bx	lr
 80088a4:	2000004c 	.word	0x2000004c
 80088a8:	ffff0208 	.word	0xffff0208

080088ac <__swbuf_r>:
 80088ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ae:	460e      	mov	r6, r1
 80088b0:	4614      	mov	r4, r2
 80088b2:	4605      	mov	r5, r0
 80088b4:	b118      	cbz	r0, 80088be <__swbuf_r+0x12>
 80088b6:	6983      	ldr	r3, [r0, #24]
 80088b8:	b90b      	cbnz	r3, 80088be <__swbuf_r+0x12>
 80088ba:	f000 f9d1 	bl	8008c60 <__sinit>
 80088be:	4b21      	ldr	r3, [pc, #132]	; (8008944 <__swbuf_r+0x98>)
 80088c0:	429c      	cmp	r4, r3
 80088c2:	d12b      	bne.n	800891c <__swbuf_r+0x70>
 80088c4:	686c      	ldr	r4, [r5, #4]
 80088c6:	69a3      	ldr	r3, [r4, #24]
 80088c8:	60a3      	str	r3, [r4, #8]
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	071a      	lsls	r2, r3, #28
 80088ce:	d52f      	bpl.n	8008930 <__swbuf_r+0x84>
 80088d0:	6923      	ldr	r3, [r4, #16]
 80088d2:	b36b      	cbz	r3, 8008930 <__swbuf_r+0x84>
 80088d4:	6923      	ldr	r3, [r4, #16]
 80088d6:	6820      	ldr	r0, [r4, #0]
 80088d8:	1ac0      	subs	r0, r0, r3
 80088da:	6963      	ldr	r3, [r4, #20]
 80088dc:	b2f6      	uxtb	r6, r6
 80088de:	4283      	cmp	r3, r0
 80088e0:	4637      	mov	r7, r6
 80088e2:	dc04      	bgt.n	80088ee <__swbuf_r+0x42>
 80088e4:	4621      	mov	r1, r4
 80088e6:	4628      	mov	r0, r5
 80088e8:	f000 f926 	bl	8008b38 <_fflush_r>
 80088ec:	bb30      	cbnz	r0, 800893c <__swbuf_r+0x90>
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	60a3      	str	r3, [r4, #8]
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	1c5a      	adds	r2, r3, #1
 80088f8:	6022      	str	r2, [r4, #0]
 80088fa:	701e      	strb	r6, [r3, #0]
 80088fc:	6963      	ldr	r3, [r4, #20]
 80088fe:	3001      	adds	r0, #1
 8008900:	4283      	cmp	r3, r0
 8008902:	d004      	beq.n	800890e <__swbuf_r+0x62>
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	07db      	lsls	r3, r3, #31
 8008908:	d506      	bpl.n	8008918 <__swbuf_r+0x6c>
 800890a:	2e0a      	cmp	r6, #10
 800890c:	d104      	bne.n	8008918 <__swbuf_r+0x6c>
 800890e:	4621      	mov	r1, r4
 8008910:	4628      	mov	r0, r5
 8008912:	f000 f911 	bl	8008b38 <_fflush_r>
 8008916:	b988      	cbnz	r0, 800893c <__swbuf_r+0x90>
 8008918:	4638      	mov	r0, r7
 800891a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800891c:	4b0a      	ldr	r3, [pc, #40]	; (8008948 <__swbuf_r+0x9c>)
 800891e:	429c      	cmp	r4, r3
 8008920:	d101      	bne.n	8008926 <__swbuf_r+0x7a>
 8008922:	68ac      	ldr	r4, [r5, #8]
 8008924:	e7cf      	b.n	80088c6 <__swbuf_r+0x1a>
 8008926:	4b09      	ldr	r3, [pc, #36]	; (800894c <__swbuf_r+0xa0>)
 8008928:	429c      	cmp	r4, r3
 800892a:	bf08      	it	eq
 800892c:	68ec      	ldreq	r4, [r5, #12]
 800892e:	e7ca      	b.n	80088c6 <__swbuf_r+0x1a>
 8008930:	4621      	mov	r1, r4
 8008932:	4628      	mov	r0, r5
 8008934:	f000 f80c 	bl	8008950 <__swsetup_r>
 8008938:	2800      	cmp	r0, #0
 800893a:	d0cb      	beq.n	80088d4 <__swbuf_r+0x28>
 800893c:	f04f 37ff 	mov.w	r7, #4294967295
 8008940:	e7ea      	b.n	8008918 <__swbuf_r+0x6c>
 8008942:	bf00      	nop
 8008944:	08009d30 	.word	0x08009d30
 8008948:	08009d50 	.word	0x08009d50
 800894c:	08009d10 	.word	0x08009d10

08008950 <__swsetup_r>:
 8008950:	4b32      	ldr	r3, [pc, #200]	; (8008a1c <__swsetup_r+0xcc>)
 8008952:	b570      	push	{r4, r5, r6, lr}
 8008954:	681d      	ldr	r5, [r3, #0]
 8008956:	4606      	mov	r6, r0
 8008958:	460c      	mov	r4, r1
 800895a:	b125      	cbz	r5, 8008966 <__swsetup_r+0x16>
 800895c:	69ab      	ldr	r3, [r5, #24]
 800895e:	b913      	cbnz	r3, 8008966 <__swsetup_r+0x16>
 8008960:	4628      	mov	r0, r5
 8008962:	f000 f97d 	bl	8008c60 <__sinit>
 8008966:	4b2e      	ldr	r3, [pc, #184]	; (8008a20 <__swsetup_r+0xd0>)
 8008968:	429c      	cmp	r4, r3
 800896a:	d10f      	bne.n	800898c <__swsetup_r+0x3c>
 800896c:	686c      	ldr	r4, [r5, #4]
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008974:	0719      	lsls	r1, r3, #28
 8008976:	d42c      	bmi.n	80089d2 <__swsetup_r+0x82>
 8008978:	06dd      	lsls	r5, r3, #27
 800897a:	d411      	bmi.n	80089a0 <__swsetup_r+0x50>
 800897c:	2309      	movs	r3, #9
 800897e:	6033      	str	r3, [r6, #0]
 8008980:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	f04f 30ff 	mov.w	r0, #4294967295
 800898a:	e03e      	b.n	8008a0a <__swsetup_r+0xba>
 800898c:	4b25      	ldr	r3, [pc, #148]	; (8008a24 <__swsetup_r+0xd4>)
 800898e:	429c      	cmp	r4, r3
 8008990:	d101      	bne.n	8008996 <__swsetup_r+0x46>
 8008992:	68ac      	ldr	r4, [r5, #8]
 8008994:	e7eb      	b.n	800896e <__swsetup_r+0x1e>
 8008996:	4b24      	ldr	r3, [pc, #144]	; (8008a28 <__swsetup_r+0xd8>)
 8008998:	429c      	cmp	r4, r3
 800899a:	bf08      	it	eq
 800899c:	68ec      	ldreq	r4, [r5, #12]
 800899e:	e7e6      	b.n	800896e <__swsetup_r+0x1e>
 80089a0:	0758      	lsls	r0, r3, #29
 80089a2:	d512      	bpl.n	80089ca <__swsetup_r+0x7a>
 80089a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089a6:	b141      	cbz	r1, 80089ba <__swsetup_r+0x6a>
 80089a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089ac:	4299      	cmp	r1, r3
 80089ae:	d002      	beq.n	80089b6 <__swsetup_r+0x66>
 80089b0:	4630      	mov	r0, r6
 80089b2:	f000 fa5b 	bl	8008e6c <_free_r>
 80089b6:	2300      	movs	r3, #0
 80089b8:	6363      	str	r3, [r4, #52]	; 0x34
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	2300      	movs	r3, #0
 80089c4:	6063      	str	r3, [r4, #4]
 80089c6:	6923      	ldr	r3, [r4, #16]
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	f043 0308 	orr.w	r3, r3, #8
 80089d0:	81a3      	strh	r3, [r4, #12]
 80089d2:	6923      	ldr	r3, [r4, #16]
 80089d4:	b94b      	cbnz	r3, 80089ea <__swsetup_r+0x9a>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089e0:	d003      	beq.n	80089ea <__swsetup_r+0x9a>
 80089e2:	4621      	mov	r1, r4
 80089e4:	4630      	mov	r0, r6
 80089e6:	f000 fa01 	bl	8008dec <__smakebuf_r>
 80089ea:	89a0      	ldrh	r0, [r4, #12]
 80089ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089f0:	f010 0301 	ands.w	r3, r0, #1
 80089f4:	d00a      	beq.n	8008a0c <__swsetup_r+0xbc>
 80089f6:	2300      	movs	r3, #0
 80089f8:	60a3      	str	r3, [r4, #8]
 80089fa:	6963      	ldr	r3, [r4, #20]
 80089fc:	425b      	negs	r3, r3
 80089fe:	61a3      	str	r3, [r4, #24]
 8008a00:	6923      	ldr	r3, [r4, #16]
 8008a02:	b943      	cbnz	r3, 8008a16 <__swsetup_r+0xc6>
 8008a04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a08:	d1ba      	bne.n	8008980 <__swsetup_r+0x30>
 8008a0a:	bd70      	pop	{r4, r5, r6, pc}
 8008a0c:	0781      	lsls	r1, r0, #30
 8008a0e:	bf58      	it	pl
 8008a10:	6963      	ldrpl	r3, [r4, #20]
 8008a12:	60a3      	str	r3, [r4, #8]
 8008a14:	e7f4      	b.n	8008a00 <__swsetup_r+0xb0>
 8008a16:	2000      	movs	r0, #0
 8008a18:	e7f7      	b.n	8008a0a <__swsetup_r+0xba>
 8008a1a:	bf00      	nop
 8008a1c:	2000004c 	.word	0x2000004c
 8008a20:	08009d30 	.word	0x08009d30
 8008a24:	08009d50 	.word	0x08009d50
 8008a28:	08009d10 	.word	0x08009d10

08008a2c <__sflush_r>:
 8008a2c:	898a      	ldrh	r2, [r1, #12]
 8008a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a32:	4605      	mov	r5, r0
 8008a34:	0710      	lsls	r0, r2, #28
 8008a36:	460c      	mov	r4, r1
 8008a38:	d458      	bmi.n	8008aec <__sflush_r+0xc0>
 8008a3a:	684b      	ldr	r3, [r1, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dc05      	bgt.n	8008a4c <__sflush_r+0x20>
 8008a40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dc02      	bgt.n	8008a4c <__sflush_r+0x20>
 8008a46:	2000      	movs	r0, #0
 8008a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	d0f9      	beq.n	8008a46 <__sflush_r+0x1a>
 8008a52:	2300      	movs	r3, #0
 8008a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a58:	682f      	ldr	r7, [r5, #0]
 8008a5a:	602b      	str	r3, [r5, #0]
 8008a5c:	d032      	beq.n	8008ac4 <__sflush_r+0x98>
 8008a5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	075a      	lsls	r2, r3, #29
 8008a64:	d505      	bpl.n	8008a72 <__sflush_r+0x46>
 8008a66:	6863      	ldr	r3, [r4, #4]
 8008a68:	1ac0      	subs	r0, r0, r3
 8008a6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a6c:	b10b      	cbz	r3, 8008a72 <__sflush_r+0x46>
 8008a6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a70:	1ac0      	subs	r0, r0, r3
 8008a72:	2300      	movs	r3, #0
 8008a74:	4602      	mov	r2, r0
 8008a76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a78:	6a21      	ldr	r1, [r4, #32]
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	47b0      	blx	r6
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	d106      	bne.n	8008a92 <__sflush_r+0x66>
 8008a84:	6829      	ldr	r1, [r5, #0]
 8008a86:	291d      	cmp	r1, #29
 8008a88:	d82c      	bhi.n	8008ae4 <__sflush_r+0xb8>
 8008a8a:	4a2a      	ldr	r2, [pc, #168]	; (8008b34 <__sflush_r+0x108>)
 8008a8c:	40ca      	lsrs	r2, r1
 8008a8e:	07d6      	lsls	r6, r2, #31
 8008a90:	d528      	bpl.n	8008ae4 <__sflush_r+0xb8>
 8008a92:	2200      	movs	r2, #0
 8008a94:	6062      	str	r2, [r4, #4]
 8008a96:	04d9      	lsls	r1, r3, #19
 8008a98:	6922      	ldr	r2, [r4, #16]
 8008a9a:	6022      	str	r2, [r4, #0]
 8008a9c:	d504      	bpl.n	8008aa8 <__sflush_r+0x7c>
 8008a9e:	1c42      	adds	r2, r0, #1
 8008aa0:	d101      	bne.n	8008aa6 <__sflush_r+0x7a>
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	b903      	cbnz	r3, 8008aa8 <__sflush_r+0x7c>
 8008aa6:	6560      	str	r0, [r4, #84]	; 0x54
 8008aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aaa:	602f      	str	r7, [r5, #0]
 8008aac:	2900      	cmp	r1, #0
 8008aae:	d0ca      	beq.n	8008a46 <__sflush_r+0x1a>
 8008ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ab4:	4299      	cmp	r1, r3
 8008ab6:	d002      	beq.n	8008abe <__sflush_r+0x92>
 8008ab8:	4628      	mov	r0, r5
 8008aba:	f000 f9d7 	bl	8008e6c <_free_r>
 8008abe:	2000      	movs	r0, #0
 8008ac0:	6360      	str	r0, [r4, #52]	; 0x34
 8008ac2:	e7c1      	b.n	8008a48 <__sflush_r+0x1c>
 8008ac4:	6a21      	ldr	r1, [r4, #32]
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	4628      	mov	r0, r5
 8008aca:	47b0      	blx	r6
 8008acc:	1c41      	adds	r1, r0, #1
 8008ace:	d1c7      	bne.n	8008a60 <__sflush_r+0x34>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0c4      	beq.n	8008a60 <__sflush_r+0x34>
 8008ad6:	2b1d      	cmp	r3, #29
 8008ad8:	d001      	beq.n	8008ade <__sflush_r+0xb2>
 8008ada:	2b16      	cmp	r3, #22
 8008adc:	d101      	bne.n	8008ae2 <__sflush_r+0xb6>
 8008ade:	602f      	str	r7, [r5, #0]
 8008ae0:	e7b1      	b.n	8008a46 <__sflush_r+0x1a>
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ae8:	81a3      	strh	r3, [r4, #12]
 8008aea:	e7ad      	b.n	8008a48 <__sflush_r+0x1c>
 8008aec:	690f      	ldr	r7, [r1, #16]
 8008aee:	2f00      	cmp	r7, #0
 8008af0:	d0a9      	beq.n	8008a46 <__sflush_r+0x1a>
 8008af2:	0793      	lsls	r3, r2, #30
 8008af4:	680e      	ldr	r6, [r1, #0]
 8008af6:	bf08      	it	eq
 8008af8:	694b      	ldreq	r3, [r1, #20]
 8008afa:	600f      	str	r7, [r1, #0]
 8008afc:	bf18      	it	ne
 8008afe:	2300      	movne	r3, #0
 8008b00:	eba6 0807 	sub.w	r8, r6, r7
 8008b04:	608b      	str	r3, [r1, #8]
 8008b06:	f1b8 0f00 	cmp.w	r8, #0
 8008b0a:	dd9c      	ble.n	8008a46 <__sflush_r+0x1a>
 8008b0c:	6a21      	ldr	r1, [r4, #32]
 8008b0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b10:	4643      	mov	r3, r8
 8008b12:	463a      	mov	r2, r7
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b0      	blx	r6
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	dc06      	bgt.n	8008b2a <__sflush_r+0xfe>
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b22:	81a3      	strh	r3, [r4, #12]
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	e78e      	b.n	8008a48 <__sflush_r+0x1c>
 8008b2a:	4407      	add	r7, r0
 8008b2c:	eba8 0800 	sub.w	r8, r8, r0
 8008b30:	e7e9      	b.n	8008b06 <__sflush_r+0xda>
 8008b32:	bf00      	nop
 8008b34:	20400001 	.word	0x20400001

08008b38 <_fflush_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	690b      	ldr	r3, [r1, #16]
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	460c      	mov	r4, r1
 8008b40:	b913      	cbnz	r3, 8008b48 <_fflush_r+0x10>
 8008b42:	2500      	movs	r5, #0
 8008b44:	4628      	mov	r0, r5
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	b118      	cbz	r0, 8008b52 <_fflush_r+0x1a>
 8008b4a:	6983      	ldr	r3, [r0, #24]
 8008b4c:	b90b      	cbnz	r3, 8008b52 <_fflush_r+0x1a>
 8008b4e:	f000 f887 	bl	8008c60 <__sinit>
 8008b52:	4b14      	ldr	r3, [pc, #80]	; (8008ba4 <_fflush_r+0x6c>)
 8008b54:	429c      	cmp	r4, r3
 8008b56:	d11b      	bne.n	8008b90 <_fflush_r+0x58>
 8008b58:	686c      	ldr	r4, [r5, #4]
 8008b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d0ef      	beq.n	8008b42 <_fflush_r+0xa>
 8008b62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b64:	07d0      	lsls	r0, r2, #31
 8008b66:	d404      	bmi.n	8008b72 <_fflush_r+0x3a>
 8008b68:	0599      	lsls	r1, r3, #22
 8008b6a:	d402      	bmi.n	8008b72 <_fflush_r+0x3a>
 8008b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b6e:	f000 f915 	bl	8008d9c <__retarget_lock_acquire_recursive>
 8008b72:	4628      	mov	r0, r5
 8008b74:	4621      	mov	r1, r4
 8008b76:	f7ff ff59 	bl	8008a2c <__sflush_r>
 8008b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b7c:	07da      	lsls	r2, r3, #31
 8008b7e:	4605      	mov	r5, r0
 8008b80:	d4e0      	bmi.n	8008b44 <_fflush_r+0xc>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	059b      	lsls	r3, r3, #22
 8008b86:	d4dd      	bmi.n	8008b44 <_fflush_r+0xc>
 8008b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b8a:	f000 f908 	bl	8008d9e <__retarget_lock_release_recursive>
 8008b8e:	e7d9      	b.n	8008b44 <_fflush_r+0xc>
 8008b90:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <_fflush_r+0x70>)
 8008b92:	429c      	cmp	r4, r3
 8008b94:	d101      	bne.n	8008b9a <_fflush_r+0x62>
 8008b96:	68ac      	ldr	r4, [r5, #8]
 8008b98:	e7df      	b.n	8008b5a <_fflush_r+0x22>
 8008b9a:	4b04      	ldr	r3, [pc, #16]	; (8008bac <_fflush_r+0x74>)
 8008b9c:	429c      	cmp	r4, r3
 8008b9e:	bf08      	it	eq
 8008ba0:	68ec      	ldreq	r4, [r5, #12]
 8008ba2:	e7da      	b.n	8008b5a <_fflush_r+0x22>
 8008ba4:	08009d30 	.word	0x08009d30
 8008ba8:	08009d50 	.word	0x08009d50
 8008bac:	08009d10 	.word	0x08009d10

08008bb0 <std>:
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	b510      	push	{r4, lr}
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8008bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bbe:	6083      	str	r3, [r0, #8]
 8008bc0:	8181      	strh	r1, [r0, #12]
 8008bc2:	6643      	str	r3, [r0, #100]	; 0x64
 8008bc4:	81c2      	strh	r2, [r0, #14]
 8008bc6:	6183      	str	r3, [r0, #24]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	2208      	movs	r2, #8
 8008bcc:	305c      	adds	r0, #92	; 0x5c
 8008bce:	f7ff fdb7 	bl	8008740 <memset>
 8008bd2:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <std+0x38>)
 8008bd4:	6263      	str	r3, [r4, #36]	; 0x24
 8008bd6:	4b05      	ldr	r3, [pc, #20]	; (8008bec <std+0x3c>)
 8008bd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bda:	4b05      	ldr	r3, [pc, #20]	; (8008bf0 <std+0x40>)
 8008bdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bde:	4b05      	ldr	r3, [pc, #20]	; (8008bf4 <std+0x44>)
 8008be0:	6224      	str	r4, [r4, #32]
 8008be2:	6323      	str	r3, [r4, #48]	; 0x30
 8008be4:	bd10      	pop	{r4, pc}
 8008be6:	bf00      	nop
 8008be8:	080098e1 	.word	0x080098e1
 8008bec:	08009903 	.word	0x08009903
 8008bf0:	0800993b 	.word	0x0800993b
 8008bf4:	0800995f 	.word	0x0800995f

08008bf8 <_cleanup_r>:
 8008bf8:	4901      	ldr	r1, [pc, #4]	; (8008c00 <_cleanup_r+0x8>)
 8008bfa:	f000 b8af 	b.w	8008d5c <_fwalk_reent>
 8008bfe:	bf00      	nop
 8008c00:	08008b39 	.word	0x08008b39

08008c04 <__sfmoreglue>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	2268      	movs	r2, #104	; 0x68
 8008c08:	1e4d      	subs	r5, r1, #1
 8008c0a:	4355      	muls	r5, r2
 8008c0c:	460e      	mov	r6, r1
 8008c0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c12:	f000 f997 	bl	8008f44 <_malloc_r>
 8008c16:	4604      	mov	r4, r0
 8008c18:	b140      	cbz	r0, 8008c2c <__sfmoreglue+0x28>
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	e9c0 1600 	strd	r1, r6, [r0]
 8008c20:	300c      	adds	r0, #12
 8008c22:	60a0      	str	r0, [r4, #8]
 8008c24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c28:	f7ff fd8a 	bl	8008740 <memset>
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	bd70      	pop	{r4, r5, r6, pc}

08008c30 <__sfp_lock_acquire>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__sfp_lock_acquire+0x8>)
 8008c32:	f000 b8b3 	b.w	8008d9c <__retarget_lock_acquire_recursive>
 8008c36:	bf00      	nop
 8008c38:	20000b35 	.word	0x20000b35

08008c3c <__sfp_lock_release>:
 8008c3c:	4801      	ldr	r0, [pc, #4]	; (8008c44 <__sfp_lock_release+0x8>)
 8008c3e:	f000 b8ae 	b.w	8008d9e <__retarget_lock_release_recursive>
 8008c42:	bf00      	nop
 8008c44:	20000b35 	.word	0x20000b35

08008c48 <__sinit_lock_acquire>:
 8008c48:	4801      	ldr	r0, [pc, #4]	; (8008c50 <__sinit_lock_acquire+0x8>)
 8008c4a:	f000 b8a7 	b.w	8008d9c <__retarget_lock_acquire_recursive>
 8008c4e:	bf00      	nop
 8008c50:	20000b36 	.word	0x20000b36

08008c54 <__sinit_lock_release>:
 8008c54:	4801      	ldr	r0, [pc, #4]	; (8008c5c <__sinit_lock_release+0x8>)
 8008c56:	f000 b8a2 	b.w	8008d9e <__retarget_lock_release_recursive>
 8008c5a:	bf00      	nop
 8008c5c:	20000b36 	.word	0x20000b36

08008c60 <__sinit>:
 8008c60:	b510      	push	{r4, lr}
 8008c62:	4604      	mov	r4, r0
 8008c64:	f7ff fff0 	bl	8008c48 <__sinit_lock_acquire>
 8008c68:	69a3      	ldr	r3, [r4, #24]
 8008c6a:	b11b      	cbz	r3, 8008c74 <__sinit+0x14>
 8008c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c70:	f7ff bff0 	b.w	8008c54 <__sinit_lock_release>
 8008c74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c78:	6523      	str	r3, [r4, #80]	; 0x50
 8008c7a:	4b13      	ldr	r3, [pc, #76]	; (8008cc8 <__sinit+0x68>)
 8008c7c:	4a13      	ldr	r2, [pc, #76]	; (8008ccc <__sinit+0x6c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c82:	42a3      	cmp	r3, r4
 8008c84:	bf04      	itt	eq
 8008c86:	2301      	moveq	r3, #1
 8008c88:	61a3      	streq	r3, [r4, #24]
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 f820 	bl	8008cd0 <__sfp>
 8008c90:	6060      	str	r0, [r4, #4]
 8008c92:	4620      	mov	r0, r4
 8008c94:	f000 f81c 	bl	8008cd0 <__sfp>
 8008c98:	60a0      	str	r0, [r4, #8]
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f000 f818 	bl	8008cd0 <__sfp>
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	60e0      	str	r0, [r4, #12]
 8008ca4:	2104      	movs	r1, #4
 8008ca6:	6860      	ldr	r0, [r4, #4]
 8008ca8:	f7ff ff82 	bl	8008bb0 <std>
 8008cac:	68a0      	ldr	r0, [r4, #8]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	2109      	movs	r1, #9
 8008cb2:	f7ff ff7d 	bl	8008bb0 <std>
 8008cb6:	68e0      	ldr	r0, [r4, #12]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	2112      	movs	r1, #18
 8008cbc:	f7ff ff78 	bl	8008bb0 <std>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	61a3      	str	r3, [r4, #24]
 8008cc4:	e7d2      	b.n	8008c6c <__sinit+0xc>
 8008cc6:	bf00      	nop
 8008cc8:	08009d0c 	.word	0x08009d0c
 8008ccc:	08008bf9 	.word	0x08008bf9

08008cd0 <__sfp>:
 8008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd2:	4607      	mov	r7, r0
 8008cd4:	f7ff ffac 	bl	8008c30 <__sfp_lock_acquire>
 8008cd8:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <__sfp+0x84>)
 8008cda:	681e      	ldr	r6, [r3, #0]
 8008cdc:	69b3      	ldr	r3, [r6, #24]
 8008cde:	b913      	cbnz	r3, 8008ce6 <__sfp+0x16>
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f7ff ffbd 	bl	8008c60 <__sinit>
 8008ce6:	3648      	adds	r6, #72	; 0x48
 8008ce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	d503      	bpl.n	8008cf8 <__sfp+0x28>
 8008cf0:	6833      	ldr	r3, [r6, #0]
 8008cf2:	b30b      	cbz	r3, 8008d38 <__sfp+0x68>
 8008cf4:	6836      	ldr	r6, [r6, #0]
 8008cf6:	e7f7      	b.n	8008ce8 <__sfp+0x18>
 8008cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cfc:	b9d5      	cbnz	r5, 8008d34 <__sfp+0x64>
 8008cfe:	4b16      	ldr	r3, [pc, #88]	; (8008d58 <__sfp+0x88>)
 8008d00:	60e3      	str	r3, [r4, #12]
 8008d02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d06:	6665      	str	r5, [r4, #100]	; 0x64
 8008d08:	f000 f847 	bl	8008d9a <__retarget_lock_init_recursive>
 8008d0c:	f7ff ff96 	bl	8008c3c <__sfp_lock_release>
 8008d10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d18:	6025      	str	r5, [r4, #0]
 8008d1a:	61a5      	str	r5, [r4, #24]
 8008d1c:	2208      	movs	r2, #8
 8008d1e:	4629      	mov	r1, r5
 8008d20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d24:	f7ff fd0c 	bl	8008740 <memset>
 8008d28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d30:	4620      	mov	r0, r4
 8008d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d34:	3468      	adds	r4, #104	; 0x68
 8008d36:	e7d9      	b.n	8008cec <__sfp+0x1c>
 8008d38:	2104      	movs	r1, #4
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	f7ff ff62 	bl	8008c04 <__sfmoreglue>
 8008d40:	4604      	mov	r4, r0
 8008d42:	6030      	str	r0, [r6, #0]
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d1d5      	bne.n	8008cf4 <__sfp+0x24>
 8008d48:	f7ff ff78 	bl	8008c3c <__sfp_lock_release>
 8008d4c:	230c      	movs	r3, #12
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	e7ee      	b.n	8008d30 <__sfp+0x60>
 8008d52:	bf00      	nop
 8008d54:	08009d0c 	.word	0x08009d0c
 8008d58:	ffff0001 	.word	0xffff0001

08008d5c <_fwalk_reent>:
 8008d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d60:	4606      	mov	r6, r0
 8008d62:	4688      	mov	r8, r1
 8008d64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d68:	2700      	movs	r7, #0
 8008d6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d6e:	f1b9 0901 	subs.w	r9, r9, #1
 8008d72:	d505      	bpl.n	8008d80 <_fwalk_reent+0x24>
 8008d74:	6824      	ldr	r4, [r4, #0]
 8008d76:	2c00      	cmp	r4, #0
 8008d78:	d1f7      	bne.n	8008d6a <_fwalk_reent+0xe>
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d80:	89ab      	ldrh	r3, [r5, #12]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d907      	bls.n	8008d96 <_fwalk_reent+0x3a>
 8008d86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	d003      	beq.n	8008d96 <_fwalk_reent+0x3a>
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4630      	mov	r0, r6
 8008d92:	47c0      	blx	r8
 8008d94:	4307      	orrs	r7, r0
 8008d96:	3568      	adds	r5, #104	; 0x68
 8008d98:	e7e9      	b.n	8008d6e <_fwalk_reent+0x12>

08008d9a <__retarget_lock_init_recursive>:
 8008d9a:	4770      	bx	lr

08008d9c <__retarget_lock_acquire_recursive>:
 8008d9c:	4770      	bx	lr

08008d9e <__retarget_lock_release_recursive>:
 8008d9e:	4770      	bx	lr

08008da0 <__swhatbuf_r>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	460e      	mov	r6, r1
 8008da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da8:	2900      	cmp	r1, #0
 8008daa:	b096      	sub	sp, #88	; 0x58
 8008dac:	4614      	mov	r4, r2
 8008dae:	461d      	mov	r5, r3
 8008db0:	da08      	bge.n	8008dc4 <__swhatbuf_r+0x24>
 8008db2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	602a      	str	r2, [r5, #0]
 8008dba:	061a      	lsls	r2, r3, #24
 8008dbc:	d410      	bmi.n	8008de0 <__swhatbuf_r+0x40>
 8008dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dc2:	e00e      	b.n	8008de2 <__swhatbuf_r+0x42>
 8008dc4:	466a      	mov	r2, sp
 8008dc6:	f000 fdf1 	bl	80099ac <_fstat_r>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	dbf1      	blt.n	8008db2 <__swhatbuf_r+0x12>
 8008dce:	9a01      	ldr	r2, [sp, #4]
 8008dd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008dd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008dd8:	425a      	negs	r2, r3
 8008dda:	415a      	adcs	r2, r3
 8008ddc:	602a      	str	r2, [r5, #0]
 8008dde:	e7ee      	b.n	8008dbe <__swhatbuf_r+0x1e>
 8008de0:	2340      	movs	r3, #64	; 0x40
 8008de2:	2000      	movs	r0, #0
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	b016      	add	sp, #88	; 0x58
 8008de8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008dec <__smakebuf_r>:
 8008dec:	898b      	ldrh	r3, [r1, #12]
 8008dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008df0:	079d      	lsls	r5, r3, #30
 8008df2:	4606      	mov	r6, r0
 8008df4:	460c      	mov	r4, r1
 8008df6:	d507      	bpl.n	8008e08 <__smakebuf_r+0x1c>
 8008df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	6123      	str	r3, [r4, #16]
 8008e00:	2301      	movs	r3, #1
 8008e02:	6163      	str	r3, [r4, #20]
 8008e04:	b002      	add	sp, #8
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	ab01      	add	r3, sp, #4
 8008e0a:	466a      	mov	r2, sp
 8008e0c:	f7ff ffc8 	bl	8008da0 <__swhatbuf_r>
 8008e10:	9900      	ldr	r1, [sp, #0]
 8008e12:	4605      	mov	r5, r0
 8008e14:	4630      	mov	r0, r6
 8008e16:	f000 f895 	bl	8008f44 <_malloc_r>
 8008e1a:	b948      	cbnz	r0, 8008e30 <__smakebuf_r+0x44>
 8008e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e20:	059a      	lsls	r2, r3, #22
 8008e22:	d4ef      	bmi.n	8008e04 <__smakebuf_r+0x18>
 8008e24:	f023 0303 	bic.w	r3, r3, #3
 8008e28:	f043 0302 	orr.w	r3, r3, #2
 8008e2c:	81a3      	strh	r3, [r4, #12]
 8008e2e:	e7e3      	b.n	8008df8 <__smakebuf_r+0xc>
 8008e30:	4b0d      	ldr	r3, [pc, #52]	; (8008e68 <__smakebuf_r+0x7c>)
 8008e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	6020      	str	r0, [r4, #0]
 8008e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3c:	81a3      	strh	r3, [r4, #12]
 8008e3e:	9b00      	ldr	r3, [sp, #0]
 8008e40:	6163      	str	r3, [r4, #20]
 8008e42:	9b01      	ldr	r3, [sp, #4]
 8008e44:	6120      	str	r0, [r4, #16]
 8008e46:	b15b      	cbz	r3, 8008e60 <__smakebuf_r+0x74>
 8008e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	f000 fdbf 	bl	80099d0 <_isatty_r>
 8008e52:	b128      	cbz	r0, 8008e60 <__smakebuf_r+0x74>
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	f023 0303 	bic.w	r3, r3, #3
 8008e5a:	f043 0301 	orr.w	r3, r3, #1
 8008e5e:	81a3      	strh	r3, [r4, #12]
 8008e60:	89a0      	ldrh	r0, [r4, #12]
 8008e62:	4305      	orrs	r5, r0
 8008e64:	81a5      	strh	r5, [r4, #12]
 8008e66:	e7cd      	b.n	8008e04 <__smakebuf_r+0x18>
 8008e68:	08008bf9 	.word	0x08008bf9

08008e6c <_free_r>:
 8008e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e6e:	2900      	cmp	r1, #0
 8008e70:	d044      	beq.n	8008efc <_free_r+0x90>
 8008e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e76:	9001      	str	r0, [sp, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e7e:	bfb8      	it	lt
 8008e80:	18e4      	addlt	r4, r4, r3
 8008e82:	f000 fdef 	bl	8009a64 <__malloc_lock>
 8008e86:	4a1e      	ldr	r2, [pc, #120]	; (8008f00 <_free_r+0x94>)
 8008e88:	9801      	ldr	r0, [sp, #4]
 8008e8a:	6813      	ldr	r3, [r2, #0]
 8008e8c:	b933      	cbnz	r3, 8008e9c <_free_r+0x30>
 8008e8e:	6063      	str	r3, [r4, #4]
 8008e90:	6014      	str	r4, [r2, #0]
 8008e92:	b003      	add	sp, #12
 8008e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e98:	f000 bdea 	b.w	8009a70 <__malloc_unlock>
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	d908      	bls.n	8008eb2 <_free_r+0x46>
 8008ea0:	6825      	ldr	r5, [r4, #0]
 8008ea2:	1961      	adds	r1, r4, r5
 8008ea4:	428b      	cmp	r3, r1
 8008ea6:	bf01      	itttt	eq
 8008ea8:	6819      	ldreq	r1, [r3, #0]
 8008eaa:	685b      	ldreq	r3, [r3, #4]
 8008eac:	1949      	addeq	r1, r1, r5
 8008eae:	6021      	streq	r1, [r4, #0]
 8008eb0:	e7ed      	b.n	8008e8e <_free_r+0x22>
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	b10b      	cbz	r3, 8008ebc <_free_r+0x50>
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	d9fa      	bls.n	8008eb2 <_free_r+0x46>
 8008ebc:	6811      	ldr	r1, [r2, #0]
 8008ebe:	1855      	adds	r5, r2, r1
 8008ec0:	42a5      	cmp	r5, r4
 8008ec2:	d10b      	bne.n	8008edc <_free_r+0x70>
 8008ec4:	6824      	ldr	r4, [r4, #0]
 8008ec6:	4421      	add	r1, r4
 8008ec8:	1854      	adds	r4, r2, r1
 8008eca:	42a3      	cmp	r3, r4
 8008ecc:	6011      	str	r1, [r2, #0]
 8008ece:	d1e0      	bne.n	8008e92 <_free_r+0x26>
 8008ed0:	681c      	ldr	r4, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	6053      	str	r3, [r2, #4]
 8008ed6:	4421      	add	r1, r4
 8008ed8:	6011      	str	r1, [r2, #0]
 8008eda:	e7da      	b.n	8008e92 <_free_r+0x26>
 8008edc:	d902      	bls.n	8008ee4 <_free_r+0x78>
 8008ede:	230c      	movs	r3, #12
 8008ee0:	6003      	str	r3, [r0, #0]
 8008ee2:	e7d6      	b.n	8008e92 <_free_r+0x26>
 8008ee4:	6825      	ldr	r5, [r4, #0]
 8008ee6:	1961      	adds	r1, r4, r5
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	bf04      	itt	eq
 8008eec:	6819      	ldreq	r1, [r3, #0]
 8008eee:	685b      	ldreq	r3, [r3, #4]
 8008ef0:	6063      	str	r3, [r4, #4]
 8008ef2:	bf04      	itt	eq
 8008ef4:	1949      	addeq	r1, r1, r5
 8008ef6:	6021      	streq	r1, [r4, #0]
 8008ef8:	6054      	str	r4, [r2, #4]
 8008efa:	e7ca      	b.n	8008e92 <_free_r+0x26>
 8008efc:	b003      	add	sp, #12
 8008efe:	bd30      	pop	{r4, r5, pc}
 8008f00:	20000b38 	.word	0x20000b38

08008f04 <sbrk_aligned>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	4e0e      	ldr	r6, [pc, #56]	; (8008f40 <sbrk_aligned+0x3c>)
 8008f08:	460c      	mov	r4, r1
 8008f0a:	6831      	ldr	r1, [r6, #0]
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	b911      	cbnz	r1, 8008f16 <sbrk_aligned+0x12>
 8008f10:	f000 fcd6 	bl	80098c0 <_sbrk_r>
 8008f14:	6030      	str	r0, [r6, #0]
 8008f16:	4621      	mov	r1, r4
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f000 fcd1 	bl	80098c0 <_sbrk_r>
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	d00a      	beq.n	8008f38 <sbrk_aligned+0x34>
 8008f22:	1cc4      	adds	r4, r0, #3
 8008f24:	f024 0403 	bic.w	r4, r4, #3
 8008f28:	42a0      	cmp	r0, r4
 8008f2a:	d007      	beq.n	8008f3c <sbrk_aligned+0x38>
 8008f2c:	1a21      	subs	r1, r4, r0
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f000 fcc6 	bl	80098c0 <_sbrk_r>
 8008f34:	3001      	adds	r0, #1
 8008f36:	d101      	bne.n	8008f3c <sbrk_aligned+0x38>
 8008f38:	f04f 34ff 	mov.w	r4, #4294967295
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	20000b3c 	.word	0x20000b3c

08008f44 <_malloc_r>:
 8008f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f48:	1ccd      	adds	r5, r1, #3
 8008f4a:	f025 0503 	bic.w	r5, r5, #3
 8008f4e:	3508      	adds	r5, #8
 8008f50:	2d0c      	cmp	r5, #12
 8008f52:	bf38      	it	cc
 8008f54:	250c      	movcc	r5, #12
 8008f56:	2d00      	cmp	r5, #0
 8008f58:	4607      	mov	r7, r0
 8008f5a:	db01      	blt.n	8008f60 <_malloc_r+0x1c>
 8008f5c:	42a9      	cmp	r1, r5
 8008f5e:	d905      	bls.n	8008f6c <_malloc_r+0x28>
 8008f60:	230c      	movs	r3, #12
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	2600      	movs	r6, #0
 8008f66:	4630      	mov	r0, r6
 8008f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f6c:	4e2e      	ldr	r6, [pc, #184]	; (8009028 <_malloc_r+0xe4>)
 8008f6e:	f000 fd79 	bl	8009a64 <__malloc_lock>
 8008f72:	6833      	ldr	r3, [r6, #0]
 8008f74:	461c      	mov	r4, r3
 8008f76:	bb34      	cbnz	r4, 8008fc6 <_malloc_r+0x82>
 8008f78:	4629      	mov	r1, r5
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	f7ff ffc2 	bl	8008f04 <sbrk_aligned>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	4604      	mov	r4, r0
 8008f84:	d14d      	bne.n	8009022 <_malloc_r+0xde>
 8008f86:	6834      	ldr	r4, [r6, #0]
 8008f88:	4626      	mov	r6, r4
 8008f8a:	2e00      	cmp	r6, #0
 8008f8c:	d140      	bne.n	8009010 <_malloc_r+0xcc>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	4631      	mov	r1, r6
 8008f92:	4638      	mov	r0, r7
 8008f94:	eb04 0803 	add.w	r8, r4, r3
 8008f98:	f000 fc92 	bl	80098c0 <_sbrk_r>
 8008f9c:	4580      	cmp	r8, r0
 8008f9e:	d13a      	bne.n	8009016 <_malloc_r+0xd2>
 8008fa0:	6821      	ldr	r1, [r4, #0]
 8008fa2:	3503      	adds	r5, #3
 8008fa4:	1a6d      	subs	r5, r5, r1
 8008fa6:	f025 0503 	bic.w	r5, r5, #3
 8008faa:	3508      	adds	r5, #8
 8008fac:	2d0c      	cmp	r5, #12
 8008fae:	bf38      	it	cc
 8008fb0:	250c      	movcc	r5, #12
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	f7ff ffa5 	bl	8008f04 <sbrk_aligned>
 8008fba:	3001      	adds	r0, #1
 8008fbc:	d02b      	beq.n	8009016 <_malloc_r+0xd2>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	442b      	add	r3, r5
 8008fc2:	6023      	str	r3, [r4, #0]
 8008fc4:	e00e      	b.n	8008fe4 <_malloc_r+0xa0>
 8008fc6:	6822      	ldr	r2, [r4, #0]
 8008fc8:	1b52      	subs	r2, r2, r5
 8008fca:	d41e      	bmi.n	800900a <_malloc_r+0xc6>
 8008fcc:	2a0b      	cmp	r2, #11
 8008fce:	d916      	bls.n	8008ffe <_malloc_r+0xba>
 8008fd0:	1961      	adds	r1, r4, r5
 8008fd2:	42a3      	cmp	r3, r4
 8008fd4:	6025      	str	r5, [r4, #0]
 8008fd6:	bf18      	it	ne
 8008fd8:	6059      	strne	r1, [r3, #4]
 8008fda:	6863      	ldr	r3, [r4, #4]
 8008fdc:	bf08      	it	eq
 8008fde:	6031      	streq	r1, [r6, #0]
 8008fe0:	5162      	str	r2, [r4, r5]
 8008fe2:	604b      	str	r3, [r1, #4]
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	f104 060b 	add.w	r6, r4, #11
 8008fea:	f000 fd41 	bl	8009a70 <__malloc_unlock>
 8008fee:	f026 0607 	bic.w	r6, r6, #7
 8008ff2:	1d23      	adds	r3, r4, #4
 8008ff4:	1af2      	subs	r2, r6, r3
 8008ff6:	d0b6      	beq.n	8008f66 <_malloc_r+0x22>
 8008ff8:	1b9b      	subs	r3, r3, r6
 8008ffa:	50a3      	str	r3, [r4, r2]
 8008ffc:	e7b3      	b.n	8008f66 <_malloc_r+0x22>
 8008ffe:	6862      	ldr	r2, [r4, #4]
 8009000:	42a3      	cmp	r3, r4
 8009002:	bf0c      	ite	eq
 8009004:	6032      	streq	r2, [r6, #0]
 8009006:	605a      	strne	r2, [r3, #4]
 8009008:	e7ec      	b.n	8008fe4 <_malloc_r+0xa0>
 800900a:	4623      	mov	r3, r4
 800900c:	6864      	ldr	r4, [r4, #4]
 800900e:	e7b2      	b.n	8008f76 <_malloc_r+0x32>
 8009010:	4634      	mov	r4, r6
 8009012:	6876      	ldr	r6, [r6, #4]
 8009014:	e7b9      	b.n	8008f8a <_malloc_r+0x46>
 8009016:	230c      	movs	r3, #12
 8009018:	603b      	str	r3, [r7, #0]
 800901a:	4638      	mov	r0, r7
 800901c:	f000 fd28 	bl	8009a70 <__malloc_unlock>
 8009020:	e7a1      	b.n	8008f66 <_malloc_r+0x22>
 8009022:	6025      	str	r5, [r4, #0]
 8009024:	e7de      	b.n	8008fe4 <_malloc_r+0xa0>
 8009026:	bf00      	nop
 8009028:	20000b38 	.word	0x20000b38

0800902c <__ssputs_r>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	688e      	ldr	r6, [r1, #8]
 8009032:	429e      	cmp	r6, r3
 8009034:	4682      	mov	sl, r0
 8009036:	460c      	mov	r4, r1
 8009038:	4690      	mov	r8, r2
 800903a:	461f      	mov	r7, r3
 800903c:	d838      	bhi.n	80090b0 <__ssputs_r+0x84>
 800903e:	898a      	ldrh	r2, [r1, #12]
 8009040:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009044:	d032      	beq.n	80090ac <__ssputs_r+0x80>
 8009046:	6825      	ldr	r5, [r4, #0]
 8009048:	6909      	ldr	r1, [r1, #16]
 800904a:	eba5 0901 	sub.w	r9, r5, r1
 800904e:	6965      	ldr	r5, [r4, #20]
 8009050:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009054:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009058:	3301      	adds	r3, #1
 800905a:	444b      	add	r3, r9
 800905c:	106d      	asrs	r5, r5, #1
 800905e:	429d      	cmp	r5, r3
 8009060:	bf38      	it	cc
 8009062:	461d      	movcc	r5, r3
 8009064:	0553      	lsls	r3, r2, #21
 8009066:	d531      	bpl.n	80090cc <__ssputs_r+0xa0>
 8009068:	4629      	mov	r1, r5
 800906a:	f7ff ff6b 	bl	8008f44 <_malloc_r>
 800906e:	4606      	mov	r6, r0
 8009070:	b950      	cbnz	r0, 8009088 <__ssputs_r+0x5c>
 8009072:	230c      	movs	r3, #12
 8009074:	f8ca 3000 	str.w	r3, [sl]
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009088:	6921      	ldr	r1, [r4, #16]
 800908a:	464a      	mov	r2, r9
 800908c:	f000 fcc2 	bl	8009a14 <memcpy>
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	6126      	str	r6, [r4, #16]
 800909e:	6165      	str	r5, [r4, #20]
 80090a0:	444e      	add	r6, r9
 80090a2:	eba5 0509 	sub.w	r5, r5, r9
 80090a6:	6026      	str	r6, [r4, #0]
 80090a8:	60a5      	str	r5, [r4, #8]
 80090aa:	463e      	mov	r6, r7
 80090ac:	42be      	cmp	r6, r7
 80090ae:	d900      	bls.n	80090b2 <__ssputs_r+0x86>
 80090b0:	463e      	mov	r6, r7
 80090b2:	6820      	ldr	r0, [r4, #0]
 80090b4:	4632      	mov	r2, r6
 80090b6:	4641      	mov	r1, r8
 80090b8:	f000 fcba 	bl	8009a30 <memmove>
 80090bc:	68a3      	ldr	r3, [r4, #8]
 80090be:	1b9b      	subs	r3, r3, r6
 80090c0:	60a3      	str	r3, [r4, #8]
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	4433      	add	r3, r6
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	2000      	movs	r0, #0
 80090ca:	e7db      	b.n	8009084 <__ssputs_r+0x58>
 80090cc:	462a      	mov	r2, r5
 80090ce:	f000 fcd5 	bl	8009a7c <_realloc_r>
 80090d2:	4606      	mov	r6, r0
 80090d4:	2800      	cmp	r0, #0
 80090d6:	d1e1      	bne.n	800909c <__ssputs_r+0x70>
 80090d8:	6921      	ldr	r1, [r4, #16]
 80090da:	4650      	mov	r0, sl
 80090dc:	f7ff fec6 	bl	8008e6c <_free_r>
 80090e0:	e7c7      	b.n	8009072 <__ssputs_r+0x46>
	...

080090e4 <_svfiprintf_r>:
 80090e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	4698      	mov	r8, r3
 80090ea:	898b      	ldrh	r3, [r1, #12]
 80090ec:	061b      	lsls	r3, r3, #24
 80090ee:	b09d      	sub	sp, #116	; 0x74
 80090f0:	4607      	mov	r7, r0
 80090f2:	460d      	mov	r5, r1
 80090f4:	4614      	mov	r4, r2
 80090f6:	d50e      	bpl.n	8009116 <_svfiprintf_r+0x32>
 80090f8:	690b      	ldr	r3, [r1, #16]
 80090fa:	b963      	cbnz	r3, 8009116 <_svfiprintf_r+0x32>
 80090fc:	2140      	movs	r1, #64	; 0x40
 80090fe:	f7ff ff21 	bl	8008f44 <_malloc_r>
 8009102:	6028      	str	r0, [r5, #0]
 8009104:	6128      	str	r0, [r5, #16]
 8009106:	b920      	cbnz	r0, 8009112 <_svfiprintf_r+0x2e>
 8009108:	230c      	movs	r3, #12
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	e0d1      	b.n	80092b6 <_svfiprintf_r+0x1d2>
 8009112:	2340      	movs	r3, #64	; 0x40
 8009114:	616b      	str	r3, [r5, #20]
 8009116:	2300      	movs	r3, #0
 8009118:	9309      	str	r3, [sp, #36]	; 0x24
 800911a:	2320      	movs	r3, #32
 800911c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009120:	f8cd 800c 	str.w	r8, [sp, #12]
 8009124:	2330      	movs	r3, #48	; 0x30
 8009126:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80092d0 <_svfiprintf_r+0x1ec>
 800912a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800912e:	f04f 0901 	mov.w	r9, #1
 8009132:	4623      	mov	r3, r4
 8009134:	469a      	mov	sl, r3
 8009136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800913a:	b10a      	cbz	r2, 8009140 <_svfiprintf_r+0x5c>
 800913c:	2a25      	cmp	r2, #37	; 0x25
 800913e:	d1f9      	bne.n	8009134 <_svfiprintf_r+0x50>
 8009140:	ebba 0b04 	subs.w	fp, sl, r4
 8009144:	d00b      	beq.n	800915e <_svfiprintf_r+0x7a>
 8009146:	465b      	mov	r3, fp
 8009148:	4622      	mov	r2, r4
 800914a:	4629      	mov	r1, r5
 800914c:	4638      	mov	r0, r7
 800914e:	f7ff ff6d 	bl	800902c <__ssputs_r>
 8009152:	3001      	adds	r0, #1
 8009154:	f000 80aa 	beq.w	80092ac <_svfiprintf_r+0x1c8>
 8009158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800915a:	445a      	add	r2, fp
 800915c:	9209      	str	r2, [sp, #36]	; 0x24
 800915e:	f89a 3000 	ldrb.w	r3, [sl]
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 80a2 	beq.w	80092ac <_svfiprintf_r+0x1c8>
 8009168:	2300      	movs	r3, #0
 800916a:	f04f 32ff 	mov.w	r2, #4294967295
 800916e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009172:	f10a 0a01 	add.w	sl, sl, #1
 8009176:	9304      	str	r3, [sp, #16]
 8009178:	9307      	str	r3, [sp, #28]
 800917a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800917e:	931a      	str	r3, [sp, #104]	; 0x68
 8009180:	4654      	mov	r4, sl
 8009182:	2205      	movs	r2, #5
 8009184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009188:	4851      	ldr	r0, [pc, #324]	; (80092d0 <_svfiprintf_r+0x1ec>)
 800918a:	f7f7 f831 	bl	80001f0 <memchr>
 800918e:	9a04      	ldr	r2, [sp, #16]
 8009190:	b9d8      	cbnz	r0, 80091ca <_svfiprintf_r+0xe6>
 8009192:	06d0      	lsls	r0, r2, #27
 8009194:	bf44      	itt	mi
 8009196:	2320      	movmi	r3, #32
 8009198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800919c:	0711      	lsls	r1, r2, #28
 800919e:	bf44      	itt	mi
 80091a0:	232b      	movmi	r3, #43	; 0x2b
 80091a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a6:	f89a 3000 	ldrb.w	r3, [sl]
 80091aa:	2b2a      	cmp	r3, #42	; 0x2a
 80091ac:	d015      	beq.n	80091da <_svfiprintf_r+0xf6>
 80091ae:	9a07      	ldr	r2, [sp, #28]
 80091b0:	4654      	mov	r4, sl
 80091b2:	2000      	movs	r0, #0
 80091b4:	f04f 0c0a 	mov.w	ip, #10
 80091b8:	4621      	mov	r1, r4
 80091ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091be:	3b30      	subs	r3, #48	; 0x30
 80091c0:	2b09      	cmp	r3, #9
 80091c2:	d94e      	bls.n	8009262 <_svfiprintf_r+0x17e>
 80091c4:	b1b0      	cbz	r0, 80091f4 <_svfiprintf_r+0x110>
 80091c6:	9207      	str	r2, [sp, #28]
 80091c8:	e014      	b.n	80091f4 <_svfiprintf_r+0x110>
 80091ca:	eba0 0308 	sub.w	r3, r0, r8
 80091ce:	fa09 f303 	lsl.w	r3, r9, r3
 80091d2:	4313      	orrs	r3, r2
 80091d4:	9304      	str	r3, [sp, #16]
 80091d6:	46a2      	mov	sl, r4
 80091d8:	e7d2      	b.n	8009180 <_svfiprintf_r+0x9c>
 80091da:	9b03      	ldr	r3, [sp, #12]
 80091dc:	1d19      	adds	r1, r3, #4
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	9103      	str	r1, [sp, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	bfbb      	ittet	lt
 80091e6:	425b      	neglt	r3, r3
 80091e8:	f042 0202 	orrlt.w	r2, r2, #2
 80091ec:	9307      	strge	r3, [sp, #28]
 80091ee:	9307      	strlt	r3, [sp, #28]
 80091f0:	bfb8      	it	lt
 80091f2:	9204      	strlt	r2, [sp, #16]
 80091f4:	7823      	ldrb	r3, [r4, #0]
 80091f6:	2b2e      	cmp	r3, #46	; 0x2e
 80091f8:	d10c      	bne.n	8009214 <_svfiprintf_r+0x130>
 80091fa:	7863      	ldrb	r3, [r4, #1]
 80091fc:	2b2a      	cmp	r3, #42	; 0x2a
 80091fe:	d135      	bne.n	800926c <_svfiprintf_r+0x188>
 8009200:	9b03      	ldr	r3, [sp, #12]
 8009202:	1d1a      	adds	r2, r3, #4
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	9203      	str	r2, [sp, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	bfb8      	it	lt
 800920c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009210:	3402      	adds	r4, #2
 8009212:	9305      	str	r3, [sp, #20]
 8009214:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092e0 <_svfiprintf_r+0x1fc>
 8009218:	7821      	ldrb	r1, [r4, #0]
 800921a:	2203      	movs	r2, #3
 800921c:	4650      	mov	r0, sl
 800921e:	f7f6 ffe7 	bl	80001f0 <memchr>
 8009222:	b140      	cbz	r0, 8009236 <_svfiprintf_r+0x152>
 8009224:	2340      	movs	r3, #64	; 0x40
 8009226:	eba0 000a 	sub.w	r0, r0, sl
 800922a:	fa03 f000 	lsl.w	r0, r3, r0
 800922e:	9b04      	ldr	r3, [sp, #16]
 8009230:	4303      	orrs	r3, r0
 8009232:	3401      	adds	r4, #1
 8009234:	9304      	str	r3, [sp, #16]
 8009236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800923a:	4826      	ldr	r0, [pc, #152]	; (80092d4 <_svfiprintf_r+0x1f0>)
 800923c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009240:	2206      	movs	r2, #6
 8009242:	f7f6 ffd5 	bl	80001f0 <memchr>
 8009246:	2800      	cmp	r0, #0
 8009248:	d038      	beq.n	80092bc <_svfiprintf_r+0x1d8>
 800924a:	4b23      	ldr	r3, [pc, #140]	; (80092d8 <_svfiprintf_r+0x1f4>)
 800924c:	bb1b      	cbnz	r3, 8009296 <_svfiprintf_r+0x1b2>
 800924e:	9b03      	ldr	r3, [sp, #12]
 8009250:	3307      	adds	r3, #7
 8009252:	f023 0307 	bic.w	r3, r3, #7
 8009256:	3308      	adds	r3, #8
 8009258:	9303      	str	r3, [sp, #12]
 800925a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925c:	4433      	add	r3, r6
 800925e:	9309      	str	r3, [sp, #36]	; 0x24
 8009260:	e767      	b.n	8009132 <_svfiprintf_r+0x4e>
 8009262:	fb0c 3202 	mla	r2, ip, r2, r3
 8009266:	460c      	mov	r4, r1
 8009268:	2001      	movs	r0, #1
 800926a:	e7a5      	b.n	80091b8 <_svfiprintf_r+0xd4>
 800926c:	2300      	movs	r3, #0
 800926e:	3401      	adds	r4, #1
 8009270:	9305      	str	r3, [sp, #20]
 8009272:	4619      	mov	r1, r3
 8009274:	f04f 0c0a 	mov.w	ip, #10
 8009278:	4620      	mov	r0, r4
 800927a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800927e:	3a30      	subs	r2, #48	; 0x30
 8009280:	2a09      	cmp	r2, #9
 8009282:	d903      	bls.n	800928c <_svfiprintf_r+0x1a8>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0c5      	beq.n	8009214 <_svfiprintf_r+0x130>
 8009288:	9105      	str	r1, [sp, #20]
 800928a:	e7c3      	b.n	8009214 <_svfiprintf_r+0x130>
 800928c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009290:	4604      	mov	r4, r0
 8009292:	2301      	movs	r3, #1
 8009294:	e7f0      	b.n	8009278 <_svfiprintf_r+0x194>
 8009296:	ab03      	add	r3, sp, #12
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	462a      	mov	r2, r5
 800929c:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <_svfiprintf_r+0x1f8>)
 800929e:	a904      	add	r1, sp, #16
 80092a0:	4638      	mov	r0, r7
 80092a2:	f3af 8000 	nop.w
 80092a6:	1c42      	adds	r2, r0, #1
 80092a8:	4606      	mov	r6, r0
 80092aa:	d1d6      	bne.n	800925a <_svfiprintf_r+0x176>
 80092ac:	89ab      	ldrh	r3, [r5, #12]
 80092ae:	065b      	lsls	r3, r3, #25
 80092b0:	f53f af2c 	bmi.w	800910c <_svfiprintf_r+0x28>
 80092b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092b6:	b01d      	add	sp, #116	; 0x74
 80092b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092bc:	ab03      	add	r3, sp, #12
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	462a      	mov	r2, r5
 80092c2:	4b06      	ldr	r3, [pc, #24]	; (80092dc <_svfiprintf_r+0x1f8>)
 80092c4:	a904      	add	r1, sp, #16
 80092c6:	4638      	mov	r0, r7
 80092c8:	f000 f9d4 	bl	8009674 <_printf_i>
 80092cc:	e7eb      	b.n	80092a6 <_svfiprintf_r+0x1c2>
 80092ce:	bf00      	nop
 80092d0:	08009d70 	.word	0x08009d70
 80092d4:	08009d7a 	.word	0x08009d7a
 80092d8:	00000000 	.word	0x00000000
 80092dc:	0800902d 	.word	0x0800902d
 80092e0:	08009d76 	.word	0x08009d76

080092e4 <__sfputc_r>:
 80092e4:	6893      	ldr	r3, [r2, #8]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	b410      	push	{r4}
 80092ec:	6093      	str	r3, [r2, #8]
 80092ee:	da08      	bge.n	8009302 <__sfputc_r+0x1e>
 80092f0:	6994      	ldr	r4, [r2, #24]
 80092f2:	42a3      	cmp	r3, r4
 80092f4:	db01      	blt.n	80092fa <__sfputc_r+0x16>
 80092f6:	290a      	cmp	r1, #10
 80092f8:	d103      	bne.n	8009302 <__sfputc_r+0x1e>
 80092fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092fe:	f7ff bad5 	b.w	80088ac <__swbuf_r>
 8009302:	6813      	ldr	r3, [r2, #0]
 8009304:	1c58      	adds	r0, r3, #1
 8009306:	6010      	str	r0, [r2, #0]
 8009308:	7019      	strb	r1, [r3, #0]
 800930a:	4608      	mov	r0, r1
 800930c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009310:	4770      	bx	lr

08009312 <__sfputs_r>:
 8009312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009314:	4606      	mov	r6, r0
 8009316:	460f      	mov	r7, r1
 8009318:	4614      	mov	r4, r2
 800931a:	18d5      	adds	r5, r2, r3
 800931c:	42ac      	cmp	r4, r5
 800931e:	d101      	bne.n	8009324 <__sfputs_r+0x12>
 8009320:	2000      	movs	r0, #0
 8009322:	e007      	b.n	8009334 <__sfputs_r+0x22>
 8009324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009328:	463a      	mov	r2, r7
 800932a:	4630      	mov	r0, r6
 800932c:	f7ff ffda 	bl	80092e4 <__sfputc_r>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d1f3      	bne.n	800931c <__sfputs_r+0xa>
 8009334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009338 <_vfiprintf_r>:
 8009338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	460d      	mov	r5, r1
 800933e:	b09d      	sub	sp, #116	; 0x74
 8009340:	4614      	mov	r4, r2
 8009342:	4698      	mov	r8, r3
 8009344:	4606      	mov	r6, r0
 8009346:	b118      	cbz	r0, 8009350 <_vfiprintf_r+0x18>
 8009348:	6983      	ldr	r3, [r0, #24]
 800934a:	b90b      	cbnz	r3, 8009350 <_vfiprintf_r+0x18>
 800934c:	f7ff fc88 	bl	8008c60 <__sinit>
 8009350:	4b89      	ldr	r3, [pc, #548]	; (8009578 <_vfiprintf_r+0x240>)
 8009352:	429d      	cmp	r5, r3
 8009354:	d11b      	bne.n	800938e <_vfiprintf_r+0x56>
 8009356:	6875      	ldr	r5, [r6, #4]
 8009358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800935a:	07d9      	lsls	r1, r3, #31
 800935c:	d405      	bmi.n	800936a <_vfiprintf_r+0x32>
 800935e:	89ab      	ldrh	r3, [r5, #12]
 8009360:	059a      	lsls	r2, r3, #22
 8009362:	d402      	bmi.n	800936a <_vfiprintf_r+0x32>
 8009364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009366:	f7ff fd19 	bl	8008d9c <__retarget_lock_acquire_recursive>
 800936a:	89ab      	ldrh	r3, [r5, #12]
 800936c:	071b      	lsls	r3, r3, #28
 800936e:	d501      	bpl.n	8009374 <_vfiprintf_r+0x3c>
 8009370:	692b      	ldr	r3, [r5, #16]
 8009372:	b9eb      	cbnz	r3, 80093b0 <_vfiprintf_r+0x78>
 8009374:	4629      	mov	r1, r5
 8009376:	4630      	mov	r0, r6
 8009378:	f7ff faea 	bl	8008950 <__swsetup_r>
 800937c:	b1c0      	cbz	r0, 80093b0 <_vfiprintf_r+0x78>
 800937e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009380:	07dc      	lsls	r4, r3, #31
 8009382:	d50e      	bpl.n	80093a2 <_vfiprintf_r+0x6a>
 8009384:	f04f 30ff 	mov.w	r0, #4294967295
 8009388:	b01d      	add	sp, #116	; 0x74
 800938a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938e:	4b7b      	ldr	r3, [pc, #492]	; (800957c <_vfiprintf_r+0x244>)
 8009390:	429d      	cmp	r5, r3
 8009392:	d101      	bne.n	8009398 <_vfiprintf_r+0x60>
 8009394:	68b5      	ldr	r5, [r6, #8]
 8009396:	e7df      	b.n	8009358 <_vfiprintf_r+0x20>
 8009398:	4b79      	ldr	r3, [pc, #484]	; (8009580 <_vfiprintf_r+0x248>)
 800939a:	429d      	cmp	r5, r3
 800939c:	bf08      	it	eq
 800939e:	68f5      	ldreq	r5, [r6, #12]
 80093a0:	e7da      	b.n	8009358 <_vfiprintf_r+0x20>
 80093a2:	89ab      	ldrh	r3, [r5, #12]
 80093a4:	0598      	lsls	r0, r3, #22
 80093a6:	d4ed      	bmi.n	8009384 <_vfiprintf_r+0x4c>
 80093a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093aa:	f7ff fcf8 	bl	8008d9e <__retarget_lock_release_recursive>
 80093ae:	e7e9      	b.n	8009384 <_vfiprintf_r+0x4c>
 80093b0:	2300      	movs	r3, #0
 80093b2:	9309      	str	r3, [sp, #36]	; 0x24
 80093b4:	2320      	movs	r3, #32
 80093b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80093be:	2330      	movs	r3, #48	; 0x30
 80093c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009584 <_vfiprintf_r+0x24c>
 80093c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093c8:	f04f 0901 	mov.w	r9, #1
 80093cc:	4623      	mov	r3, r4
 80093ce:	469a      	mov	sl, r3
 80093d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093d4:	b10a      	cbz	r2, 80093da <_vfiprintf_r+0xa2>
 80093d6:	2a25      	cmp	r2, #37	; 0x25
 80093d8:	d1f9      	bne.n	80093ce <_vfiprintf_r+0x96>
 80093da:	ebba 0b04 	subs.w	fp, sl, r4
 80093de:	d00b      	beq.n	80093f8 <_vfiprintf_r+0xc0>
 80093e0:	465b      	mov	r3, fp
 80093e2:	4622      	mov	r2, r4
 80093e4:	4629      	mov	r1, r5
 80093e6:	4630      	mov	r0, r6
 80093e8:	f7ff ff93 	bl	8009312 <__sfputs_r>
 80093ec:	3001      	adds	r0, #1
 80093ee:	f000 80aa 	beq.w	8009546 <_vfiprintf_r+0x20e>
 80093f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093f4:	445a      	add	r2, fp
 80093f6:	9209      	str	r2, [sp, #36]	; 0x24
 80093f8:	f89a 3000 	ldrb.w	r3, [sl]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 80a2 	beq.w	8009546 <_vfiprintf_r+0x20e>
 8009402:	2300      	movs	r3, #0
 8009404:	f04f 32ff 	mov.w	r2, #4294967295
 8009408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800940c:	f10a 0a01 	add.w	sl, sl, #1
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	9307      	str	r3, [sp, #28]
 8009414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009418:	931a      	str	r3, [sp, #104]	; 0x68
 800941a:	4654      	mov	r4, sl
 800941c:	2205      	movs	r2, #5
 800941e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009422:	4858      	ldr	r0, [pc, #352]	; (8009584 <_vfiprintf_r+0x24c>)
 8009424:	f7f6 fee4 	bl	80001f0 <memchr>
 8009428:	9a04      	ldr	r2, [sp, #16]
 800942a:	b9d8      	cbnz	r0, 8009464 <_vfiprintf_r+0x12c>
 800942c:	06d1      	lsls	r1, r2, #27
 800942e:	bf44      	itt	mi
 8009430:	2320      	movmi	r3, #32
 8009432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009436:	0713      	lsls	r3, r2, #28
 8009438:	bf44      	itt	mi
 800943a:	232b      	movmi	r3, #43	; 0x2b
 800943c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009440:	f89a 3000 	ldrb.w	r3, [sl]
 8009444:	2b2a      	cmp	r3, #42	; 0x2a
 8009446:	d015      	beq.n	8009474 <_vfiprintf_r+0x13c>
 8009448:	9a07      	ldr	r2, [sp, #28]
 800944a:	4654      	mov	r4, sl
 800944c:	2000      	movs	r0, #0
 800944e:	f04f 0c0a 	mov.w	ip, #10
 8009452:	4621      	mov	r1, r4
 8009454:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009458:	3b30      	subs	r3, #48	; 0x30
 800945a:	2b09      	cmp	r3, #9
 800945c:	d94e      	bls.n	80094fc <_vfiprintf_r+0x1c4>
 800945e:	b1b0      	cbz	r0, 800948e <_vfiprintf_r+0x156>
 8009460:	9207      	str	r2, [sp, #28]
 8009462:	e014      	b.n	800948e <_vfiprintf_r+0x156>
 8009464:	eba0 0308 	sub.w	r3, r0, r8
 8009468:	fa09 f303 	lsl.w	r3, r9, r3
 800946c:	4313      	orrs	r3, r2
 800946e:	9304      	str	r3, [sp, #16]
 8009470:	46a2      	mov	sl, r4
 8009472:	e7d2      	b.n	800941a <_vfiprintf_r+0xe2>
 8009474:	9b03      	ldr	r3, [sp, #12]
 8009476:	1d19      	adds	r1, r3, #4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	9103      	str	r1, [sp, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	bfbb      	ittet	lt
 8009480:	425b      	neglt	r3, r3
 8009482:	f042 0202 	orrlt.w	r2, r2, #2
 8009486:	9307      	strge	r3, [sp, #28]
 8009488:	9307      	strlt	r3, [sp, #28]
 800948a:	bfb8      	it	lt
 800948c:	9204      	strlt	r2, [sp, #16]
 800948e:	7823      	ldrb	r3, [r4, #0]
 8009490:	2b2e      	cmp	r3, #46	; 0x2e
 8009492:	d10c      	bne.n	80094ae <_vfiprintf_r+0x176>
 8009494:	7863      	ldrb	r3, [r4, #1]
 8009496:	2b2a      	cmp	r3, #42	; 0x2a
 8009498:	d135      	bne.n	8009506 <_vfiprintf_r+0x1ce>
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	1d1a      	adds	r2, r3, #4
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	9203      	str	r2, [sp, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bfb8      	it	lt
 80094a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80094aa:	3402      	adds	r4, #2
 80094ac:	9305      	str	r3, [sp, #20]
 80094ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009594 <_vfiprintf_r+0x25c>
 80094b2:	7821      	ldrb	r1, [r4, #0]
 80094b4:	2203      	movs	r2, #3
 80094b6:	4650      	mov	r0, sl
 80094b8:	f7f6 fe9a 	bl	80001f0 <memchr>
 80094bc:	b140      	cbz	r0, 80094d0 <_vfiprintf_r+0x198>
 80094be:	2340      	movs	r3, #64	; 0x40
 80094c0:	eba0 000a 	sub.w	r0, r0, sl
 80094c4:	fa03 f000 	lsl.w	r0, r3, r0
 80094c8:	9b04      	ldr	r3, [sp, #16]
 80094ca:	4303      	orrs	r3, r0
 80094cc:	3401      	adds	r4, #1
 80094ce:	9304      	str	r3, [sp, #16]
 80094d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d4:	482c      	ldr	r0, [pc, #176]	; (8009588 <_vfiprintf_r+0x250>)
 80094d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094da:	2206      	movs	r2, #6
 80094dc:	f7f6 fe88 	bl	80001f0 <memchr>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d03f      	beq.n	8009564 <_vfiprintf_r+0x22c>
 80094e4:	4b29      	ldr	r3, [pc, #164]	; (800958c <_vfiprintf_r+0x254>)
 80094e6:	bb1b      	cbnz	r3, 8009530 <_vfiprintf_r+0x1f8>
 80094e8:	9b03      	ldr	r3, [sp, #12]
 80094ea:	3307      	adds	r3, #7
 80094ec:	f023 0307 	bic.w	r3, r3, #7
 80094f0:	3308      	adds	r3, #8
 80094f2:	9303      	str	r3, [sp, #12]
 80094f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f6:	443b      	add	r3, r7
 80094f8:	9309      	str	r3, [sp, #36]	; 0x24
 80094fa:	e767      	b.n	80093cc <_vfiprintf_r+0x94>
 80094fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009500:	460c      	mov	r4, r1
 8009502:	2001      	movs	r0, #1
 8009504:	e7a5      	b.n	8009452 <_vfiprintf_r+0x11a>
 8009506:	2300      	movs	r3, #0
 8009508:	3401      	adds	r4, #1
 800950a:	9305      	str	r3, [sp, #20]
 800950c:	4619      	mov	r1, r3
 800950e:	f04f 0c0a 	mov.w	ip, #10
 8009512:	4620      	mov	r0, r4
 8009514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009518:	3a30      	subs	r2, #48	; 0x30
 800951a:	2a09      	cmp	r2, #9
 800951c:	d903      	bls.n	8009526 <_vfiprintf_r+0x1ee>
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0c5      	beq.n	80094ae <_vfiprintf_r+0x176>
 8009522:	9105      	str	r1, [sp, #20]
 8009524:	e7c3      	b.n	80094ae <_vfiprintf_r+0x176>
 8009526:	fb0c 2101 	mla	r1, ip, r1, r2
 800952a:	4604      	mov	r4, r0
 800952c:	2301      	movs	r3, #1
 800952e:	e7f0      	b.n	8009512 <_vfiprintf_r+0x1da>
 8009530:	ab03      	add	r3, sp, #12
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	462a      	mov	r2, r5
 8009536:	4b16      	ldr	r3, [pc, #88]	; (8009590 <_vfiprintf_r+0x258>)
 8009538:	a904      	add	r1, sp, #16
 800953a:	4630      	mov	r0, r6
 800953c:	f3af 8000 	nop.w
 8009540:	4607      	mov	r7, r0
 8009542:	1c78      	adds	r0, r7, #1
 8009544:	d1d6      	bne.n	80094f4 <_vfiprintf_r+0x1bc>
 8009546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009548:	07d9      	lsls	r1, r3, #31
 800954a:	d405      	bmi.n	8009558 <_vfiprintf_r+0x220>
 800954c:	89ab      	ldrh	r3, [r5, #12]
 800954e:	059a      	lsls	r2, r3, #22
 8009550:	d402      	bmi.n	8009558 <_vfiprintf_r+0x220>
 8009552:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009554:	f7ff fc23 	bl	8008d9e <__retarget_lock_release_recursive>
 8009558:	89ab      	ldrh	r3, [r5, #12]
 800955a:	065b      	lsls	r3, r3, #25
 800955c:	f53f af12 	bmi.w	8009384 <_vfiprintf_r+0x4c>
 8009560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009562:	e711      	b.n	8009388 <_vfiprintf_r+0x50>
 8009564:	ab03      	add	r3, sp, #12
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	462a      	mov	r2, r5
 800956a:	4b09      	ldr	r3, [pc, #36]	; (8009590 <_vfiprintf_r+0x258>)
 800956c:	a904      	add	r1, sp, #16
 800956e:	4630      	mov	r0, r6
 8009570:	f000 f880 	bl	8009674 <_printf_i>
 8009574:	e7e4      	b.n	8009540 <_vfiprintf_r+0x208>
 8009576:	bf00      	nop
 8009578:	08009d30 	.word	0x08009d30
 800957c:	08009d50 	.word	0x08009d50
 8009580:	08009d10 	.word	0x08009d10
 8009584:	08009d70 	.word	0x08009d70
 8009588:	08009d7a 	.word	0x08009d7a
 800958c:	00000000 	.word	0x00000000
 8009590:	08009313 	.word	0x08009313
 8009594:	08009d76 	.word	0x08009d76

08009598 <_printf_common>:
 8009598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800959c:	4616      	mov	r6, r2
 800959e:	4699      	mov	r9, r3
 80095a0:	688a      	ldr	r2, [r1, #8]
 80095a2:	690b      	ldr	r3, [r1, #16]
 80095a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095a8:	4293      	cmp	r3, r2
 80095aa:	bfb8      	it	lt
 80095ac:	4613      	movlt	r3, r2
 80095ae:	6033      	str	r3, [r6, #0]
 80095b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095b4:	4607      	mov	r7, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	b10a      	cbz	r2, 80095be <_printf_common+0x26>
 80095ba:	3301      	adds	r3, #1
 80095bc:	6033      	str	r3, [r6, #0]
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	0699      	lsls	r1, r3, #26
 80095c2:	bf42      	ittt	mi
 80095c4:	6833      	ldrmi	r3, [r6, #0]
 80095c6:	3302      	addmi	r3, #2
 80095c8:	6033      	strmi	r3, [r6, #0]
 80095ca:	6825      	ldr	r5, [r4, #0]
 80095cc:	f015 0506 	ands.w	r5, r5, #6
 80095d0:	d106      	bne.n	80095e0 <_printf_common+0x48>
 80095d2:	f104 0a19 	add.w	sl, r4, #25
 80095d6:	68e3      	ldr	r3, [r4, #12]
 80095d8:	6832      	ldr	r2, [r6, #0]
 80095da:	1a9b      	subs	r3, r3, r2
 80095dc:	42ab      	cmp	r3, r5
 80095de:	dc26      	bgt.n	800962e <_printf_common+0x96>
 80095e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095e4:	1e13      	subs	r3, r2, #0
 80095e6:	6822      	ldr	r2, [r4, #0]
 80095e8:	bf18      	it	ne
 80095ea:	2301      	movne	r3, #1
 80095ec:	0692      	lsls	r2, r2, #26
 80095ee:	d42b      	bmi.n	8009648 <_printf_common+0xb0>
 80095f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095f4:	4649      	mov	r1, r9
 80095f6:	4638      	mov	r0, r7
 80095f8:	47c0      	blx	r8
 80095fa:	3001      	adds	r0, #1
 80095fc:	d01e      	beq.n	800963c <_printf_common+0xa4>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	68e5      	ldr	r5, [r4, #12]
 8009602:	6832      	ldr	r2, [r6, #0]
 8009604:	f003 0306 	and.w	r3, r3, #6
 8009608:	2b04      	cmp	r3, #4
 800960a:	bf08      	it	eq
 800960c:	1aad      	subeq	r5, r5, r2
 800960e:	68a3      	ldr	r3, [r4, #8]
 8009610:	6922      	ldr	r2, [r4, #16]
 8009612:	bf0c      	ite	eq
 8009614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009618:	2500      	movne	r5, #0
 800961a:	4293      	cmp	r3, r2
 800961c:	bfc4      	itt	gt
 800961e:	1a9b      	subgt	r3, r3, r2
 8009620:	18ed      	addgt	r5, r5, r3
 8009622:	2600      	movs	r6, #0
 8009624:	341a      	adds	r4, #26
 8009626:	42b5      	cmp	r5, r6
 8009628:	d11a      	bne.n	8009660 <_printf_common+0xc8>
 800962a:	2000      	movs	r0, #0
 800962c:	e008      	b.n	8009640 <_printf_common+0xa8>
 800962e:	2301      	movs	r3, #1
 8009630:	4652      	mov	r2, sl
 8009632:	4649      	mov	r1, r9
 8009634:	4638      	mov	r0, r7
 8009636:	47c0      	blx	r8
 8009638:	3001      	adds	r0, #1
 800963a:	d103      	bne.n	8009644 <_printf_common+0xac>
 800963c:	f04f 30ff 	mov.w	r0, #4294967295
 8009640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009644:	3501      	adds	r5, #1
 8009646:	e7c6      	b.n	80095d6 <_printf_common+0x3e>
 8009648:	18e1      	adds	r1, r4, r3
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	2030      	movs	r0, #48	; 0x30
 800964e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009652:	4422      	add	r2, r4
 8009654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800965c:	3302      	adds	r3, #2
 800965e:	e7c7      	b.n	80095f0 <_printf_common+0x58>
 8009660:	2301      	movs	r3, #1
 8009662:	4622      	mov	r2, r4
 8009664:	4649      	mov	r1, r9
 8009666:	4638      	mov	r0, r7
 8009668:	47c0      	blx	r8
 800966a:	3001      	adds	r0, #1
 800966c:	d0e6      	beq.n	800963c <_printf_common+0xa4>
 800966e:	3601      	adds	r6, #1
 8009670:	e7d9      	b.n	8009626 <_printf_common+0x8e>
	...

08009674 <_printf_i>:
 8009674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009678:	7e0f      	ldrb	r7, [r1, #24]
 800967a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800967c:	2f78      	cmp	r7, #120	; 0x78
 800967e:	4691      	mov	r9, r2
 8009680:	4680      	mov	r8, r0
 8009682:	460c      	mov	r4, r1
 8009684:	469a      	mov	sl, r3
 8009686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800968a:	d807      	bhi.n	800969c <_printf_i+0x28>
 800968c:	2f62      	cmp	r7, #98	; 0x62
 800968e:	d80a      	bhi.n	80096a6 <_printf_i+0x32>
 8009690:	2f00      	cmp	r7, #0
 8009692:	f000 80d8 	beq.w	8009846 <_printf_i+0x1d2>
 8009696:	2f58      	cmp	r7, #88	; 0x58
 8009698:	f000 80a3 	beq.w	80097e2 <_printf_i+0x16e>
 800969c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096a4:	e03a      	b.n	800971c <_printf_i+0xa8>
 80096a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096aa:	2b15      	cmp	r3, #21
 80096ac:	d8f6      	bhi.n	800969c <_printf_i+0x28>
 80096ae:	a101      	add	r1, pc, #4	; (adr r1, 80096b4 <_printf_i+0x40>)
 80096b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096b4:	0800970d 	.word	0x0800970d
 80096b8:	08009721 	.word	0x08009721
 80096bc:	0800969d 	.word	0x0800969d
 80096c0:	0800969d 	.word	0x0800969d
 80096c4:	0800969d 	.word	0x0800969d
 80096c8:	0800969d 	.word	0x0800969d
 80096cc:	08009721 	.word	0x08009721
 80096d0:	0800969d 	.word	0x0800969d
 80096d4:	0800969d 	.word	0x0800969d
 80096d8:	0800969d 	.word	0x0800969d
 80096dc:	0800969d 	.word	0x0800969d
 80096e0:	0800982d 	.word	0x0800982d
 80096e4:	08009751 	.word	0x08009751
 80096e8:	0800980f 	.word	0x0800980f
 80096ec:	0800969d 	.word	0x0800969d
 80096f0:	0800969d 	.word	0x0800969d
 80096f4:	0800984f 	.word	0x0800984f
 80096f8:	0800969d 	.word	0x0800969d
 80096fc:	08009751 	.word	0x08009751
 8009700:	0800969d 	.word	0x0800969d
 8009704:	0800969d 	.word	0x0800969d
 8009708:	08009817 	.word	0x08009817
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	1d1a      	adds	r2, r3, #4
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	602a      	str	r2, [r5, #0]
 8009714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800971c:	2301      	movs	r3, #1
 800971e:	e0a3      	b.n	8009868 <_printf_i+0x1f4>
 8009720:	6820      	ldr	r0, [r4, #0]
 8009722:	6829      	ldr	r1, [r5, #0]
 8009724:	0606      	lsls	r6, r0, #24
 8009726:	f101 0304 	add.w	r3, r1, #4
 800972a:	d50a      	bpl.n	8009742 <_printf_i+0xce>
 800972c:	680e      	ldr	r6, [r1, #0]
 800972e:	602b      	str	r3, [r5, #0]
 8009730:	2e00      	cmp	r6, #0
 8009732:	da03      	bge.n	800973c <_printf_i+0xc8>
 8009734:	232d      	movs	r3, #45	; 0x2d
 8009736:	4276      	negs	r6, r6
 8009738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800973c:	485e      	ldr	r0, [pc, #376]	; (80098b8 <_printf_i+0x244>)
 800973e:	230a      	movs	r3, #10
 8009740:	e019      	b.n	8009776 <_printf_i+0x102>
 8009742:	680e      	ldr	r6, [r1, #0]
 8009744:	602b      	str	r3, [r5, #0]
 8009746:	f010 0f40 	tst.w	r0, #64	; 0x40
 800974a:	bf18      	it	ne
 800974c:	b236      	sxthne	r6, r6
 800974e:	e7ef      	b.n	8009730 <_printf_i+0xbc>
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	6820      	ldr	r0, [r4, #0]
 8009754:	1d19      	adds	r1, r3, #4
 8009756:	6029      	str	r1, [r5, #0]
 8009758:	0601      	lsls	r1, r0, #24
 800975a:	d501      	bpl.n	8009760 <_printf_i+0xec>
 800975c:	681e      	ldr	r6, [r3, #0]
 800975e:	e002      	b.n	8009766 <_printf_i+0xf2>
 8009760:	0646      	lsls	r6, r0, #25
 8009762:	d5fb      	bpl.n	800975c <_printf_i+0xe8>
 8009764:	881e      	ldrh	r6, [r3, #0]
 8009766:	4854      	ldr	r0, [pc, #336]	; (80098b8 <_printf_i+0x244>)
 8009768:	2f6f      	cmp	r7, #111	; 0x6f
 800976a:	bf0c      	ite	eq
 800976c:	2308      	moveq	r3, #8
 800976e:	230a      	movne	r3, #10
 8009770:	2100      	movs	r1, #0
 8009772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009776:	6865      	ldr	r5, [r4, #4]
 8009778:	60a5      	str	r5, [r4, #8]
 800977a:	2d00      	cmp	r5, #0
 800977c:	bfa2      	ittt	ge
 800977e:	6821      	ldrge	r1, [r4, #0]
 8009780:	f021 0104 	bicge.w	r1, r1, #4
 8009784:	6021      	strge	r1, [r4, #0]
 8009786:	b90e      	cbnz	r6, 800978c <_printf_i+0x118>
 8009788:	2d00      	cmp	r5, #0
 800978a:	d04d      	beq.n	8009828 <_printf_i+0x1b4>
 800978c:	4615      	mov	r5, r2
 800978e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009792:	fb03 6711 	mls	r7, r3, r1, r6
 8009796:	5dc7      	ldrb	r7, [r0, r7]
 8009798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800979c:	4637      	mov	r7, r6
 800979e:	42bb      	cmp	r3, r7
 80097a0:	460e      	mov	r6, r1
 80097a2:	d9f4      	bls.n	800978e <_printf_i+0x11a>
 80097a4:	2b08      	cmp	r3, #8
 80097a6:	d10b      	bne.n	80097c0 <_printf_i+0x14c>
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	07de      	lsls	r6, r3, #31
 80097ac:	d508      	bpl.n	80097c0 <_printf_i+0x14c>
 80097ae:	6923      	ldr	r3, [r4, #16]
 80097b0:	6861      	ldr	r1, [r4, #4]
 80097b2:	4299      	cmp	r1, r3
 80097b4:	bfde      	ittt	le
 80097b6:	2330      	movle	r3, #48	; 0x30
 80097b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097c0:	1b52      	subs	r2, r2, r5
 80097c2:	6122      	str	r2, [r4, #16]
 80097c4:	f8cd a000 	str.w	sl, [sp]
 80097c8:	464b      	mov	r3, r9
 80097ca:	aa03      	add	r2, sp, #12
 80097cc:	4621      	mov	r1, r4
 80097ce:	4640      	mov	r0, r8
 80097d0:	f7ff fee2 	bl	8009598 <_printf_common>
 80097d4:	3001      	adds	r0, #1
 80097d6:	d14c      	bne.n	8009872 <_printf_i+0x1fe>
 80097d8:	f04f 30ff 	mov.w	r0, #4294967295
 80097dc:	b004      	add	sp, #16
 80097de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e2:	4835      	ldr	r0, [pc, #212]	; (80098b8 <_printf_i+0x244>)
 80097e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097e8:	6829      	ldr	r1, [r5, #0]
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80097f0:	6029      	str	r1, [r5, #0]
 80097f2:	061d      	lsls	r5, r3, #24
 80097f4:	d514      	bpl.n	8009820 <_printf_i+0x1ac>
 80097f6:	07df      	lsls	r7, r3, #31
 80097f8:	bf44      	itt	mi
 80097fa:	f043 0320 	orrmi.w	r3, r3, #32
 80097fe:	6023      	strmi	r3, [r4, #0]
 8009800:	b91e      	cbnz	r6, 800980a <_printf_i+0x196>
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	f023 0320 	bic.w	r3, r3, #32
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	2310      	movs	r3, #16
 800980c:	e7b0      	b.n	8009770 <_printf_i+0xfc>
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	f043 0320 	orr.w	r3, r3, #32
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	2378      	movs	r3, #120	; 0x78
 8009818:	4828      	ldr	r0, [pc, #160]	; (80098bc <_printf_i+0x248>)
 800981a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800981e:	e7e3      	b.n	80097e8 <_printf_i+0x174>
 8009820:	0659      	lsls	r1, r3, #25
 8009822:	bf48      	it	mi
 8009824:	b2b6      	uxthmi	r6, r6
 8009826:	e7e6      	b.n	80097f6 <_printf_i+0x182>
 8009828:	4615      	mov	r5, r2
 800982a:	e7bb      	b.n	80097a4 <_printf_i+0x130>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	6826      	ldr	r6, [r4, #0]
 8009830:	6961      	ldr	r1, [r4, #20]
 8009832:	1d18      	adds	r0, r3, #4
 8009834:	6028      	str	r0, [r5, #0]
 8009836:	0635      	lsls	r5, r6, #24
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	d501      	bpl.n	8009840 <_printf_i+0x1cc>
 800983c:	6019      	str	r1, [r3, #0]
 800983e:	e002      	b.n	8009846 <_printf_i+0x1d2>
 8009840:	0670      	lsls	r0, r6, #25
 8009842:	d5fb      	bpl.n	800983c <_printf_i+0x1c8>
 8009844:	8019      	strh	r1, [r3, #0]
 8009846:	2300      	movs	r3, #0
 8009848:	6123      	str	r3, [r4, #16]
 800984a:	4615      	mov	r5, r2
 800984c:	e7ba      	b.n	80097c4 <_printf_i+0x150>
 800984e:	682b      	ldr	r3, [r5, #0]
 8009850:	1d1a      	adds	r2, r3, #4
 8009852:	602a      	str	r2, [r5, #0]
 8009854:	681d      	ldr	r5, [r3, #0]
 8009856:	6862      	ldr	r2, [r4, #4]
 8009858:	2100      	movs	r1, #0
 800985a:	4628      	mov	r0, r5
 800985c:	f7f6 fcc8 	bl	80001f0 <memchr>
 8009860:	b108      	cbz	r0, 8009866 <_printf_i+0x1f2>
 8009862:	1b40      	subs	r0, r0, r5
 8009864:	6060      	str	r0, [r4, #4]
 8009866:	6863      	ldr	r3, [r4, #4]
 8009868:	6123      	str	r3, [r4, #16]
 800986a:	2300      	movs	r3, #0
 800986c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009870:	e7a8      	b.n	80097c4 <_printf_i+0x150>
 8009872:	6923      	ldr	r3, [r4, #16]
 8009874:	462a      	mov	r2, r5
 8009876:	4649      	mov	r1, r9
 8009878:	4640      	mov	r0, r8
 800987a:	47d0      	blx	sl
 800987c:	3001      	adds	r0, #1
 800987e:	d0ab      	beq.n	80097d8 <_printf_i+0x164>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	079b      	lsls	r3, r3, #30
 8009884:	d413      	bmi.n	80098ae <_printf_i+0x23a>
 8009886:	68e0      	ldr	r0, [r4, #12]
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	4298      	cmp	r0, r3
 800988c:	bfb8      	it	lt
 800988e:	4618      	movlt	r0, r3
 8009890:	e7a4      	b.n	80097dc <_printf_i+0x168>
 8009892:	2301      	movs	r3, #1
 8009894:	4632      	mov	r2, r6
 8009896:	4649      	mov	r1, r9
 8009898:	4640      	mov	r0, r8
 800989a:	47d0      	blx	sl
 800989c:	3001      	adds	r0, #1
 800989e:	d09b      	beq.n	80097d8 <_printf_i+0x164>
 80098a0:	3501      	adds	r5, #1
 80098a2:	68e3      	ldr	r3, [r4, #12]
 80098a4:	9903      	ldr	r1, [sp, #12]
 80098a6:	1a5b      	subs	r3, r3, r1
 80098a8:	42ab      	cmp	r3, r5
 80098aa:	dcf2      	bgt.n	8009892 <_printf_i+0x21e>
 80098ac:	e7eb      	b.n	8009886 <_printf_i+0x212>
 80098ae:	2500      	movs	r5, #0
 80098b0:	f104 0619 	add.w	r6, r4, #25
 80098b4:	e7f5      	b.n	80098a2 <_printf_i+0x22e>
 80098b6:	bf00      	nop
 80098b8:	08009d81 	.word	0x08009d81
 80098bc:	08009d92 	.word	0x08009d92

080098c0 <_sbrk_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4d06      	ldr	r5, [pc, #24]	; (80098dc <_sbrk_r+0x1c>)
 80098c4:	2300      	movs	r3, #0
 80098c6:	4604      	mov	r4, r0
 80098c8:	4608      	mov	r0, r1
 80098ca:	602b      	str	r3, [r5, #0]
 80098cc:	f7f8 fec8 	bl	8002660 <_sbrk>
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	d102      	bne.n	80098da <_sbrk_r+0x1a>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	b103      	cbz	r3, 80098da <_sbrk_r+0x1a>
 80098d8:	6023      	str	r3, [r4, #0]
 80098da:	bd38      	pop	{r3, r4, r5, pc}
 80098dc:	20000b40 	.word	0x20000b40

080098e0 <__sread>:
 80098e0:	b510      	push	{r4, lr}
 80098e2:	460c      	mov	r4, r1
 80098e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e8:	f000 f8f8 	bl	8009adc <_read_r>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	bfab      	itete	ge
 80098f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098f2:	89a3      	ldrhlt	r3, [r4, #12]
 80098f4:	181b      	addge	r3, r3, r0
 80098f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098fa:	bfac      	ite	ge
 80098fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80098fe:	81a3      	strhlt	r3, [r4, #12]
 8009900:	bd10      	pop	{r4, pc}

08009902 <__swrite>:
 8009902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009906:	461f      	mov	r7, r3
 8009908:	898b      	ldrh	r3, [r1, #12]
 800990a:	05db      	lsls	r3, r3, #23
 800990c:	4605      	mov	r5, r0
 800990e:	460c      	mov	r4, r1
 8009910:	4616      	mov	r6, r2
 8009912:	d505      	bpl.n	8009920 <__swrite+0x1e>
 8009914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009918:	2302      	movs	r3, #2
 800991a:	2200      	movs	r2, #0
 800991c:	f000 f868 	bl	80099f0 <_lseek_r>
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800992a:	81a3      	strh	r3, [r4, #12]
 800992c:	4632      	mov	r2, r6
 800992e:	463b      	mov	r3, r7
 8009930:	4628      	mov	r0, r5
 8009932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009936:	f000 b817 	b.w	8009968 <_write_r>

0800993a <__sseek>:
 800993a:	b510      	push	{r4, lr}
 800993c:	460c      	mov	r4, r1
 800993e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009942:	f000 f855 	bl	80099f0 <_lseek_r>
 8009946:	1c43      	adds	r3, r0, #1
 8009948:	89a3      	ldrh	r3, [r4, #12]
 800994a:	bf15      	itete	ne
 800994c:	6560      	strne	r0, [r4, #84]	; 0x54
 800994e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009956:	81a3      	strheq	r3, [r4, #12]
 8009958:	bf18      	it	ne
 800995a:	81a3      	strhne	r3, [r4, #12]
 800995c:	bd10      	pop	{r4, pc}

0800995e <__sclose>:
 800995e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009962:	f000 b813 	b.w	800998c <_close_r>
	...

08009968 <_write_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4d07      	ldr	r5, [pc, #28]	; (8009988 <_write_r+0x20>)
 800996c:	4604      	mov	r4, r0
 800996e:	4608      	mov	r0, r1
 8009970:	4611      	mov	r1, r2
 8009972:	2200      	movs	r2, #0
 8009974:	602a      	str	r2, [r5, #0]
 8009976:	461a      	mov	r2, r3
 8009978:	f7f8 fe21 	bl	80025be <_write>
 800997c:	1c43      	adds	r3, r0, #1
 800997e:	d102      	bne.n	8009986 <_write_r+0x1e>
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	b103      	cbz	r3, 8009986 <_write_r+0x1e>
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	20000b40 	.word	0x20000b40

0800998c <_close_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4d06      	ldr	r5, [pc, #24]	; (80099a8 <_close_r+0x1c>)
 8009990:	2300      	movs	r3, #0
 8009992:	4604      	mov	r4, r0
 8009994:	4608      	mov	r0, r1
 8009996:	602b      	str	r3, [r5, #0]
 8009998:	f7f8 fe2d 	bl	80025f6 <_close>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d102      	bne.n	80099a6 <_close_r+0x1a>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	b103      	cbz	r3, 80099a6 <_close_r+0x1a>
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	20000b40 	.word	0x20000b40

080099ac <_fstat_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4d07      	ldr	r5, [pc, #28]	; (80099cc <_fstat_r+0x20>)
 80099b0:	2300      	movs	r3, #0
 80099b2:	4604      	mov	r4, r0
 80099b4:	4608      	mov	r0, r1
 80099b6:	4611      	mov	r1, r2
 80099b8:	602b      	str	r3, [r5, #0]
 80099ba:	f7f8 fe28 	bl	800260e <_fstat>
 80099be:	1c43      	adds	r3, r0, #1
 80099c0:	d102      	bne.n	80099c8 <_fstat_r+0x1c>
 80099c2:	682b      	ldr	r3, [r5, #0]
 80099c4:	b103      	cbz	r3, 80099c8 <_fstat_r+0x1c>
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	bd38      	pop	{r3, r4, r5, pc}
 80099ca:	bf00      	nop
 80099cc:	20000b40 	.word	0x20000b40

080099d0 <_isatty_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4d06      	ldr	r5, [pc, #24]	; (80099ec <_isatty_r+0x1c>)
 80099d4:	2300      	movs	r3, #0
 80099d6:	4604      	mov	r4, r0
 80099d8:	4608      	mov	r0, r1
 80099da:	602b      	str	r3, [r5, #0]
 80099dc:	f7f8 fe27 	bl	800262e <_isatty>
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	d102      	bne.n	80099ea <_isatty_r+0x1a>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	b103      	cbz	r3, 80099ea <_isatty_r+0x1a>
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	bd38      	pop	{r3, r4, r5, pc}
 80099ec:	20000b40 	.word	0x20000b40

080099f0 <_lseek_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d07      	ldr	r5, [pc, #28]	; (8009a10 <_lseek_r+0x20>)
 80099f4:	4604      	mov	r4, r0
 80099f6:	4608      	mov	r0, r1
 80099f8:	4611      	mov	r1, r2
 80099fa:	2200      	movs	r2, #0
 80099fc:	602a      	str	r2, [r5, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	f7f8 fe20 	bl	8002644 <_lseek>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_lseek_r+0x1e>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_lseek_r+0x1e>
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	20000b40 	.word	0x20000b40

08009a14 <memcpy>:
 8009a14:	440a      	add	r2, r1
 8009a16:	4291      	cmp	r1, r2
 8009a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a1c:	d100      	bne.n	8009a20 <memcpy+0xc>
 8009a1e:	4770      	bx	lr
 8009a20:	b510      	push	{r4, lr}
 8009a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a2a:	4291      	cmp	r1, r2
 8009a2c:	d1f9      	bne.n	8009a22 <memcpy+0xe>
 8009a2e:	bd10      	pop	{r4, pc}

08009a30 <memmove>:
 8009a30:	4288      	cmp	r0, r1
 8009a32:	b510      	push	{r4, lr}
 8009a34:	eb01 0402 	add.w	r4, r1, r2
 8009a38:	d902      	bls.n	8009a40 <memmove+0x10>
 8009a3a:	4284      	cmp	r4, r0
 8009a3c:	4623      	mov	r3, r4
 8009a3e:	d807      	bhi.n	8009a50 <memmove+0x20>
 8009a40:	1e43      	subs	r3, r0, #1
 8009a42:	42a1      	cmp	r1, r4
 8009a44:	d008      	beq.n	8009a58 <memmove+0x28>
 8009a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a4e:	e7f8      	b.n	8009a42 <memmove+0x12>
 8009a50:	4402      	add	r2, r0
 8009a52:	4601      	mov	r1, r0
 8009a54:	428a      	cmp	r2, r1
 8009a56:	d100      	bne.n	8009a5a <memmove+0x2a>
 8009a58:	bd10      	pop	{r4, pc}
 8009a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a62:	e7f7      	b.n	8009a54 <memmove+0x24>

08009a64 <__malloc_lock>:
 8009a64:	4801      	ldr	r0, [pc, #4]	; (8009a6c <__malloc_lock+0x8>)
 8009a66:	f7ff b999 	b.w	8008d9c <__retarget_lock_acquire_recursive>
 8009a6a:	bf00      	nop
 8009a6c:	20000b34 	.word	0x20000b34

08009a70 <__malloc_unlock>:
 8009a70:	4801      	ldr	r0, [pc, #4]	; (8009a78 <__malloc_unlock+0x8>)
 8009a72:	f7ff b994 	b.w	8008d9e <__retarget_lock_release_recursive>
 8009a76:	bf00      	nop
 8009a78:	20000b34 	.word	0x20000b34

08009a7c <_realloc_r>:
 8009a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a80:	4680      	mov	r8, r0
 8009a82:	4614      	mov	r4, r2
 8009a84:	460e      	mov	r6, r1
 8009a86:	b921      	cbnz	r1, 8009a92 <_realloc_r+0x16>
 8009a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	f7ff ba59 	b.w	8008f44 <_malloc_r>
 8009a92:	b92a      	cbnz	r2, 8009aa0 <_realloc_r+0x24>
 8009a94:	f7ff f9ea 	bl	8008e6c <_free_r>
 8009a98:	4625      	mov	r5, r4
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa0:	f000 f82e 	bl	8009b00 <_malloc_usable_size_r>
 8009aa4:	4284      	cmp	r4, r0
 8009aa6:	4607      	mov	r7, r0
 8009aa8:	d802      	bhi.n	8009ab0 <_realloc_r+0x34>
 8009aaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009aae:	d812      	bhi.n	8009ad6 <_realloc_r+0x5a>
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	f7ff fa46 	bl	8008f44 <_malloc_r>
 8009ab8:	4605      	mov	r5, r0
 8009aba:	2800      	cmp	r0, #0
 8009abc:	d0ed      	beq.n	8009a9a <_realloc_r+0x1e>
 8009abe:	42bc      	cmp	r4, r7
 8009ac0:	4622      	mov	r2, r4
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	bf28      	it	cs
 8009ac6:	463a      	movcs	r2, r7
 8009ac8:	f7ff ffa4 	bl	8009a14 <memcpy>
 8009acc:	4631      	mov	r1, r6
 8009ace:	4640      	mov	r0, r8
 8009ad0:	f7ff f9cc 	bl	8008e6c <_free_r>
 8009ad4:	e7e1      	b.n	8009a9a <_realloc_r+0x1e>
 8009ad6:	4635      	mov	r5, r6
 8009ad8:	e7df      	b.n	8009a9a <_realloc_r+0x1e>
	...

08009adc <_read_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4d07      	ldr	r5, [pc, #28]	; (8009afc <_read_r+0x20>)
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	4608      	mov	r0, r1
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	602a      	str	r2, [r5, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	f7f8 fd4a 	bl	8002584 <_read>
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	d102      	bne.n	8009afa <_read_r+0x1e>
 8009af4:	682b      	ldr	r3, [r5, #0]
 8009af6:	b103      	cbz	r3, 8009afa <_read_r+0x1e>
 8009af8:	6023      	str	r3, [r4, #0]
 8009afa:	bd38      	pop	{r3, r4, r5, pc}
 8009afc:	20000b40 	.word	0x20000b40

08009b00 <_malloc_usable_size_r>:
 8009b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b04:	1f18      	subs	r0, r3, #4
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bfbc      	itt	lt
 8009b0a:	580b      	ldrlt	r3, [r1, r0]
 8009b0c:	18c0      	addlt	r0, r0, r3
 8009b0e:	4770      	bx	lr

08009b10 <_init>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	bf00      	nop
 8009b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b16:	bc08      	pop	{r3}
 8009b18:	469e      	mov	lr, r3
 8009b1a:	4770      	bx	lr

08009b1c <_fini>:
 8009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1e:	bf00      	nop
 8009b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b22:	bc08      	pop	{r3}
 8009b24:	469e      	mov	lr, r3
 8009b26:	4770      	bx	lr
